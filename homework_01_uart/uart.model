<!DOCTYPE Robei>
<Module Height="600" Name="uart" Parameters="" Include="" File="Current/uart.model" Comment="" Color="#d3d3d3" X="0" Width="900" Class="module" Y="0" Type="module" Code="`define DEL 1&#xa;&#xa;//&#xa;// This block is used to receive data&#xa;//&#xa;reg         rx_q;&#xa;wire        rx_start;&#xa;reg  [7:0]  rx_cnt;&#xa;reg         rx_cnt_en;&#xa;&#xa;// &#xa;// Edge deteted&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    rx_q &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    rx_q &lt;= #`DEL rx;&#xa;  end&#xa;end      &#xa;// Falling edge effective&#xa;assign rx_start = ( rx_q &amp;&amp; ~rx );&#xa;&#xa;//&#xa;// Generate the count enable signal &#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    rx_cnt_en &lt;= #`DEL 1'b0;&#xa;  end&#xa;  //&#xa;  // Count enable&#xa;  else if( rx_start ) begin&#xa;    rx_cnt_en &lt;= #`DEL 1'b1;&#xa;  end&#xa;  //&#xa;  // Count disable&#xa;  else if( rx_cnt == 8'd169 ) begin&#xa;    rx_cnt_en &lt;= #`DEL 1'b0;&#xa;  end&#xa;end     &#xa;&#xa;//&#xa;// Frequence division&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if ( ~rst_n ) begin&#xa;    rx_cnt &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else if ( rx_cnt_en ) begin&#xa;    rx_cnt &lt;= #`DEL rx_cnt + 8'b1;&#xa;  end&#xa;  else begin&#xa;    rx_cnt &lt;= #`DEL 8'b0;&#xa;  end&#xa;end&#xa;&#xa;reg [8:0] data_received_temp;&#xa;//&#xa;// FSM&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    data_received_temp &lt;= #`DEL 9'b0;&#xa;    rx_buf_full        &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else if( rx_cnt_en ) begin&#xa;    case( rx_cnt ) &#xa;      8'd24: begin&#xa;        data_received_temp[0] &lt;= #`DEL rx;&#xa;        rx_buf_full           &lt;= #`DEL 1'b0;&#xa;      end  // Least significant bit&#xa;      8'd40: begin&#xa;        data_received_temp[1] &lt;= #`DEL rx;&#xa;        rx_buf_full           &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd56: begin&#xa;        data_received_temp[2] &lt;= #`DEL rx;&#xa;        rx_buf_full           &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd72: begin&#xa;        data_received_temp[3] &lt;= #`DEL rx;&#xa;        rx_buf_full           &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd88: begin&#xa;        data_received_temp[4] &lt;= #`DEL rx;&#xa;        rx_buf_full           &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd104: begin&#xa;        data_received_temp[5] &lt;= #`DEL rx;&#xa;        rx_buf_full           &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd120: begin&#xa;        data_received_temp[6] &lt;= #`DEL rx;&#xa;        rx_buf_full           &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd136: begin&#xa;        data_received_temp[7] &lt;= #`DEL rx;&#xa;        rx_buf_full           &lt;= #`DEL 1'b0;&#xa;      end  // Most significant bit&#xa;      8'd152: begin&#xa;        data_received_temp[8] &lt;= #`DEL rx;&#xa;        rx_buf_full           &lt;= #`DEL 1'b0;&#xa;      end  // Parity check&#xa;      8'd168: begin&#xa;        rx_buf_full           &lt;= #`DEL 1'b1;&#xa;      end  // Stop bit&#xa;      default:begin&#xa;        rx_buf_full           &lt;= #`DEL 1'b0;&#xa;      end&#xa;    endcase&#xa;  end// Least significant bit&#xa;end    &#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    data_received &lt;= #`DEL 9'b0;&#xa;  end&#xa;  else if( rx_cnt == 8'd168 ) begin&#xa;    data_received &lt;= #`DEL data_received_temp;  // Ensure data can be collected&#xa;  end&#xa;end      &#xa;&#xa;//&#xa;// This block is used to transmit data&#xa;//&#xa;reg         tx_en_q;&#xa;wire        tx_start;&#xa;reg  [7:0]  tx_cnt;&#xa;reg         tx_cnt_en;&#xa;reg  [8:0]  shift_reg;&#xa;&#xa;// &#xa;// Edge deteted&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    tx_en_q &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    tx_en_q &lt;= #`DEL tx_en;&#xa;  end&#xa;end      &#xa;// Rising edge effective&#xa;assign tx_start = ( ~tx_en_q &amp;&amp; tx_en );&#xa;&#xa;//&#xa;// Transmit data_send to shift_reg&#xa;//&#xa;always @( posedge tx_start or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    shift_reg &lt;= #`DEL 9'd0;&#xa;  end&#xa;  else begin&#xa;    shift_reg[7:0] &lt;= #`DEL data_send;&#xa;    //&#xa;    // Parity check bit, even parity&#xa;    shift_reg[8]   &lt;= #`DEL ( ^data_send ) ? 1 : 0;   &#xa;  end&#xa;end      &#xa;&#xa;//&#xa;// Generate the count enable signal &#xa;// Generate the tx_buf_full signal which means shift_reg is not empty&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    tx_cnt_en   &lt;= #`DEL 1'b0;&#xa;    tx_buf_full &lt;= #`DEL 1'b0;&#xa;  end&#xa;  //&#xa;  // Count enable&#xa;  else if( tx_start ) begin&#xa;    tx_cnt_en   &lt;= #`DEL 1'b1;&#xa;    tx_buf_full &lt;= #`DEL 1'b1;&#xa;  end&#xa;  //&#xa;  // Count disable&#xa;  else if( tx_cnt == 8'd176 ) begin&#xa;    tx_cnt_en   &lt;= #`DEL 1'b0;&#xa;    tx_buf_full &lt;= #`DEL 1'b0;&#xa;  end&#xa;end     &#xa;&#xa;//&#xa;// Frequence division&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if ( ~rst_n ) begin&#xa;    tx_cnt &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else if ( tx_cnt_en ) begin&#xa;    tx_cnt &lt;= #`DEL tx_cnt + 8'b1;&#xa;  end&#xa;  else begin&#xa;    tx_cnt &lt;= #`DEL 8'b0;&#xa;  end&#xa;end&#xa;&#xa;//&#xa;// FSM&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    tx &lt;= #`DEL 1'b1;&#xa;  end&#xa;  else if( tx_cnt_en ) begin&#xa;    case( tx_cnt ) &#xa;      8'd0: begin&#xa;        tx &lt;= #`DEL 1'b0;&#xa;      end  // Start signal&#xa;      8'd16: begin&#xa;        tx &lt;= #`DEL shift_reg[0];&#xa;      end  // Least significant bit&#xa;      8'd32: begin&#xa;        tx &lt;= #`DEL shift_reg[1];&#xa;      end&#xa;      8'd48: begin&#xa;        tx &lt;= #`DEL shift_reg[2];&#xa;      end&#xa;      8'd64: begin&#xa;        tx &lt;= #`DEL shift_reg[3];&#xa;      end&#xa;      8'd80: begin&#xa;        tx &lt;= #`DEL shift_reg[4];&#xa;      end&#xa;      8'd96: begin&#xa;        tx &lt;= #`DEL shift_reg[5];&#xa;      end&#xa;      8'd112: begin&#xa;        tx &lt;= #`DEL shift_reg[6];&#xa;      end  &#xa;      8'd128: begin&#xa;        tx &lt;= #`DEL shift_reg[7];&#xa;      end  // Most significant bit&#xa;      8'd144: begin&#xa;        tx &lt;= #`DEL shift_reg[8];&#xa;      end  // Parity check      &#xa;      8'd160: begin&#xa;        tx &lt;= #`DEL 1'b1;&#xa;      end  // Stop bit&#xa;    endcase&#xa;  end&#xa;end      &#xa;" Parent="0">
 <Port Height="20" Name="clk" Side="left" Color="#00ffff" X="-0.0222222" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.125" Inout="input" Parent="uart"/>
 <Port Height="20" Name="rst_n" Side="left" Color="#7fffd4" X="-0.0222222" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.266667" Inout="input" Parent="uart"/>
 <Port Height="20" Name="rx" Side="left" Color="#0000ff" X="-0.0222222" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.408333" Inout="input" Parent="uart"/>
 <Port Height="20" Name="tx_en" Side="left" Color="#8a2be2" X="-0.0222222" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.55" Inout="input" Parent="uart"/>
 <Port Height="20" Name="data_send" Side="left" Color="#a52a2a" X="-0.0222222" Width="20" Function="" Datatype="wire" Datasize="8" Y="0.691667" Inout="input" Parent="uart"/>
 <Port Height="20" Name="tx_buf_full" Side="right" Color="#5f9ea0" X="0.977778" Width="20" Function="" Datatype="reg" Datasize="1" Y="0.15" Inout="output" Parent="uart"/>
 <Port Height="20" Name="rx_buf_full" Side="right" Color="#b8860b" X="0.977778" Width="20" Function="" Datatype="reg" Datasize="1" Y="0.316667" Inout="output" Parent="uart"/>
 <Port Height="20" Name="tx" Side="right" Color="#7fff00" X="0.977778" Width="20" Function="" Datatype="reg" Datasize="1" Y="0.483333" Inout="output" Parent="uart"/>
 <Port Height="20" Name="data_received" Side="right" Color="#ff8c00" X="0.977778" Width="20" Function="" Datatype="reg" Datasize="9" Y="0.65" Inout="output" Parent="uart"/>
</Module>
