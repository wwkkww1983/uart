module uart_top(
	clk,
	rst_n,
	key_in,
	tx,
	count_enable,
	tx_buf_full,
	rx,
	led0_out,
	led1_out,
	clk_out);

	//---Ports declearation: generated by Robei---
	input clk;
	input rst_n;
	input [3:0] key_in;
	output tx;
	input count_enable;
	output tx_buf_full;
	input rx;
	output [3:0] led0_out;
	output [3:0] led1_out;
	output clk_out;

	wire clk;
	wire rst_n;
	wire [3:0] key_in;
	wire tx;
	wire count_enable;
	wire tx_buf_full;
	wire rx;
	wire [3:0] led0_out;
	wire [3:0] led1_out;
	wire clk_out;
	wire uart1_tx_buf_full;
	wire [8:0] uart1_data_received;
	wire uart1_rx_buf_full;
	wire led1_led_done;

	//----Code starts here: integrated by Robei-----
	`define DEL 1
	
	wire [7:0] key_out;
	wire [7:0] count_out;
	wire       key_pressed;
	wire       count_full;
	
	reg  [7:0] data_send;
	reg        tx_en;
	
	always @( posedge clk or negedge rst_n ) begin
	  if( ~rst_n ) begin
	    data_send <= #`DEL 8'd0;
	  end
	  else if( key_pressed ) begin
	    data_send <= #`DEL key_out;
	  end
	  else if( count_full ) begin
	    data_send <= #`DEL count_out;
	  end
	end   
	
	always @( posedge clk or negedge rst_n ) begin
	  if( ~rst_n ) begin
	    tx_en     <= #`DEL 1'd0;
	  end
	  else begin
	    tx_en     <= #`DEL key_pressed || count_full;
	  end
	end    
	
	//---Module instantiation---
	key key1(
		.clk(clk),
		.rst_n(rst_n),
		.key_in(key_in),
		.key_out(key_out),
		.key_pressed(key_pressed));

	division_duty division_duty1(
		.clk(clk),
		.rst_n(rst_n),
		.clk_out(clk_out),
		.data_in(uart1_data_received),
		.data_en(uart1_rx_buf_full));

	uart uart1(
		.clk(clk),
		.rst_n(rst_n),
		.rx(rx),
		.tx_en(tx_en),
		.data_send(data_send),
		.tx_buf_full(uart1_tx_buf_full),
		.rx_buf_full(uart1_rx_buf_full),
		.tx(tx),
		.data_received(uart1_data_received));

	countdown countdown1(
		.clk(clk),
		.rst_n(rst_n),
		.count_en(count_enable),
		.tx_done(uart1_tx_buf_full),
		.count_full(count_full),
		.count_out(count_out));

	led led1(
		.clk(clk),
		.rst_n(rst_n),
		.data_in(uart1_data_received),
		.display_en(uart1_rx_buf_full),
		.led_done(led1_led_done),
		.led0_out(led0_out),
		.led1_out(led1_out));

	orgate or1(
		.a(uart1_tx_buf_full),
		.b(led1_led_done),
		.y(tx_buf_full));

endmodule    //uart_top

