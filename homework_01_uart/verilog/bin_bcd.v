module bin_bcd(
	clk,
	rst_n,
	tran_en,
	data_in,
	tran_done,
	hundreds_place,
	tens_place,
	ones_place);

	//---Ports declearation: generated by Robei---
	input clk;
	input rst_n;
	input tran_en;
	input [7:0] data_in;
	output tran_done;
	output [3:0] hundreds_place;
	output [3:0] tens_place;
	output [3:0] ones_place;

	wire clk;
	wire rst_n;
	wire tran_en;
	wire [7:0] data_in;
	reg tran_done;
	wire [3:0] hundreds_place;
	wire [3:0] tens_place;
	wire [3:0] ones_place;

	//----Code starts here: integrated by Robei-----
	`define DEL 1
	
	reg       [2:0]   cs;
	reg       [2:0]   ns;
	
	reg       [3:0]   shift_cnt;
	reg       [7:0]   data_reg;
	
	reg       [3:0]   ones_reg;
	reg       [3:0]   tens_reg;
	reg       [3:0]   hundreds_reg;
	
	reg       [3:0]   ones_out;
	reg       [3:0]   tens_out;
	reg       [3:0]   hundreds_out;
	
	wire      [3:0]   ones_temp;
	wire      [3:0]   tens_temp;
	wire      [3:0]   hundreds_temp;
	
	parameter [2:0]  IDLE   = 3'b001,
	  SHIFT     = 3'b010,
	  DONE      = 3'b100;
	
	reg     tran_en_q;
	wire    tran_en_flag;
	
	always @( posedge clk or negedge rst_n ) begin
	  if( ~rst_n ) begin
	    tran_en_q <= #`DEL 1'b0;
	  end
	  else begin
	    tran_en_q <= #`DEL tran_en;
	  end
	end
	assign tran_en_flag = tran_en_q && ( ~tran_en );
	
	
	//
	// FSM step1
	//
	always @( posedge clk or negedge rst_n ) begin
	  if ( !rst_n ) begin
	    cs <= #`DEL IDLE;
	  end
	  else begin
	    cs <= #`DEL ns;
	  end
	end
	
	//
	// FSM step2
	//
	always @( * ) begin
	  ns = IDLE;
	  case ( cs )
	    IDLE : begin
	      if ( tran_en_flag ) begin
	        ns = SHIFT;
	      end
	      else begin
	        ns = IDLE;
	      end
	    end
	    SHIFT: begin
	      if ( shift_cnt == 9 ) begin
	        ns = DONE;
	      end 
	      else begin
	        ns = SHIFT;
	      end
	    end 
	    DONE : begin 
	        ns = IDLE;
	    end 
	    default : begin 
	        ns = IDLE;
	    end 
	  endcase 
	end
	
	//
	// FSM step3
	//
	always @( posedge clk or negedge rst_n ) begin 
	  if ( !rst_n ) begin 
	    ones_reg     <= #`DEL 4'b0;
	    tens_reg     <= #`DEL 4'b0;
	    hundreds_reg <= #`DEL 4'b0;
	    shift_cnt    <= #`DEL 4'b0;
	    data_reg     <= #`DEL 8'b0;
	    tran_done    <= #`DEL 1'b0;
	  end
	  else begin 
	    case ( ns )
	      IDLE: begin
	        ones_reg     <= #`DEL 4'b0;
	        tens_reg     <= #`DEL 4'b0;
	        hundreds_reg <= #`DEL 4'b0;
	        shift_cnt    <= #`DEL 4'b0;
	        data_reg     <= #`DEL data_in;
	        tran_done    <= #`DEL 1'b0;
	      end
	      SHIFT: begin
	        if( shift_cnt == 8 ) begin
	          shift_cnt <= #`DEL shift_cnt + 1'b1 ;
	          data_reg     <= #`DEL data_reg;
	          ones_reg     <= #`DEL ones_reg;
	          tens_reg     <= #`DEL tens_reg;
	          hundreds_reg <= #`DEL hundreds_reg;			
	        end
	        else begin
	          shift_cnt    <= #`DEL shift_cnt + 1'b1;
	          data_reg     <= #`DEL data_reg  << 1;
	          ones_reg     <= #`DEL {ones_temp[2:0], data_reg[7]};
	          tens_reg     <= #`DEL {tens_temp[2:0], ones_temp[3]};
	          hundreds_reg <= #`DEL {hundreds_temp[2:0], tens_temp[3]};
	        end
	      end
	      DONE: begin
	        tran_done <= #`DEL 1'b1;
	      end
	    endcase 
	  end 
	end      
	
	always @( posedge clk or negedge rst_n ) begin
	  if( ~rst_n ) begin
	    ones_out     <= #`DEL 4'b0;
	    tens_out     <= #`DEL 4'b0;
	    hundreds_out <= #`DEL 4'b0;
	  end
	  else if( tran_done ) begin    
	    ones_out     <= #`DEL ones_reg;
	    tens_out     <= #`DEL tens_reg;
	    hundreds_out <= #`DEL hundreds_reg;
	  end
	  else begin    
	    ones_out     <= #`DEL ones_out;
	    tens_out     <= #`DEL tens_out;
	    hundreds_out <= #`DEL hundreds_out;
	  end
	end      
	
	
	assign ones_temp     = ( ones_reg     > 4'd4 ) ? ( ones_reg     + 2'd3 ) : ones_reg;
	assign tens_temp     = ( tens_reg     > 4'd4 ) ? ( tens_reg     + 2'd3 ) : tens_reg;
	assign hundreds_temp = ( hundreds_reg > 4'd4 ) ? ( hundreds_reg + 2'd3 ) : hundreds_reg;
	
	assign hundreds_place = hundreds_out;
	assign tens_place     = tens_out;
	assign ones_place     = ones_out;
	
	
	
	
endmodule    //bin_bcd

