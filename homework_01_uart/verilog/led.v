module led(
	clk,
	rst_n,
	data_in,
	display_en,
	led0_out,
	led1_out,
	led2_out,
	led_done);

	//---Ports declearation: generated by Robei---
	input clk;
	input rst_n;
	input [8:0] data_in;
	input display_en;
	output [3:0] led0_out;
	output [3:0] led1_out;
	output [3:0] led2_out;
	output led_done;

	wire clk;
	wire rst_n;
	wire [8:0] data_in;
	wire display_en;
	wire [3:0] led0_out;
	wire [3:0] led1_out;
	wire [3:0] led2_out;
	wire led_done;

	//----Code starts here: integrated by Robei-----
	`define DEL 1
	//
	// LED display start signal
	//
	reg  display_en_q;
	wire display_start;
	
	always @( posedge clk or negedge rst_n ) begin
	  if( ~rst_n ) begin
	    display_en_q <= #`DEL 1'b0;
	  end
	  else begin
	    display_en_q <= #`DEL display_en;
	  end
	end      
	// Rising edge effective
	assign display_start = ~display_en_q && display_en;
	
	//
	// Parity check
	//
	always @( posedge clk ) begin
	  if( data_in[8] != ( ^data_in[7:0] ) ) begin
	    $display("LED:Parity check failed!");
	    $display("Receive data is: 9'b%b_%b_%b",data_in[8],data_in[7:4],data_in[3:0]);
	    $finish;
	  end
	end  
	
	
	//---Module instantiation---
	bin_bcd bin_bcd1(
		.clk(clk),
		.rst_n(rst_n),
		.tran_en(display_start),
		.data_in(data_in[7:0]),
		.tran_done(led_done),
		.hundreds_place(led2_out),
		.tens_place(led1_out),
		.ones_place(led0_out));

endmodule    //led

