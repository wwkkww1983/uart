module key(
	clk,
	rst_n,
	key_in,
	key_out,
	key_pressed);

	//---Ports declearation: generated by Robei---
	input clk;
	input rst_n;
	input [3:0] key_in;
	output [7:0] key_out;
	output key_pressed;

	wire clk;
	wire rst_n;
	wire [3:0] key_in;
	reg [7:0] key_out;
	reg key_pressed;

	//----Code starts here: integrated by Robei-----
	`define DEL 1
	
	//
	// Key signal detected
	//
	reg    [3:0] key_in_q;
	wire   [3:0] key_flag;
	
	always @( posedge clk or negedge rst_n ) begin
	  if( ~rst_n ) begin
	    key_in_q <= #`DEL 4'b0;
	  end
	  else begin
	    key_in_q <= #`DEL key_in;
	  end
	end      
	assign key_flag = key_in_q & ( ~key_in );
	
	//
	// Delay 20ms
	//
	reg   [19:0] cnt;
	reg   [ 3:0] key_flag_delay;  // Detect key's status after delay 20ms
	
	always @( posedge clk or negedge rst_n ) begin
	  if( ~rst_n ) begin
	    cnt            <= #`DEL 20'd0;
	    key_flag_delay <= #`DEL  4'd0;
	  end
	  else if( cnt == 20'd 999_998 ) begin
	    cnt            <= #`DEL cnt + 20'd1;
	    key_flag_delay <= #`DEL key_flag;
	  end // 20ms
	  else if( cnt == 20'd 999_999 ) begin
	    cnt            <= #`DEL 20'd0;
	    key_flag_delay <= #`DEL key_flag_delay;
	  end // 20ms
	  else begin
	    cnt            <= #`DEL cnt + 20'd1;
	    key_flag_delay <= #`DEL key_flag_delay;
	  end
	end
	
	//
	// If key has been pressed, output
	//
	always @( posedge clk or negedge rst_n ) begin
	  if( ~rst_n ) begin
	    key_out     <= #`DEL 8'd0;
	    key_pressed <= #`DEL 1'd0;
	  end
	  else begin
	    case( key_flag ) 
	      4'b0000: begin
	        key_out     <= #`DEL 8'd0;
	        key_pressed <= #`DEL 1'd0;
	      end // No key pressed
	      4'b0001: begin
	        key_out     <= #`DEL 8'd1;
	        key_pressed <= #`DEL 1'd1;
	      end // The first key's value is 1
	      4'b0010: begin
	        key_out     <= #`DEL 8'd2;
	        key_pressed <= #`DEL 1'd1;
	      end // The second key's value is 2
	      4'b0100: begin
	        key_out     <= #`DEL 8'd3;
	        key_pressed <= #`DEL 1'd1;
	      end // The third key's value is 3
	      4'b1000: begin
	        key_out     <= #`DEL 8'd4;
	        key_pressed <= #`DEL 1'd1;
	      end // The third key's value is 4
	      default: begin
	        key_out     <= #`DEL key_out;
	        key_pressed <= #`DEL 1'd0;
	      end 
	    endcase
	  end
	end      
	
endmodule    //key

