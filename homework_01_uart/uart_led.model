<!DOCTYPE Robei>
<Module File="Current/uart_led.model" Height="600" Width="900" Color="#d3d3d3" Parent="0" Name="uart_led" X="0" Type="module" Class="module" Y="0" Comment="" Parameters="" Code="&#xa;" Include="">
 <Module File="Current/uart.model" Height="236" Width="256" Color="#d3d3d3" Parent="uart_led" Name="uart1" X="122.082" Type="model" Class="uart" Y="297.157" Comment="" Parameters="" Code="`define DEL 1&#xa;&#xa;//&#xa;// This block is used to receive data&#xa;//&#xa;reg         rx_q;&#xa;wire        rx_start;&#xa;reg  [7:0]  rx_cnt;&#xa;reg         rx_cnt_en;&#xa;&#xa;// &#xa;// Edge deteted&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    rx_q &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    rx_q &lt;= #`DEL rx;&#xa;  end&#xa;end      &#xa;// Falling edge effective&#xa;assign rx_start = ( rx_q &amp;&amp; ~rx );&#xa;&#xa;//&#xa;// Generate the count enable signal &#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    rx_cnt_en &lt;= #`DEL 1'b0;&#xa;  end&#xa;  //&#xa;  // Count enable&#xa;  else if( rx_start ) begin&#xa;    rx_cnt_en &lt;= #`DEL 1'b1;&#xa;  end&#xa;  //&#xa;  // Count disable&#xa;  else if( rx_cnt == 8'd168 ) begin&#xa;    rx_cnt_en &lt;= #`DEL 1'b0;&#xa;  end&#xa;end     &#xa;&#xa;//&#xa;// Frequence division&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if ( ~rst_n ) begin&#xa;    rx_cnt &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else if ( rx_cnt_en ) begin&#xa;    rx_cnt &lt;= #`DEL rx_cnt + 8'b1;&#xa;  end&#xa;  else begin&#xa;    rx_cnt &lt;= #`DEL 8'b0;&#xa;  end&#xa;end&#xa;&#xa;//&#xa;// FSM&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    data_received &lt;= #`DEL 9'b0;&#xa;    rx_buf_full   &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else if( rx_cnt_en ) begin&#xa;    case( rx_cnt ) &#xa;      8'd24: begin&#xa;        data_received[0] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end  // Least significant bit&#xa;      8'd40: begin&#xa;        data_received[1] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd56: begin&#xa;        data_received[2] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd72: begin&#xa;        data_received[3] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd88: begin&#xa;        data_received[4] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd104: begin&#xa;        data_received[5] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd120: begin&#xa;        data_received[6] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd136: begin&#xa;        data_received[7] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end  // Most significant bit&#xa;      8'd152: begin&#xa;        data_received[8] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end  // Parity check&#xa;      8'd168: begin&#xa;        rx_buf_full      &lt;= #`DEL 1'b1;&#xa;      end  // Stop bit&#xa;    endcase&#xa;  end// Least significant bit&#xa;end      &#xa;&#xa;//&#xa;// This block is used to transmit data&#xa;//&#xa;reg         tx_en_q;&#xa;wire        tx_start;&#xa;reg  [7:0]  tx_cnt;&#xa;reg         tx_cnt_en;&#xa;reg  [8:0]  shift_reg;&#xa;&#xa;// &#xa;// Edge deteted&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    tx_en_q &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    tx_en_q &lt;= #`DEL tx_en;&#xa;  end&#xa;end      &#xa;// Rising edge effective&#xa;assign tx_start = ( ~tx_en_q &amp;&amp; tx_en );&#xa;&#xa;//&#xa;// Transmit data_send to shift_reg&#xa;//&#xa;always @( posedge tx_start or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    shift_reg &lt;= #`DEL 9'd0;&#xa;  end&#xa;  else begin&#xa;    shift_reg[7:0] &lt;= #`DEL data_send;&#xa;    //&#xa;    // Parity check bit, even parity&#xa;    shift_reg[8]   &lt;= #`DEL ( ^data_send ) ? 1 : 0;   &#xa;  end&#xa;end      &#xa;&#xa;//&#xa;// Generate the count enable signal &#xa;// Generate the tx_buf_full signal which means shift_reg is not empty&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    tx_cnt_en   &lt;= #`DEL 1'b0;&#xa;    tx_buf_full &lt;= #`DEL 1'b0;&#xa;  end&#xa;  //&#xa;  // Count enable&#xa;  else if( tx_start ) begin&#xa;    tx_cnt_en   &lt;= #`DEL 1'b1;&#xa;    tx_buf_full &lt;= #`DEL 1'b1;&#xa;  end&#xa;  //&#xa;  // Count disable&#xa;  else if( tx_cnt == 8'd176 ) begin&#xa;    tx_cnt_en   &lt;= #`DEL 1'b0;&#xa;    tx_buf_full &lt;= #`DEL 1'b0;&#xa;  end&#xa;end     &#xa;&#xa;//&#xa;// Frequence division&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if ( ~rst_n ) begin&#xa;    tx_cnt &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else if ( tx_cnt_en ) begin&#xa;    tx_cnt &lt;= #`DEL tx_cnt + 8'b1;&#xa;  end&#xa;  else begin&#xa;    tx_cnt &lt;= #`DEL 8'b0;&#xa;  end&#xa;end&#xa;&#xa;//&#xa;// FSM&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    tx &lt;= #`DEL 1'b1;&#xa;  end&#xa;  else if( tx_cnt_en ) begin&#xa;    case( tx_cnt ) &#xa;      8'd0: begin&#xa;        tx &lt;= #`DEL 1'b0;&#xa;      end  // Start signal&#xa;      8'd16: begin&#xa;        tx &lt;= #`DEL shift_reg[0];&#xa;      end  // Least significant bit&#xa;      8'd32: begin&#xa;        tx &lt;= #`DEL shift_reg[1];&#xa;      end&#xa;      8'd48: begin&#xa;        tx &lt;= #`DEL shift_reg[2];&#xa;      end&#xa;      8'd64: begin&#xa;        tx &lt;= #`DEL shift_reg[3];&#xa;      end&#xa;      8'd80: begin&#xa;        tx &lt;= #`DEL shift_reg[4];&#xa;      end&#xa;      8'd96: begin&#xa;        tx &lt;= #`DEL shift_reg[5];&#xa;      end&#xa;      8'd112: begin&#xa;        tx &lt;= #`DEL shift_reg[6];&#xa;      end  &#xa;      8'd128: begin&#xa;        tx &lt;= #`DEL shift_reg[7];&#xa;      end  // Most significant bit&#xa;      8'd144: begin&#xa;        tx &lt;= #`DEL shift_reg[8];&#xa;      end  // Parity check      &#xa;      8'd160: begin&#xa;        tx &lt;= #`DEL 1'b1;&#xa;      end  // Stop bit&#xa;    endcase&#xa;  end&#xa;end      &#xa;" Include="">
  <Port Height="20" Function="" Width="20" Color="#00ffff" Parent="uart1" Name="clk" X="-0.078125" Side="left" Y="0.288136" Connect="" Inout="input" Datatype="wire" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#7fffd4" Parent="uart1" Name="rst_n" X="-0.078125" Side="left" Y="0.394068" Connect="" Inout="input" Datatype="wire" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#0000ff" Parent="uart1" Name="rx" X="-0.078125" Side="left" Y="0.508475" Connect="" Inout="input" Datatype="wire" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#8a2be2" Parent="uart1" Name="tx_en" X="-0.078125" Side="left" Y="0.614407" Connect="" Inout="input" Datatype="wire" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#a52a2a" Parent="uart1" Name="data_send" X="-0.078125" Side="left" Y="0.728814" Connect="" Inout="input" Datatype="wire" Datasize="8"/>
  <Port Height="20" Function="" Width="20" Color="#5f9ea0" Parent="uart1" Name="tx_buf_full" X="-0.078125" Side="left" Y="0.0635593" Connect="" Inout="output" Datatype="reg" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#b8860b" Parent="uart1" Name="rx_buf_full" X="0.921875" Side="right" Y="0.20339" Connect="" Inout="output" Datatype="reg" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#7fff00" Parent="uart1" Name="tx" X="-0.078125" Side="left" Y="0.173729" Connect="" Inout="output" Datatype="reg" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#ff8c00" Parent="uart1" Name="data_received" X="0.921875" Side="right" Y="0.45339" Connect="" Inout="output" Datatype="reg" Datasize="9"/>
 </Module>
 <Module File="Current/led.model" Height="223" Width="216" Color="#d3d3d3" Parent="uart_led" Name="led2" X="502.076" Type="model" Class="led" Y="130.332" Comment="" Parameters="" Code="`define DEL 1&#xa;//&#xa;// LED display start signal&#xa;//&#xa;reg  display_en_q;&#xa;wire display_start;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    display_en_q &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    display_en_q &lt;= #`DEL display_en;&#xa;  end&#xa;end      &#xa;// Rising edge effective&#xa;assign display_start = ~display_en_q &amp;&amp; display_en;&#xa;&#xa;//&#xa;// Parity check&#xa;//&#xa;always @( posedge clk ) begin&#xa;  if( data_in[8] != ( ^data_in[7:0] ) ) begin&#xa;    $display(&quot;Parity check failed.&quot;);&#xa;    $stop;&#xa;  end&#xa;end  &#xa;&#xa;" Include="">
  <Port Height="20" Function="" Width="20" Color="#0000ff" Parent="led2" Name="clk" X="-0.0925926" Side="left" Y="0.116592" Connect="" Inout="input" Datatype="wire" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#00ffff" Parent="led2" Name="rst_n" X="-0.0925926" Side="left" Y="0.286996" Connect="" Inout="input" Datatype="wire" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#8a2be2" Parent="led2" Name="data_in" X="-0.0925926" Side="left" Y="0.61435" Connect="" Inout="input" Datatype="wire" Datasize="9"/>
  <Port Height="20" Function="" Width="20" Color="#a52a2a" Parent="led2" Name="display_en" X="-0.0925926" Side="left" Y="0.452915" Connect="" Inout="input" Datatype="wire" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#9932cc" Parent="led2" Name="led_done" X="0.907407" Side="right" Y="0.116592" Connect="" Inout="output" Datatype="wire" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#00bfff" Parent="led2" Name="led0_out" X="0.907407" Side="right" Y="0.61435" Connect="" Inout="output" Datatype="wire" Datasize="4"/>
  <Port Height="20" Function="" Width="20" Color="#006400" Parent="led2" Name="led1_out" X="0.907407" Side="right" Y="0.452915" Connect="" Inout="output" Datatype="wire" Datasize="4"/>
  <Port Height="20" Function="" Width="20" Color="#b8860b" Parent="led2" Name="led2_out" X="0.907407" Side="right" Y="0.286996" Connect="" Inout="output" Datatype="wire" Datasize="4"/>
 </Module>
 <Port Height="20" Function="" Width="20" Color="#0000ff" Parent="uart_led" Name="clk" X="-0.0222222" Side="left" Y="0.181667" Inout="input" Datatype="wire" Datasize="1"/>
 <Port Height="20" Function="" Width="20" Color="#00ffff" Parent="uart_led" Name="rst_n" X="-0.0222222" Side="left" Y="0.381667" Inout="input" Datatype="wire" Datasize="1"/>
 <Port Height="20" Function="" Width="20" Color="#7fffd4" Parent="uart_led" Name="rx" X="-0.0222222" Side="left" Y="0.581667" Inout="input" Datatype="wire" Datasize="1"/>
 <Port Height="20" Function="" Width="20" Color="#a52a2a" Parent="uart_led" Name="u_led_valid" X="0.977778" Side="right" Y="0.15" Inout="output" Datatype="wire" Datasize="1"/>
 <Port Height="20" Function="" Width="20" Color="#8a2be2" Parent="uart_led" Name="u_led0" X="0.977778" Side="right" Y="0.65" Inout="output" Datatype="wire" Datasize="4"/>
 <Port Height="20" Function="" Width="20" Color="#ff7f50" Parent="uart_led" Name="u_led1" X="0.977778" Side="right" Y="0.481667" Inout="output" Datatype="wire" Datasize="4"/>
 <Port Height="20" Function="" Width="20" Color="#b8860b" Parent="uart_led" Name="u_led2" X="0.977778" Side="right" Y="0.316667" Inout="output" Datatype="wire" Datasize="4"/>
 <Wire From="uart_led>clk" Parent="uart_led" Name="uart_led_clk" To="uart_led#uart1>clk" Datatype="wire" Datasize="1"/>
 <Wire From="uart_led>rst_n" Parent="uart_led" Name="uart_led_rst_n" To="uart_led#uart1>rst_n" Datatype="wire" Datasize="1"/>
 <Wire From="uart_led>clk" Parent="uart_led" Name="uart_led_clk" To="uart_led#led2>clk" Datatype="wire" Datasize="1"/>
 <Wire From="uart_led>rst_n" Parent="uart_led" Name="uart_led_rst_n" To="uart_led#led2>rst_n" Datatype="wire" Datasize="1"/>
 <Wire From="uart_led>rx" Parent="uart_led" Name="uart_led_rx" To="uart_led#uart1>rx" Datatype="wire" Datasize="1"/>
 <Wire From="uart_led#uart1>rx_buf_full" Parent="uart_led" Name="uart1_rx_buf_full" To="uart_led#led2>display_en" Datatype="wire" Datasize="1"/>
 <Wire From="uart_led#uart1>data_received" Parent="uart_led" Name="uart1_data_received" To="uart_led#led2>data_in" Datatype="wire" Datasize="9"/>
 <Wire From="uart_led#led2>led_done" Parent="uart_led" Name="led2_led_done" To="uart_led>u_led_valid" Datatype="wire" Datasize="1"/>
 <Wire From="uart_led#led2>led0_out" Parent="uart_led" Name="led2_led0_out" To="uart_led>u_led0" Datatype="wire" Datasize="4"/>
 <Wire From="uart_led#led2>led1_out" Parent="uart_led" Name="led2_led1_out" To="uart_led>u_led1" Datatype="wire" Datasize="4"/>
 <Wire From="uart_led#led2>led2_out" Parent="uart_led" Name="led2_led2_out" To="uart_led>u_led2" Datatype="wire" Datasize="4"/>
</Module>
