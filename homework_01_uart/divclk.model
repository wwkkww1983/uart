<!DOCTYPE Robei>
<Module Width="900" Comment="" Color="#d3d3d3" Y="0" Type="module" Class="module" Name="divclk" Parameters="" Parent="0" Height="600" File="Current/divclk.model" Code="&#xa;&#xa;&#xa;" X="0" Include="">
 <Module Width="160" Comment="" Color="#d3d3d3" Y="57.397" Type="model" Class="generate_clk" Name="generate_clk1" Parameters="" Parent="divclk" Height="160" File="Current/generate_clk.model" Code="&#x9;`define DEL 1&#xa;&#x9;&#xa;  //&#xa;&#x9;// Division is 78, which duty is 50% and frequency is 153846Hz&#xa;  // 153846 = 16 * 9600&#xa;&#x9;//&#xa;  reg [6:0] cnt;&#xa;&#xa;  always @( posedge clk or negedge rst_n ) begin&#xa;    if( ~rst_n ) begin&#xa;      cnt     &lt;= #`DEL 7'd0;&#xa;      clk_out &lt;= #`DEL 1'b0;&#xa;    end&#xa;    else if( cnt == 7'd38 ) begin&#xa;      cnt     &lt;= #`DEL cnt + 7'd1;&#xa;      clk_out &lt;= #`DEL 1'b1;&#xa;    end&#xa;    else if( cnt == 7'd77 ) begin&#xa;      cnt     &lt;= #`DEL 7'd0;&#xa;      clk_out &lt;= #`DEL 1'b0;&#xa;    end&#xa;    else begin&#xa;      cnt     &lt;= #`DEL cnt + 7'd1;&#xa;    end&#xa;  end  &#xa;" X="180.956" Include="">
  <Port Width="20" Datasize="1" Side="left" Function="" Color="#0000ff" Y="0.1875" Connect="" Name="clk" Parent="generate_clk1" Height="20" Inout="input" Datatype="wire" X="-0.125"/>
  <Port Width="20" Datasize="1" Side="left" Function="" Color="#00ffff" Y="0.4375" Connect="" Name="rst_n" Parent="generate_clk1" Height="20" Inout="input" Datatype="wire" X="-0.125"/>
  <Port Width="20" Datasize="1" Side="right" Function="" Color="#dc143c" Y="0.26875" Connect="" Name="clk_out" Parent="generate_clk1" Height="20" Inout="output" Datatype="reg" X="0.875"/>
 </Module>
 <Module Width="160" Comment="" Color="#d3d3d3" Y="226.425" Type="model" Class="key" Name="key1" Parameters="" Parent="divclk" Height="160" File="Current/key.model" Code="&#x9;`define DEL 1&#xa;&#x9;&#xa;&#x9;//&#xa;&#x9;// Key signal detected&#xa;&#x9;//&#xa;&#x9;reg    [3:0] key_in_q;&#xa;&#x9;wire   [3:0] key_flag;&#xa;&#x9;&#xa;&#x9;always @( posedge clk or negedge rst_n ) begin&#xa;&#x9;  if( ~rst_n ) begin&#xa;&#x9;    key_in_q &lt;= #`DEL 4'b1111;&#xa;&#x9;  end&#xa;&#x9;  else begin&#xa;&#x9;    key_in_q &lt;= #`DEL key_in;&#xa;&#x9;  end&#xa;&#x9;end      &#xa;&#x9;assign key_flag = key_in_q &amp; ( ~key_in );&#xa;&#x9;&#xa;&#x9;//&#xa;&#x9;// Delay 20ms&#xa;&#x9;//&#xa;  reg   [ 11:0] cnt;&#xa;&#x9;reg   [  3:0] key_flag_delay;  // Detect key's status after delay 20ms&#xa;&#x9;&#xa;&#x9;always @( posedge clk or negedge rst_n ) begin&#xa;&#x9;  if( ~rst_n ) begin&#xa;&#x9;    cnt            &lt;= #`DEL 12'd0;&#xa;&#x9;    key_flag_delay &lt;= #`DEL  4'b1111;&#xa;&#x9;  end&#xa;&#x9;  else if( cnt == 12'd 3075 ) begin&#xa;&#x9;    cnt            &lt;= #`DEL cnt + 12'd1;&#xa;&#x9;    key_flag_delay &lt;= #`DEL key_flag;&#xa;&#x9;  end&#xa;&#x9;  else if( cnt == 12'd 3076 ) begin&#xa;&#x9;    cnt            &lt;= #`DEL 12'd0;&#xa;&#x9;    key_flag_delay &lt;= #`DEL key_flag_delay;&#xa;&#x9;  end // 20ms&#xa;&#x9;  else begin&#xa;&#x9;    cnt            &lt;= #`DEL cnt + 12'd1;&#xa;&#x9;    key_flag_delay &lt;= #`DEL 4'b1111;&#xa;&#x9;  end&#xa;&#x9;end&#xa;&#x9;&#xa;&#x9;//&#xa;&#x9;// If key has been pressed, output&#xa;&#x9;//&#xa;&#x9;always @( posedge clk or negedge rst_n ) begin&#xa;&#x9;  if( ~rst_n ) begin&#xa;&#x9;    key_out     &lt;= #`DEL 8'd0;&#xa;&#x9;    key_pressed &lt;= #`DEL 1'd0;&#xa;&#x9;  end&#xa;&#x9;  else begin&#xa;&#x9;    case( key_flag_delay ) &#xa;&#x9;      4'b0000: begin&#xa;&#x9;        key_out     &lt;= #`DEL 8'd0;&#xa;&#x9;        key_pressed &lt;= #`DEL 1'd0;&#xa;&#x9;      end // No key pressed&#xa;&#x9;      4'b0001: begin&#xa;&#x9;        key_out     &lt;= #`DEL 8'd1;&#xa;&#x9;        key_pressed &lt;= #`DEL 1'd1;&#xa;&#x9;      end // The first key's value is 1&#xa;&#x9;      4'b0010: begin&#xa;&#x9;        key_out     &lt;= #`DEL 8'd2;&#xa;&#x9;        key_pressed &lt;= #`DEL 1'd1;&#xa;&#x9;      end // The second key's value is 2&#xa;&#x9;      4'b0100: begin&#xa;&#x9;        key_out     &lt;= #`DEL 8'd3;&#xa;&#x9;        key_pressed &lt;= #`DEL 1'd1;&#xa;&#x9;      end // The third key's value is 3&#xa;&#x9;      4'b1000: begin&#xa;&#x9;        key_out     &lt;= #`DEL 8'd4;&#xa;&#x9;        key_pressed &lt;= #`DEL 1'd1;&#xa;&#x9;      end // The third key's value is 4&#xa;&#x9;      default: begin&#xa;&#x9;        key_out     &lt;= #`DEL key_out;&#xa;&#x9;        key_pressed &lt;= #`DEL 1'd0;&#xa;&#x9;      end &#xa;&#x9;    endcase&#xa;&#x9;  end&#xa;&#x9;end     &#xa;" X="437.957" Include="">
  <Port Width="20" Datasize="1" Side="left" Function="" Color="#0000ff" Y="0.1375" Connect="" Name="clk" Parent="key1" Height="20" Inout="input" Datatype="wire" X="-0.125"/>
  <Port Width="20" Datasize="1" Side="left" Function="" Color="#00ffff" Y="0.3375" Connect="" Name="rst_n" Parent="key1" Height="20" Inout="input" Datatype="wire" X="-0.125"/>
  <Port Width="20" Datasize="4" Side="left" Function="" Color="#8a2be2" Y="0.5375" Connect="" Name="key_in" Parent="key1" Height="20" Inout="input" Datatype="wire" X="-0.125"/>
  <Port Width="20" Datasize="8" Side="right" Function="" Color="#a52a2a" Y="0.1875" Connect="" Name="key_out" Parent="key1" Height="20" Inout="output" Datatype="reg" X="0.875"/>
  <Port Width="20" Datasize="1" Side="right" Function="" Color="#ff7f50" Y="0.4375" Connect="" Name="key_pressed" Parent="key1" Height="20" Inout="output" Datatype="reg" X="0.875"/>
 </Module>
 <Port Width="20" Datasize="1" Side="left" Function="" Color="#faebd7" Y="0.181667" Name="clk" Parent="divclk" Height="20" Inout="input" Datatype="wire" X="-0.0222222"/>
 <Port Width="20" Datasize="1" Side="left" Function="" Color="#00ffff" Y="0.381667" Name="rst_n" Parent="divclk" Height="20" Inout="input" Datatype="wire" X="-0.0222222"/>
 <Port Width="20" Datasize="4" Side="left" Function="" Color="#7fffd4" Y="0.581667" Name="key_in" Parent="divclk" Height="20" Inout="input" Datatype="wire" X="-0.0222222"/>
 <Port Width="20" Datasize="8" Side="right" Function="" Color="#f0ffff" Y="0.231667" Name="key_out" Parent="divclk" Height="20" Inout="output" Datatype="wire" X="0.977778"/>
 <Port Width="20" Datasize="1" Side="right" Function="" Color="#f5f5dc" Y="0.481667" Name="key_pressed" Parent="divclk" Height="20" Inout="output" Datatype="wire" X="0.977778"/>
 <Wire Datasize="1" Name="divclk_clk" Parent="divclk" From="divclk>clk" Datatype="wire" To="divclk#generate_clk1>clk"/>
 <Wire Datasize="1" Name="divclk_rst_n" Parent="divclk" From="divclk>rst_n" Datatype="wire" To="divclk#generate_clk1>rst_n"/>
 <Wire Datasize="1" Name="generate_clk1_clk_out" Parent="divclk" From="divclk#generate_clk1>clk_out" Datatype="wire" To="divclk#key1>clk"/>
 <Wire Datasize="1" Name="divclk_rst_n" Parent="divclk" From="divclk>rst_n" Datatype="wire" To="divclk#key1>rst_n"/>
 <Wire Datasize="4" Name="divclk_key_in" Parent="divclk" From="divclk>key_in" Datatype="wire" To="divclk#key1>key_in"/>
 <Wire Datasize="8" Name="key1_key_out" Parent="divclk" From="divclk#key1>key_out" Datatype="wire" To="divclk>key_out"/>
 <Wire Datasize="1" Name="key1_key_pressed" Parent="divclk" From="divclk#key1>key_pressed" Datatype="wire" To="divclk>key_pressed"/>
</Module>
