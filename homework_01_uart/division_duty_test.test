<!DOCTYPE Robei>
<Module Width="900" Height="600" X="0" File="Current/division_duty_test.test" Parent="0" Name="division_duty_test" Class="module" Color="#d3d3d3" Y="0" Time_Scale="" Code="initial begin&#xa;  clk = 0;&#xa;end&#xa;always #10 clk = ~clk;&#xa;&#xa;initial begin&#xa;  rst_n = 1;&#xa;  repeat(1) @( posedge clk ) #1;&#xa;  rst_n = 0;&#xa;  repeat(1) @( posedge clk ) #1;&#xa;  rst_n = 1;&#xa;end&#xa;&#xa;initial begin&#xa;  data_in = 9'd0;&#xa;  data_en = 1'd0;&#xa;  repeat( 4 ) @( posedge clk ) #1;&#xa;&#xa;  // Division is 2&#xa;  data_en = 1;&#xa;  repeat( 1 ) @( posedge clk ) #1;&#xa;  data_en = 0;&#xa;  data_in = 9'b1_0000_0010;  // 2 frequency division&#xa;  repeat( 160 ) @( posedge clk ) #1; // After the 160th clk, there should be the second data&#xa;  // Duty_num is 0&#xa;  data_en = 1;&#xa;  repeat( 1 ) @( posedge clk ) #1;&#xa;  data_en = 0;&#xa;  data_in = 0;  // Stipulate that if duty_num is 0, then the duty is 50%&#xa;  repeat( 50 ) @( posedge clk ) #1;&#xa;&#xa;  // Division is 20&#xa;  data_en = 1;&#xa;  repeat( 1 ) @( posedge clk ) #1;&#xa;  data_en = 0;&#xa;  data_in = 9'b0_0001_0100;  // 20&#xa;  repeat( 160 ) @( posedge clk ) #1; &#xa;  // Duty_num is 10&#xa;  data_en = 1;&#xa;  repeat( 1 ) @( posedge clk ) #1;&#xa;  data_en = 0;&#xa;  data_in = 9'b0_0000_1010;&#xa;  repeat( 80 ) @( posedge clk ) #1;&#xa;&#xa;  // Division is 150&#xa;  data_en = 1;&#xa;  repeat( 1 ) @( posedge clk ) #1;&#xa;  data_en = 0;&#xa;  data_in = 9'b0_1001_0110; // 150&#xa;  repeat( 160 ) @( posedge clk ) #1;&#xa;  // Duty_num is 0&#xa;  data_en = 1;&#xa;  repeat( 1 ) @( posedge clk ) #1;&#xa;  data_en = 0;&#xa;  data_in = 9'd0; &#xa;  repeat( 500 ) @( posedge clk ) #1;&#xa;&#xa;  // Division is 55&#xa;  data_en = 1;&#xa;  repeat( 1 ) @( posedge clk ) #1;&#xa;  data_en = 0;&#xa;  data_in = 9'b1_0011_0111; // 55&#xa;  repeat( 160 ) @( posedge clk ) #1;&#xa;  // Duty_num is 0&#xa;  data_en = 1;&#xa;  repeat( 1 ) @( posedge clk ) #1;&#xa;  data_en = 0;&#xa;  data_in = 9'd0;&#xa;  repeat( 200 ) @( posedge clk ) #1;&#xa;&#xa;  // Division is 20&#xa;  data_en = 1;&#xa;  repeat( 1 ) @( posedge clk ) #1;&#xa;  data_en = 0;&#xa;  data_in = 9'b0_0001_0100; // 20&#xa;  repeat( 160 ) @( posedge clk ) #1;&#xa;  // Duty_num is 8 and division is 20, which means that duty is 40% &#xa;  data_en = 1;&#xa;  repeat( 1 ) @( posedge clk ) #1;&#xa;  data_en = 0;&#xa;  data_in = 9'b1_0000_1000; // 8&#xa;  repeat( 50 ) @( posedge clk ) #1;&#xa;&#xa;  // Division is 20&#xa;  data_en = 1;&#xa;  repeat( 1 ) @( posedge clk ) #1;&#xa;  data_en = 0;&#xa;  data_in = 9'b0_0001_0100; // 20&#xa;  repeat( 160 ) @( posedge clk ) #1;&#xa;  // Duty_num is 16 and division is 20, which means that duty is 80% &#xa;  data_en = 1;&#xa;  repeat( 1 ) @( posedge clk ) #1;&#xa;  data_en = 0;&#xa;  data_in = 9'b1_0001_0000; // 16&#xa;  repeat( 50 ) @( posedge clk ) #1;&#xa;&#xa;  // Division is 56&#xa;  data_en = 1;&#xa;  repeat( 1 ) @( posedge clk ) #1;&#xa;  data_en = 0;&#xa;  data_in = 9'b1_0011_1000; // 56&#xa;  repeat( 160 ) @( posedge clk ) #1;&#xa;  // Duty_num is 22 and division is 56, which means that duty is 40% &#xa;  data_en = 1;&#xa;  repeat( 1 ) @( posedge clk ) #1;&#xa;  data_en = 0;&#xa;  data_in = 9'b1_0001_0110; // 22&#xa;  repeat( 200 ) @( posedge clk ) #1;&#xa;  &#xa;  // Division is 56&#xa;  data_en = 1;&#xa;  repeat( 1 ) @( posedge clk ) #1;&#xa;  data_en = 0;&#xa;  data_in = 9'b1_0011_1000; // 56&#xa;  repeat( 160 ) @( posedge clk ) #1;&#xa;  // Duty_num is 45 and division is 56, which means that duty is 80% &#xa;  data_en = 1;&#xa;  repeat( 1 ) @( posedge clk ) #1;&#xa;  data_en = 0;&#xa;  data_in = 9'b0_0010_1101; // 45&#xa;  repeat( 500 ) @( posedge clk ) #1;&#xa;  $finish;&#xa;end&#xa;" Type="testbench" Comment="" Include="">
 <Module Width="160" Height="160" X="308.18" File="Current/division_duty.model" Parent="division_duty_test" Name="division_duty1" Class="division_duty" Color="#d3d3d3" Y="214.868" Code="`define DEL 1&#xa;&#xa;//&#xa;// There should be two datas to control frequency division and duty seperately&#xa;// The first data is to control the division, while the second control the duty&#xa;//&#xa;reg [7:0] division;&#xa;reg [7:0] duty_num;&#xa;&#xa;//&#xa;// Detect the rising edge of data_en&#xa;reg     data_en_q;&#xa;wire    data_en_flag;&#xa;reg     cnt_div_duty;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    data_en_q &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    data_en_q &lt;= #`DEL data_en;&#xa;  end&#xa;end&#xa;assign data_en_flag = data_en_q &amp;&amp; ( ~data_en );&#xa;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    division     &lt;= #`DEL 8'd0;&#xa;    duty_num     &lt;= #`DEL 8'd0;&#xa;    cnt_div_duty &lt;= #`DEL 1'd0;&#xa;  end&#xa;  else if( data_en_flag ) begin&#xa;    case( cnt_div_duty )&#xa;      0:begin&#xa;        division     &lt;= #`DEL data_in[7:0];&#xa;        duty_num     &lt;= #`DEL duty_num;&#xa;        cnt_div_duty &lt;= #`DEL cnt_div_duty + 1'b1;&#xa;      end&#xa;      1:begin&#xa;        division     &lt;= #`DEL division;&#xa;        duty_num     &lt;= #`DEL data_in[7:0];&#xa;        cnt_div_duty &lt;= #`DEL cnt_div_duty + 1'b1;&#xa;      end&#xa;    endcase&#xa;  end&#xa;end &#xa;&#xa;//&#xa;// Parity check&#xa;//&#xa;always @( posedge clk ) begin&#xa;  if( data_in[8] != ^data_in[7:0] ) begin&#xa;    $display(&quot;Uart communication error!&quot;);&#xa;    $stop;&#xa;  end&#xa;end      &#xa;&#xa;&#xa;//&#xa;// Even division, which duty is 50%&#xa;//&#xa;reg           clk_even;&#xa;wire          clk_out_div;&#xa;reg     [7:0] cnt_even;&#xa;wire    [7:0] division_even;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    cnt_even &lt;= #`DEL 8'd0;&#xa;    clk_even &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else if( division[0]==1 ) begin&#xa;    cnt_even &lt;= #`DEL 8'd0;&#xa;    clk_even &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    if( division[7:0] == 8'd0 ) begin    &#xa;      cnt_even &lt;= #`DEL 8'd0;&#xa;    end&#xa;    else if( cnt_even == ( division_even - 1 ) ) begin&#xa;      cnt_even &lt;= #`DEL 8'd0;&#xa;      clk_even &lt;= #`DEL ~clk_even;&#xa;    end&#xa;    else begin&#xa;      cnt_even &lt;= #`DEL cnt_even + 8'd1;&#xa;      clk_even &lt;= #`DEL clk_even;&#xa;    end&#xa;  end&#xa;end     &#xa;&#xa;assign division_even = ( division[0] == 0 ) ? ( division[7:0] >> 1 ) : 0;&#xa;&#xa;//&#xa;// Odd division, which duty is 50%&#xa;//&#xa;reg         clk_p;&#xa;reg         clk_n;&#xa;wire        clk_odd;&#xa;reg   [7:0] cnt_p;&#xa;reg   [7:0] cnt_n;&#xa;wire  [7:0] division_odd;&#xa;&#xa;//&#xa;// Rising edge&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    clk_p &lt;= #`DEL 1'b0;&#xa;    cnt_p &lt;= #`DEL 8'b0;&#xa;  end&#xa;  else if( division[0]==0 ) begin    &#xa;    clk_p &lt;= #`DEL 1'b0;&#xa;    cnt_p &lt;= #`DEL 8'b0;&#xa;  end&#xa;  else begin&#xa;    if( cnt_p == division_odd - 1 ) begin&#xa;      clk_p &lt;= #`DEL ~clk_p;&#xa;      cnt_p &lt;= #`DEL 8'b0;&#xa;    end&#xa;    else if( cnt_p == ( ( division[7:0] - 1 ) >> 1 ) )begin&#xa;      clk_p &lt;= #`DEL ~clk_p;&#xa;      cnt_p &lt;= #`DEL cnt_p + 8'b1;&#xa;    end&#xa;    else begin&#xa;      clk_p &lt;= #`DEL clk_p;&#xa;      cnt_p &lt;= #`DEL cnt_p + 8'b1;&#xa;    end&#xa;  end&#xa;end      &#xa;&#xa;//&#xa;// Falling edge&#xa;always @( negedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    clk_n &lt;= #`DEL 1'b0;&#xa;    cnt_n &lt;= #`DEL 8'b0;&#xa;  end&#xa;  else if( division[0]==0 ) begin    &#xa;    clk_n &lt;= #`DEL 1'b0;&#xa;    cnt_n &lt;= #`DEL 8'b0;&#xa;  end&#xa;  else begin&#xa;    if( cnt_n == division_odd - 1 ) begin&#xa;      clk_n &lt;= #`DEL ~clk_n;&#xa;      cnt_n &lt;= #`DEL 8'b0;&#xa;    end&#xa;    else if( cnt_n == ( ( division[7:0] - 1 ) >> 1 ) )begin&#xa;      clk_n &lt;= #`DEL ~clk_n;&#xa;      cnt_n &lt;= #`DEL cnt_n + 8'b1;&#xa;    end&#xa;    else begin&#xa;      clk_n &lt;= #`DEL clk_n;&#xa;      cnt_n &lt;= #`DEL cnt_n + 8'b1;&#xa;    end&#xa;  end&#xa;end     &#xa;&#xa;&#xa;assign division_odd = ( division[0] == 1 ) ? division[7:0] : 0;&#xa;assign clk_odd = clk_n | clk_p;&#xa;&#xa;assign clk_out_div = ( division[0] == 1 ) ? clk_odd : clk_even;&#xa;&#xa;//&#xa;// Duty&#xa;//&#xa;reg [7:0] cnt_duty; // Used in duty generate&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    cnt_duty &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else if( ( duty_num == (division[7:0]>>1) ) || cnt_duty_flag ) begin&#xa;    // If duty is half of division[7:0] that means duty is 50%,&#xa;    // use clk_div as clk_out&#xa;    // If cnt_duty_flag is 1, then count begin from 0&#xa;    cnt_duty &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else if( cnt_duty == division[7:0] )begin&#xa;    cnt_duty &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else begin&#xa;    cnt_duty &lt;= #`DEL cnt_duty + 8'd1;&#xa;  end&#xa;end      &#xa;&#xa;//&#xa;// Attention: duty_num is an input signal, which is equal to duty(%) * division&#xa;reg clk_out_duty;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    clk_out_duty &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else if( duty_num == (division[7:0]>>1) || cnt_duty_flag ) begin&#xa;    clk_out_duty &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else if( cnt_duty &lt; duty_num )begin&#xa;    clk_out_duty &lt;= #`DEL 1'b1;&#xa;  end&#xa;  else begin&#xa;    clk_out_duty &lt;= #`DEL 1'b0;&#xa;  end&#xa;end      &#xa;&#xa;// While duty_num is half of division which means duty is 50%, clk_out is generated by the first method that is more accurate than the second method&#xa;// While duty is not 50%,clk_out is generated by the 2nd way which duty is variable&#xa;assign clk_out = ( duty_num == (division[7:0]>>1) || duty_num == 0 ) ? clk_out_div : clk_out_duty;&#xa;&#xa;//&#xa;// Detect the change of duty_num and division&#xa;//&#xa;reg [7:0]  duty_num_temp;&#xa;reg [7:0]  division_temp;&#xa;reg        duty_num_flag;&#xa;reg        division_flag;&#xa;reg        cnt_duty_flag;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    duty_num_temp &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else begin&#xa;    duty_num_temp &lt;= #`DEL duty_num;&#xa;  end&#xa;end      &#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    division_temp &lt;= #`DEL 9'd0;&#xa;  end&#xa;  else begin&#xa;    division_temp &lt;= #`DEL division;&#xa;  end&#xa;end &#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    duty_num_flag &lt;= #`DEL 1'd0;&#xa;    division_flag &lt;= #`DEL 1'd0;&#xa;  end&#xa;  else if( duty_num_temp != duty_num )begin&#xa;    duty_num_flag &lt;= #`DEL 1'd1;&#xa;  end&#xa;  else if( division_temp != division )begin&#xa;    division_flag &lt;= #`DEL 1'd1;&#xa;  end&#xa;  else begin &#xa;    duty_num_flag &lt;= #`DEL 1'd0;&#xa;    division_flag &lt;= #`DEL 1'd0;&#xa;  end&#xa;end      &#xa;&#xa;//&#xa;// Generate the start counting signal of cnt_duty. If cnt_duty_flag is 1, which means division or duty_num has changed, then cnt_duty start count from 0 again&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    cnt_duty_flag &lt;= #`DEL 1'd0;&#xa;  end&#xa;  else if( duty_num_flag | division_flag )begin&#xa;    cnt_duty_flag &lt;= #`DEL 1'd1;&#xa;  end&#xa;  else begin&#xa;    cnt_duty_flag &lt;= #`DEL 1'd0;&#xa;  end&#xa;end " Parameters="" Type="model" Comment="" Include="">
  <Port Width="20" Height="20" X="-0.125" Parent="division_duty1" Name="clk" Inout="input" Datatype="wire" Datasize="1" Color="#0000ff" Y="0.2125" Function="" Connect="" Side="left"/>
  <Port Width="20" Height="20" X="-0.125" Parent="division_duty1" Name="rst_n" Inout="input" Datatype="wire" Datasize="1" Color="#00ffff" Y="0.35" Function="" Connect="" Side="left"/>
  <Port Width="20" Height="20" X="0.875" Parent="division_duty1" Name="clk_out" Inout="output" Datatype="wire" Datasize="1" Color="#a52a2a" Y="0.26875" Function="" Connect="" Side="right"/>
  <Port Width="20" Height="20" X="-0.125" Parent="division_duty1" Name="data_in" Inout="input" Datatype="wire" Datasize="9" Color="#7fff00" Y="0.4875" Function="" Connect="" Side="left"/>
  <Port Width="20" Height="20" X="-0.125" Parent="division_duty1" Name="data_en" Inout="input" Datatype="wire" Datasize="1" Color="#ff1493" Y="0.625" Function="" Connect="" Side="left"/>
  <Port Width="20" Height="20" X="0.84375" Parent="division_duty1" Name="division_num" Inout="output" Datatype="wire" Datasize="8" Color="#00bfff" Y="0.60625" Function="" Connect="" Side="right"/>
 </Module>
 <Port Width="20" Height="20" X="-0.0222222" Parent="division_duty_test" Name="clk" Inout="input" Datatype="reg" Datasize="1" Color="#0000ff" Y="0.15" Function="" Side="left"/>
 <Port Width="20" Height="20" X="-0.0222222" Parent="division_duty_test" Name="rst_n" Inout="input" Datatype="reg" Datasize="1" Color="#00ffff" Y="0.316667" Function="" Side="left"/>
 <Port Width="20" Height="20" X="0.977778" Parent="division_duty_test" Name="clk_out" Inout="output" Datatype="wire" Datasize="1" Color="#a52a2a" Y="0.316667" Function="" Side="right"/>
 <Port Width="20" Height="20" X="-0.0222222" Parent="division_duty_test" Name="data_in" Inout="input" Datatype="reg" Datasize="9" Color="#e9967a" Y="0.483333" Function="" Side="left"/>
 <Port Width="20" Height="20" X="-0.0222222" Parent="division_duty_test" Name="data_en" Inout="input" Datatype="reg" Datasize="1" Color="#8b008b" Y="0.65" Function="" Side="left"/>
 <Wire To="division_duty_test#division_duty1>clk" From="division_duty_test>clk" Parent="division_duty_test" Name="division_duty_test_clk" Datatype="wire" Datasize="1"/>
 <Wire To="division_duty_test#division_duty1>rst_n" From="division_duty_test>rst_n" Parent="division_duty_test" Name="division_duty_test_rst_n" Datatype="wire" Datasize="1"/>
 <Wire To="division_duty_test#division_duty1>data_in" From="division_duty_test>data_in" Parent="division_duty_test" Name="division_duty_test_data_in" Datatype="wire" Datasize="9"/>
 <Wire To="division_duty_test#division_duty1>data_en" From="division_duty_test>data_en" Parent="division_duty_test" Name="division_duty_test_data_en" Datatype="wire" Datasize="1"/>
 <Wire To="division_duty_test>clk_out" From="division_duty_test#division_duty1>clk_out" Parent="division_duty_test" Name="division_duty1_clk_out" Datatype="wire" Datasize="1"/>
</Module>
