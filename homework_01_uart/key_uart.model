<!DOCTYPE Robei>
<Module Code="&#xa;&#xa;&#xa;" Include="" Parameters="" Height="600" Class="module" Y="0" Name="key_uart" Type="module" Width="900" File="Current/key_uart.model" Color="#d3d3d3" Comment="" Parent="0" X="0">
 <Module Code="`define DEL 1&#xa;&#xa;//&#xa;// This block is used to receive data&#xa;//&#xa;reg         rx_q;&#xa;wire        rx_start;&#xa;reg  [7:0]  rx_cnt;&#xa;reg         rx_cnt_en;&#xa;&#xa;// &#xa;// Edge deteted&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    rx_q &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    rx_q &lt;= #`DEL rx;&#xa;  end&#xa;end      &#xa;// Falling edge effective&#xa;assign rx_start = ( rx_q &amp;&amp; ~rx );&#xa;&#xa;//&#xa;// Generate the count enable signal &#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    rx_cnt_en &lt;= #`DEL 1'b0;&#xa;  end&#xa;  //&#xa;  // Count enable&#xa;  else if( rx_start ) begin&#xa;    rx_cnt_en &lt;= #`DEL 1'b1;&#xa;  end&#xa;  //&#xa;  // Count disable&#xa;  else if( rx_cnt == 8'd168 ) begin&#xa;    rx_cnt_en &lt;= #`DEL 1'b0;&#xa;  end&#xa;end     &#xa;&#xa;//&#xa;// Frequence division&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if ( ~rst_n ) begin&#xa;    rx_cnt &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else if ( rx_cnt_en ) begin&#xa;    rx_cnt &lt;= #`DEL rx_cnt + 8'b1;&#xa;  end&#xa;  else begin&#xa;    rx_cnt &lt;= #`DEL 8'b0;&#xa;  end&#xa;end&#xa;&#xa;//&#xa;// FSM&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    data_received &lt;= #`DEL 9'b0;&#xa;    rx_buf_full   &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else if( rx_cnt_en ) begin&#xa;    case( rx_cnt ) &#xa;      8'd24: begin&#xa;        data_received[0] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end  // Least significant bit&#xa;      8'd40: begin&#xa;        data_received[1] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd56: begin&#xa;        data_received[2] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd72: begin&#xa;        data_received[3] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd88: begin&#xa;        data_received[4] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd104: begin&#xa;        data_received[5] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd120: begin&#xa;        data_received[6] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd136: begin&#xa;        data_received[7] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end  // Most significant bit&#xa;      8'd152: begin&#xa;        data_received[8] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end  // Parity check&#xa;      8'd168: begin&#xa;        rx_buf_full      &lt;= #`DEL 1'b1;&#xa;      end  // Stop bit&#xa;    endcase&#xa;  end// Least significant bit&#xa;end      &#xa;&#xa;//&#xa;// This block is used to transmit data&#xa;//&#xa;reg         tx_en_q;&#xa;wire        tx_start;&#xa;reg  [7:0]  tx_cnt;&#xa;reg         tx_cnt_en;&#xa;reg  [8:0]  shift_reg;&#xa;&#xa;// &#xa;// Edge deteted&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    tx_en_q &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    tx_en_q &lt;= #`DEL tx_en;&#xa;  end&#xa;end      &#xa;// Rising edge effective&#xa;assign tx_start = ( ~tx_en_q &amp;&amp; tx_en );&#xa;&#xa;//&#xa;// Transmit data_send to shift_reg&#xa;//&#xa;always @( posedge tx_start or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    shift_reg &lt;= #`DEL 9'd0;&#xa;  end&#xa;  else begin&#xa;    shift_reg[7:0] &lt;= #`DEL data_send;&#xa;    //&#xa;    // Parity check bit, even parity&#xa;    shift_reg[8]   &lt;= #`DEL ( ^data_send ) ? 1 : 0;   &#xa;  end&#xa;end      &#xa;&#xa;//&#xa;// Generate the count enable signal &#xa;// Generate the tx_buf_full signal which means shift_reg is not empty&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    tx_cnt_en   &lt;= #`DEL 1'b0;&#xa;    tx_buf_full &lt;= #`DEL 1'b0;&#xa;  end&#xa;  //&#xa;  // Count enable&#xa;  else if( tx_start ) begin&#xa;    tx_cnt_en   &lt;= #`DEL 1'b1;&#xa;    tx_buf_full &lt;= #`DEL 1'b1;&#xa;  end&#xa;  //&#xa;  // Count disable&#xa;  else if( tx_cnt == 8'd176 ) begin&#xa;    tx_cnt_en   &lt;= #`DEL 1'b0;&#xa;    tx_buf_full &lt;= #`DEL 1'b0;&#xa;  end&#xa;end     &#xa;&#xa;//&#xa;// Frequence division&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if ( ~rst_n ) begin&#xa;    tx_cnt &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else if ( tx_cnt_en ) begin&#xa;    tx_cnt &lt;= #`DEL tx_cnt + 8'b1;&#xa;  end&#xa;  else begin&#xa;    tx_cnt &lt;= #`DEL 8'b0;&#xa;  end&#xa;end&#xa;&#xa;//&#xa;// FSM&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    tx &lt;= #`DEL 1'b1;&#xa;  end&#xa;  else if( tx_cnt_en ) begin&#xa;    case( tx_cnt ) &#xa;      8'd0: begin&#xa;        tx &lt;= #`DEL 1'b0;&#xa;      end  // Start signal&#xa;      8'd16: begin&#xa;        tx &lt;= #`DEL shift_reg[0];&#xa;      end  // Least significant bit&#xa;      8'd32: begin&#xa;        tx &lt;= #`DEL shift_reg[1];&#xa;      end&#xa;      8'd48: begin&#xa;        tx &lt;= #`DEL shift_reg[2];&#xa;      end&#xa;      8'd64: begin&#xa;        tx &lt;= #`DEL shift_reg[3];&#xa;      end&#xa;      8'd80: begin&#xa;        tx &lt;= #`DEL shift_reg[4];&#xa;      end&#xa;      8'd96: begin&#xa;        tx &lt;= #`DEL shift_reg[5];&#xa;      end&#xa;      8'd112: begin&#xa;        tx &lt;= #`DEL shift_reg[6];&#xa;      end  &#xa;      8'd128: begin&#xa;        tx &lt;= #`DEL shift_reg[7];&#xa;      end  // Most significant bit&#xa;      8'd144: begin&#xa;        tx &lt;= #`DEL shift_reg[8];&#xa;      end  // Parity check      &#xa;      8'd160: begin&#xa;        tx &lt;= #`DEL 1'b1;&#xa;      end  // Stop bit&#xa;    endcase&#xa;  end&#xa;end      &#xa;" Include="" Parameters="" Height="262" Class="uart" Y="132.817" Name="uart2" Type="model" Width="231" File="Current/uart.model" Color="#d3d3d3" Comment="" Parent="key_uart" X="426.79">
  <Port Datasize="1" Datatype="wire" Height="20" Function="" Side="left" Y="0.103053" Name="clk" Width="20" Color="#00ffff" Parent="uart2" X="-0.0865801" Connect="" Inout="input"/>
  <Port Datasize="1" Datatype="wire" Height="20" Function="" Side="left" Y="0.244275" Name="rst_n" Width="20" Color="#7fffd4" Parent="uart2" X="-0.0865801" Connect="" Inout="input"/>
  <Port Datasize="1" Datatype="wire" Height="20" Function="" Side="left" Y="0.385496" Name="rx" Width="20" Color="#0000ff" Parent="uart2" X="-0.0865801" Connect="" Inout="input"/>
  <Port Datasize="1" Datatype="wire" Height="20" Function="" Side="left" Y="0.667939" Name="tx_en" Width="20" Color="#8a2be2" Parent="uart2" X="-0.0865801" Connect="" Inout="input"/>
  <Port Datasize="8" Datatype="wire" Height="20" Function="" Side="left" Y="0.526718" Name="data_send" Width="20" Color="#a52a2a" Parent="uart2" X="-0.0865801" Connect="" Inout="input"/>
  <Port Datasize="1" Datatype="reg" Height="20" Function="" Side="right" Y="0.125954" Name="tx_buf_full" Width="20" Color="#5f9ea0" Parent="uart2" X="0.91342" Connect="" Inout="output"/>
  <Port Datasize="1" Datatype="reg" Height="20" Function="" Side="right" Y="0.290076" Name="rx_buf_full" Width="20" Color="#b8860b" Parent="uart2" X="0.91342" Connect="" Inout="output"/>
  <Port Datasize="1" Datatype="reg" Height="20" Function="" Side="right" Y="0.454198" Name="tx" Width="20" Color="#7fff00" Parent="uart2" X="0.91342" Connect="" Inout="output"/>
  <Port Datasize="9" Datatype="reg" Height="20" Function="" Side="right" Y="0.618321" Name="data_received" Width="20" Color="#ff8c00" Parent="uart2" X="0.91342" Connect="" Inout="output"/>
 </Module>
 <Module Code="`define DEL 1&#xa;&#xa;//&#xa;// Key signal detected&#xa;//&#xa;reg    [3:0] key_in_q;&#xa;wire   [3:0] key_flag;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    key_in_q &lt;= #`DEL 4'b0;&#xa;  end&#xa;  else begin&#xa;    key_in_q &lt;= #`DEL key_in;&#xa;  end&#xa;end      &#xa;assign key_flag = key_in_q &amp; ( ~key_in );&#xa;&#xa;//&#xa;// Delay 20ms&#xa;//&#xa;reg   [19:0] cnt;&#xa;reg   [ 3:0] key_flag_delay;  // Detect key's status after delay 20ms&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    cnt            &lt;= #`DEL 20'd0;&#xa;    key_flag_delay &lt;= #`DEL  4'd0;&#xa;  end&#xa;  else if( cnt == 20'd 999_998 ) begin&#xa;    cnt            &lt;= #`DEL cnt + 20'd1;&#xa;    key_flag_delay &lt;= #`DEL key_flag;&#xa;  end // 20ms&#xa;  else if( cnt == 20'd 999_999 ) begin&#xa;    cnt            &lt;= #`DEL 20'd0;&#xa;    key_flag_delay &lt;= #`DEL key_flag_delay;&#xa;  end // 20ms&#xa;  else begin&#xa;    cnt            &lt;= #`DEL cnt + 20'd1;&#xa;    key_flag_delay &lt;= #`DEL key_flag_delay;&#xa;  end&#xa;end&#xa;&#xa;//&#xa;// If key has been pressed, output&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    key_out     &lt;= #`DEL 8'd0;&#xa;    key_pressed &lt;= #`DEL 1'd0;&#xa;  end&#xa;  else begin&#xa;    case( key_flag_delay ) &#xa;      4'b0000: begin&#xa;        key_out     &lt;= #`DEL 8'd0;&#xa;        key_pressed &lt;= #`DEL 1'd0;&#xa;      end // No key pressed&#xa;      4'b0001: begin&#xa;        key_out     &lt;= #`DEL 8'd1;&#xa;        key_pressed &lt;= #`DEL 1'd1;&#xa;      end // The first key's value is 1&#xa;      4'b0010: begin&#xa;        key_out     &lt;= #`DEL 8'd2;&#xa;        key_pressed &lt;= #`DEL 1'd1;&#xa;      end // The second key's value is 2&#xa;      4'b0100: begin&#xa;        key_out     &lt;= #`DEL 8'd3;&#xa;        key_pressed &lt;= #`DEL 1'd1;&#xa;      end // The third key's value is 3&#xa;      4'b1000: begin&#xa;        key_out     &lt;= #`DEL 8'd4;&#xa;        key_pressed &lt;= #`DEL 1'd1;&#xa;      end // The third key's value is 4&#xa;      default: begin&#xa;        key_out     &lt;= #`DEL key_out;&#xa;        key_pressed &lt;= #`DEL 1'd0;&#xa;      end &#xa;    endcase&#xa;  end&#xa;end      &#xa;" Include="" Parameters="" Height="160" Class="key" Y="322.137" Name="key2" Type="model" Width="160" File="Current/key.model" Color="#d3d3d3" Comment="" Parent="key_uart" X="154.504">
  <Port Datasize="1" Datatype="wire" Height="20" Function="" Side="left" Y="0.1375" Name="clk" Width="20" Color="#0000ff" Parent="key2" X="-0.125" Connect="" Inout="input"/>
  <Port Datasize="1" Datatype="wire" Height="20" Function="" Side="left" Y="0.3375" Name="rst_n" Width="20" Color="#00ffff" Parent="key2" X="-0.125" Connect="" Inout="input"/>
  <Port Datasize="4" Datatype="wire" Height="20" Function="" Side="left" Y="0.5375" Name="key_in" Width="20" Color="#8a2be2" Parent="key2" X="-0.125" Connect="" Inout="input"/>
  <Port Datasize="8" Datatype="reg" Height="20" Function="" Side="right" Y="0.1875" Name="key_out" Width="20" Color="#a52a2a" Parent="key2" X="0.875" Connect="" Inout="output"/>
  <Port Datasize="1" Datatype="reg" Height="20" Function="" Side="right" Y="0.4375" Name="key_pressed" Width="20" Color="#ff7f50" Parent="key2" X="0.875" Connect="" Inout="output"/>
 </Module>
 <Port Datasize="1" Datatype="wire" Height="20" Function="" Side="left" Y="0.183333" Name="clk" Width="20" Color="#0000ff" Parent="key_uart" X="-0.0222222" Inout="input"/>
 <Port Datasize="1" Datatype="wire" Height="20" Function="" Side="left" Y="0.383333" Name="rst_n" Width="20" Color="#00ffff" Parent="key_uart" X="-0.0222222" Inout="input"/>
 <Port Datasize="4" Datatype="wire" Height="20" Function="" Side="left" Y="0.583333" Name="key_in" Width="20" Color="#7fffd4" Parent="key_uart" X="-0.0222222" Inout="input"/>
 <Port Datasize="1" Datatype="wire" Height="20" Function="" Side="right" Y="0.233333" Name="tx_valid" Width="20" Color="#6495ed" Parent="key_uart" X="0.977778" Inout="output"/>
 <Port Datasize="1" Datatype="wire" Height="20" Function="" Side="right" Y="0.483333" Name="tx" Width="20" Color="#dc143c" Parent="key_uart" X="0.977778" Inout="output"/>
 <Wire Datasize="1" From="key_uart>clk" Datatype="wire" Name="key_uart_clk" Parent="key_uart" To="key_uart#uart2>clk"/>
 <Wire Datasize="1" From="key_uart>rst_n" Datatype="wire" Name="key_uart_rst_n" Parent="key_uart" To="key_uart#uart2>rst_n"/>
 <Wire Datasize="1" From="key_uart#uart2>tx_buf_full" Datatype="wire" Name="uart2_tx_buf_full" Parent="key_uart" To="key_uart>tx_valid"/>
 <Wire Datasize="1" From="key_uart#uart2>tx" Datatype="wire" Name="uart2_tx" Parent="key_uart" To="key_uart>tx"/>
 <Wire Datasize="1" From="key_uart>clk" Datatype="wire" Name="key_uart_clk" Parent="key_uart" To="key_uart#key2>clk"/>
 <Wire Datasize="1" From="key_uart>rst_n" Datatype="wire" Name="key_uart_rst_n" Parent="key_uart" To="key_uart#key2>rst_n"/>
 <Wire Datasize="4" From="key_uart>key_in" Datatype="wire" Name="key_uart_key_in" Parent="key_uart" To="key_uart#key2>key_in"/>
 <Wire Datasize="8" From="key_uart#key2>key_out" Datatype="wire" Name="key2_key_out" Parent="key_uart" To="key_uart#uart2>data_send"/>
 <Wire Datasize="1" From="key_uart#key2>key_pressed" Datatype="wire" Name="key2_key_pressed" Parent="key_uart" To="key_uart#uart2>tx_en"/>
</Module>
