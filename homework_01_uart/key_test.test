<!DOCTYPE Robei>
<Module Code="//&#xa;// Generate clk&#xa;//&#xa;initial begin &#xa;  clk = 0;&#xa;end&#xa;always #10 clk = ~clk;&#xa;&#xa;//&#xa;// Generate reset signal&#xa;//&#xa;initial begin&#xa;  rst_n = 1;&#xa;  repeat(1) @( posedge clk ) #1;&#xa;  rst_n = 0;&#xa;  repeat(1) @( posedge clk ) #1;&#xa;  rst_n = 1;  &#xa;end&#xa;&#xa;// &#xa;// Generate key signal&#xa;//&#xa;initial begin&#xa;  key_in = 4'b0000;&#xa;  repeat(1000000) @( posedge clk ) #1;&#xa;  key_in = 4'b0001;&#xa;  repeat(1000000) @( posedge clk ) #1;&#xa;  key_in = 4'b0010;&#xa;  repeat(1000000) @( posedge clk ) #1;&#xa;  key_in = 4'b0100;&#xa;  repeat(1000000) @( posedge clk ) #1;&#xa;  key_in = 4'b1000;&#xa;  repeat(1000000) @( posedge clk ) #1;     &#xa;  key_in = 4'b0000;&#xa;  repeat(1000000) @( posedge clk ) #1;      &#xa;  #10 $finish;&#xa;end" Include="" Height="600" Time_Scale="" Class="module" Y="0" Name="key_test" Type="testbench" Width="900" File="Current/key_test.test" Color="#d3d3d3" Comment="" Parent="0" X="0">
 <Module Code="`define DEL 1&#xa;&#xa;//&#xa;// Key signal detected&#xa;//&#xa;reg    [3:0] key_in_q;&#xa;wire   [3:0] key_flag;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    key_in_q &lt;= #`DEL 4'b0;&#xa;  end&#xa;  else begin&#xa;    key_in_q &lt;= #`DEL key_in;&#xa;  end&#xa;end      &#xa;assign key_flag = key_in_q &amp;&amp; ( ~key_in );&#xa;&#xa;//&#xa;// Delay 20ms&#xa;//&#xa;reg   [19:0] cnt;&#xa;reg   [ 3:0] key_flag_delay;  // Detect key's status after delay 20ms&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    cnt            &lt;= #`DEL 20'd0;&#xa;    key_flag_delay &lt;= #`DEL  4'd0;&#xa;  end&#xa;  else if( cnt == 20'd 999_999 ) begin&#xa;    cnt            &lt;= #`DEL 20'd0;&#xa;    key_flag_delay &lt;= #`DEL key_flag;&#xa;  end // 20ms&#xa;  else begin&#xa;    cnt            &lt;= #`DEL cnt + 20'd1;&#xa;    key_flag_delay &lt;= #`DEL 4'd0;&#xa;  end&#xa;end&#xa;&#xa;//&#xa;// If key has been pressed, output&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    key_out     &lt;= #`DEL 8'd0;&#xa;    key_pressed &lt;= #`DEL 1'd0;&#xa;  end&#xa;  else begin&#xa;    case( key_flag_delay ) &#xa;      4'b0000: begin&#xa;        key_out     &lt;= #`DEL 8'd0;&#xa;        key_pressed &lt;= #`DEL 1'd0;&#xa;      end // Reset key&#xa;      4'b0001: begin&#xa;        key_out     &lt;= #`DEL 8'd1;&#xa;        key_pressed &lt;= #`DEL 1'd1;&#xa;      end // The first key's value is 1&#xa;      4'b0010: begin&#xa;        key_out     &lt;= #`DEL 8'd2;&#xa;        key_pressed &lt;= #`DEL 1'd1;&#xa;      end // The second key's value is 2&#xa;      4'b0100: begin&#xa;        key_out     &lt;= #`DEL 8'd3;&#xa;        key_pressed &lt;= #`DEL 1'd1;&#xa;      end // The third key's value is 3&#xa;      default: begin&#xa;        key_out     &lt;= #`DEL 8'd0;&#xa;        key_pressed &lt;= #`DEL 1'd0;&#xa;      end &#xa;    endcase&#xa;  end&#xa;end      &#xa;" Include="" Parameters="" Height="258" Class="key" Y="260.313" Name="key1" Type="model" Width="278" File="Current/key.model" Color="#d3d3d3" Comment="" Parent="key_test" X="312.603">
  <Port Datasize="1" Datatype="wire" Height="20" Function="" Side="left" Y="0.158915" Name="clk" Width="20" Color="#0000ff" Parent="key1" X="-0.0719424" Connect="" Inout="input"/>
  <Port Datasize="1" Datatype="wire" Height="20" Function="" Side="left" Y="0.356589" Name="rst_n" Width="20" Color="#00ffff" Parent="key1" X="-0.0719424" Connect="" Inout="input"/>
  <Port Datasize="4" Datatype="wire" Height="20" Function="" Side="left" Y="0.554264" Name="key_in" Width="20" Color="#8a2be2" Parent="key1" X="-0.0719424" Connect="" Inout="input"/>
  <Port Datasize="8" Datatype="reg" Height="20" Function="" Side="right" Y="0.209302" Name="key_out" Width="20" Color="#a52a2a" Parent="key1" X="0.928058" Connect="" Inout="output"/>
  <Port Datasize="1" Datatype="reg" Height="20" Function="" Side="right" Y="0.457364" Name="key_pressed" Width="20" Color="#ff7f50" Parent="key1" X="0.928058" Connect="" Inout="output"/>
 </Module>
 <Port Datasize="1" Datatype="reg" Height="20" Function="" Side="left" Y="0.183333" Name="clk" Width="20" Color="#0000ff" Parent="key_test" X="-0.0222222" Inout="input"/>
 <Port Datasize="1" Datatype="reg" Height="20" Function="" Side="left" Y="0.383333" Name="rst_n" Width="20" Color="#00ffff" Parent="key_test" X="-0.0222222" Inout="input"/>
 <Port Datasize="4" Datatype="reg" Height="20" Function="" Side="left" Y="0.583333" Name="key_in" Width="20" Color="#8a2be2" Parent="key_test" X="-0.0222222" Inout="input"/>
 <Port Datasize="8" Datatype="wire" Height="20" Function="" Side="right" Y="0.233333" Name="key_out" Width="20" Color="#a52a2a" Parent="key_test" X="0.977778" Inout="output"/>
 <Port Datasize="1" Datatype="wire" Height="20" Function="" Side="right" Y="0.483333" Name="key_pressed" Width="20" Color="#ff7f50" Parent="key_test" X="0.977778" Inout="output"/>
 <Wire Datasize="1" From="key_test>clk" Datatype="wire" Name="key_test_clk" Parent="key_test" To="key_test#key1>clk"/>
 <Wire Datasize="1" From="key_test>rst_n" Datatype="wire" Name="key_test_rst_n" Parent="key_test" To="key_test#key1>rst_n"/>
 <Wire Datasize="4" From="key_test>key_in" Datatype="wire" Name="key_test_key_in" Parent="key_test" To="key_test#key1>key_in"/>
 <Wire Datasize="8" From="key_test#key1>key_out" Datatype="wire" Name="key1_key_out" Parent="key_test" To="key_test>key_out"/>
 <Wire Datasize="1" From="key_test#key1>key_pressed" Datatype="wire" Name="key1_key_pressed" Parent="key_test" To="key_test>key_pressed"/>
</Module>
