<!DOCTYPE Robei>
<Module Height="600" Name="uart_div_duty" Parameters="" Include="" File="Current/uart_div_duty.model" Comment="" Color="#d3d3d3" X="0" Width="900" Class="module" Y="0" Type="module" Code="&#xa;&#xa;&#xa;" Parent="0">
 <Module Height="160" Name="generate_clk1" Parameters="" Include="" File="Current/generate_clk.model" Comment="" Color="#d3d3d3" X="124.636" Width="160" Class="generate_clk" Y="98.8079" Type="model" Code="&#x9;`define DEL 1&#xa;&#x9;&#xa;  //&#xa;&#x9;// Division is 78, which duty is 50% and frequency is 153846Hz&#xa;  // 153846 = 16 * 9600&#xa;&#x9;//&#xa;  reg [6:0] cnt;&#xa;&#xa;  always @( posedge clk or negedge rst_n ) begin&#xa;    if( ~rst_n ) begin&#xa;      cnt     &lt;= #`DEL 7'd0;&#xa;      clk_out &lt;= #`DEL 1'b0;&#xa;    end&#xa;    else if( cnt == 7'd38 ) begin&#xa;      cnt     &lt;= #`DEL cnt + 7'd1;&#xa;      clk_out &lt;= #`DEL 1'b1;&#xa;    end&#xa;    else if( cnt == 7'd77 ) begin&#xa;      cnt     &lt;= #`DEL 7'd0;&#xa;      clk_out &lt;= #`DEL 1'b0;&#xa;    end&#xa;    else begin&#xa;      cnt     &lt;= #`DEL cnt + 7'd1;&#xa;    end&#xa;  end  &#xa;" Parent="uart_div_duty">
  <Port Height="20" Name="clk" Connect="" Side="left" Color="#0000ff" X="-0.125" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.1875" Inout="input" Parent="generate_clk1"/>
  <Port Height="20" Name="rst_n" Connect="" Side="left" Color="#00ffff" X="-0.125" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.4375" Inout="input" Parent="generate_clk1"/>
  <Port Height="20" Name="clk_out" Connect="" Side="right" Color="#dc143c" X="0.875" Width="20" Function="" Datatype="reg" Datasize="1" Y="0.26875" Inout="output" Parent="generate_clk1"/>
 </Module>
 <Module Height="160" Name="uart1" Parameters="" Include="" File="Current/uart.model" Comment="" Color="#d3d3d3" X="150.464" Width="160" Class="uart" Y="379.934" Type="model" Code="`define DEL 1&#xa;&#xa;//&#xa;// This block is used to receive data&#xa;//&#xa;reg         rx_q;&#xa;wire        rx_start;&#xa;reg  [7:0]  rx_cnt;&#xa;reg         rx_cnt_en;&#xa;&#xa;// &#xa;// Edge deteted&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    rx_q &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    rx_q &lt;= #`DEL rx;&#xa;  end&#xa;end      &#xa;// Falling edge effective&#xa;assign rx_start = ( rx_q &amp;&amp; ~rx );&#xa;&#xa;//&#xa;// Generate the count enable signal &#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    rx_cnt_en &lt;= #`DEL 1'b0;&#xa;  end&#xa;  //&#xa;  // Count enable&#xa;  else if( rx_start ) begin&#xa;    rx_cnt_en &lt;= #`DEL 1'b1;&#xa;  end&#xa;  //&#xa;  // Count disable&#xa;  else if( rx_cnt == 8'd171 ) begin&#xa;    rx_cnt_en &lt;= #`DEL 1'b0;&#xa;  end&#xa;end     &#xa;&#xa;//&#xa;// Frequence division&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if ( ~rst_n ) begin&#xa;    rx_cnt &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else if ( rx_cnt_en ) begin&#xa;    rx_cnt &lt;= #`DEL rx_cnt + 8'b1;&#xa;  end&#xa;  else begin&#xa;    rx_cnt &lt;= #`DEL 8'b0;&#xa;  end&#xa;end&#xa;&#xa;reg [8:0] data_received_temp;&#xa;//&#xa;// FSM&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    data_received_temp &lt;= #`DEL 9'b0;&#xa;    rx_buf_full        &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else if( rx_cnt_en ) begin&#xa;    case( rx_cnt ) &#xa;      8'd24: begin&#xa;        data_received_temp[0] &lt;= #`DEL rx;&#xa;        rx_buf_full           &lt;= #`DEL 1'b0;&#xa;      end  // Least significant bit&#xa;      8'd40: begin&#xa;        data_received_temp[1] &lt;= #`DEL rx;&#xa;        rx_buf_full           &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd56: begin&#xa;        data_received_temp[2] &lt;= #`DEL rx;&#xa;        rx_buf_full           &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd72: begin&#xa;        data_received_temp[3] &lt;= #`DEL rx;&#xa;        rx_buf_full           &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd88: begin&#xa;        data_received_temp[4] &lt;= #`DEL rx;&#xa;        rx_buf_full           &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd104: begin&#xa;        data_received_temp[5] &lt;= #`DEL rx;&#xa;        rx_buf_full           &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd120: begin&#xa;        data_received_temp[6] &lt;= #`DEL rx;&#xa;        rx_buf_full           &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd136: begin&#xa;        data_received_temp[7] &lt;= #`DEL rx;&#xa;        rx_buf_full           &lt;= #`DEL 1'b0;&#xa;      end  // Most significant bit&#xa;      8'd152: begin&#xa;        data_received_temp[8] &lt;= #`DEL rx;&#xa;        rx_buf_full           &lt;= #`DEL 1'b0;&#xa;      end  // Parity check&#xa;      8'd170: begin&#xa;        rx_buf_full           &lt;= #`DEL 1'b1;&#xa;      end  // Stop bit&#xa;      default:begin&#xa;        rx_buf_full           &lt;= #`DEL 1'b0;&#xa;      end&#xa;    endcase&#xa;  end// Least significant bit&#xa;end    &#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    data_received &lt;= #`DEL 9'b0;&#xa;  end&#xa;  else if( rx_cnt == 8'd168 ) begin&#xa;    data_received &lt;= #`DEL data_received_temp;  // Ensure data can be collected&#xa;  end&#xa;end      &#xa;&#xa;//&#xa;// This block is used to transmit data&#xa;//&#xa;reg         tx_en_q;&#xa;wire        tx_start;&#xa;reg  [7:0]  tx_cnt;&#xa;reg         tx_cnt_en;&#xa;reg  [8:0]  shift_reg;&#xa;&#xa;// &#xa;// Edge deteted&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    tx_en_q &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    tx_en_q &lt;= #`DEL tx_en;&#xa;  end&#xa;end      &#xa;// Rising edge effective&#xa;assign tx_start = ( ~tx_en_q &amp;&amp; tx_en );&#xa;&#xa;//&#xa;// Transmit data_send to shift_reg&#xa;//&#xa;always @( posedge tx_start or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    shift_reg &lt;= #`DEL 9'd0;&#xa;  end&#xa;  else begin&#xa;    shift_reg[7:0] &lt;= #`DEL data_send;&#xa;    //&#xa;    // Parity check bit, even parity&#xa;    shift_reg[8]   &lt;= #`DEL ( ^data_send ) ? 1 : 0;   &#xa;  end&#xa;end      &#xa;&#xa;//&#xa;// Generate the count enable signal &#xa;// Generate the tx_buf_full signal which means shift_reg is not empty&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    tx_cnt_en   &lt;= #`DEL 1'b0;&#xa;    tx_buf_full &lt;= #`DEL 1'b0;&#xa;  end&#xa;  //&#xa;  // Count enable&#xa;  else if( tx_start ) begin&#xa;    tx_cnt_en   &lt;= #`DEL 1'b1;&#xa;    tx_buf_full &lt;= #`DEL 1'b1;&#xa;  end&#xa;  //&#xa;  // Count disable&#xa;  else if( tx_cnt == 8'd176 ) begin&#xa;    tx_cnt_en   &lt;= #`DEL 1'b0;&#xa;    tx_buf_full &lt;= #`DEL 1'b0;&#xa;  end&#xa;end     &#xa;&#xa;//&#xa;// Frequence division&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if ( ~rst_n ) begin&#xa;    tx_cnt &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else if ( tx_cnt_en ) begin&#xa;    tx_cnt &lt;= #`DEL tx_cnt + 8'b1;&#xa;  end&#xa;  else begin&#xa;    tx_cnt &lt;= #`DEL 8'b0;&#xa;  end&#xa;end&#xa;&#xa;//&#xa;// FSM&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    tx &lt;= #`DEL 1'b1;&#xa;  end&#xa;  else if( tx_cnt_en ) begin&#xa;    case( tx_cnt ) &#xa;      8'd0: begin&#xa;        tx &lt;= #`DEL 1'b0;&#xa;      end  // Start signal&#xa;      8'd16: begin&#xa;        tx &lt;= #`DEL shift_reg[0];&#xa;      end  // Least significant bit&#xa;      8'd32: begin&#xa;        tx &lt;= #`DEL shift_reg[1];&#xa;      end&#xa;      8'd48: begin&#xa;        tx &lt;= #`DEL shift_reg[2];&#xa;      end&#xa;      8'd64: begin&#xa;        tx &lt;= #`DEL shift_reg[3];&#xa;      end&#xa;      8'd80: begin&#xa;        tx &lt;= #`DEL shift_reg[4];&#xa;      end&#xa;      8'd96: begin&#xa;        tx &lt;= #`DEL shift_reg[5];&#xa;      end&#xa;      8'd112: begin&#xa;        tx &lt;= #`DEL shift_reg[6];&#xa;      end  &#xa;      8'd128: begin&#xa;        tx &lt;= #`DEL shift_reg[7];&#xa;      end  // Most significant bit&#xa;      8'd144: begin&#xa;        tx &lt;= #`DEL shift_reg[8];&#xa;      end  // Parity check      &#xa;      8'd160: begin&#xa;        tx &lt;= #`DEL 1'b1;&#xa;      end  // Stop bit&#xa;    endcase&#xa;  end&#xa;end      &#xa;" Parent="uart_div_duty">
  <Port Height="20" Name="clk" Connect="" Side="left" Color="#00ffff" X="-0.125" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.075" Inout="input" Parent="uart1"/>
  <Port Height="20" Name="rst_n" Connect="" Side="left" Color="#7fffd4" X="-0.125" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.35" Inout="input" Parent="uart1"/>
  <Port Height="20" Name="rx" Connect="" Side="left" Color="#0000ff" X="-0.125" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.4875" Inout="input" Parent="uart1"/>
  <Port Height="20" Name="tx_en" Connect="" Side="left" Color="#8a2be2" X="-0.125" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.2125" Inout="input" Parent="uart1"/>
  <Port Height="20" Name="data_send" Connect="" Side="left" Color="#a52a2a" X="-0.125" Width="20" Function="" Datatype="wire" Datasize="8" Y="0.625" Inout="input" Parent="uart1"/>
  <Port Height="20" Name="tx_buf_full" Connect="" Side="right" Color="#5f9ea0" X="0.875" Width="20" Function="" Datatype="reg" Datasize="1" Y="0.5875" Inout="output" Parent="uart1"/>
  <Port Height="20" Name="rx_buf_full" Connect="" Side="right" Color="#b8860b" X="0.875" Width="20" Function="" Datatype="reg" Datasize="1" Y="0.1" Inout="output" Parent="uart1"/>
  <Port Height="20" Name="tx" Connect="" Side="right" Color="#7fff00" X="0.875" Width="20" Function="" Datatype="reg" Datasize="1" Y="0.425" Inout="output" Parent="uart1"/>
  <Port Height="20" Name="data_received" Connect="" Side="right" Color="#ff8c00" X="0.875" Width="20" Function="" Datatype="reg" Datasize="9" Y="0.2625" Inout="output" Parent="uart1"/>
 </Module>
 <Module Height="160" Name="division_duty1" Parameters="" Include="" File="Current/division_duty.model" Comment="" Color="#d3d3d3" X="613.377" Width="160" Class="division_duty" Y="84.9007" Type="model" Code="`define DEL 1&#xa;&#xa;//&#xa;// There should be two datas to control frequency division and duty seperately&#xa;// The first data is to control the division, while the second control the duty&#xa;//&#xa;reg [7:0] division;&#xa;reg [7:0] duty_num;&#xa;&#xa;//&#xa;// Detect the falling edge of data_en&#xa;reg     data_en_q;&#xa;wire    data_en_flag;&#xa;reg     cnt_div_duty;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    data_en_q &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    data_en_q &lt;= #`DEL data_en;&#xa;  end&#xa;end&#xa;assign data_en_flag = ( data_en_q ) &amp;&amp; ( ~data_en );&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    division     &lt;= #`DEL 8'd0;&#xa;    duty_num     &lt;= #`DEL 8'd0;&#xa;    cnt_div_duty &lt;= #`DEL 1'd1;&#xa;  end&#xa;  else if( data_en_flag ) begin&#xa;    case( cnt_div_duty )&#xa;      1:begin&#xa;        division     &lt;= #`DEL data_in[7:0];&#xa;        duty_num     &lt;= #`DEL duty_num;&#xa;        cnt_div_duty &lt;= #`DEL cnt_div_duty + 1'b1;&#xa;      end&#xa;      0:begin&#xa;        division     &lt;= #`DEL division;&#xa;        duty_num     &lt;= #`DEL data_in[7:0];&#xa;        cnt_div_duty &lt;= #`DEL cnt_div_duty + 1'b1;&#xa;      end&#xa;    endcase&#xa;  end&#xa;end &#xa;&#xa;//&#xa;// Parity check&#xa;//&#xa;always @( posedge clk ) begin&#xa;  if( data_in[8] != ^data_in[7:0] ) begin&#xa;    $display( &quot; Division_duty:Uart communication error! &quot; );&#xa;    $display(&quot;Receive data is: 9'b%b_%b_%b&quot;,data_in[8],data_in[7:4],data_in[3:0]);&#xa;    $finish;&#xa;  end&#xa;end      &#xa;&#xa;//&#xa;// Even division, which duty is 50%&#xa;//&#xa;reg           clk_even;&#xa;wire          clk_out_div;&#xa;reg     [7:0] cnt_even;&#xa;wire    [7:0] division_even;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    cnt_even &lt;= #`DEL 8'd0;&#xa;    clk_even &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else if( division[0]==1 || ~cnt_div_duty ) begin&#xa;    cnt_even &lt;= #`DEL 8'd0;&#xa;    clk_even &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    if( division[7:0] == 8'd0 ) begin    &#xa;      cnt_even &lt;= #`DEL 8'd0;&#xa;    end&#xa;    else if( cnt_even == ( division_even - 1 ) ) begin&#xa;      cnt_even &lt;= #`DEL 8'd0;&#xa;      clk_even &lt;= #`DEL ~clk_even;&#xa;    end&#xa;    else begin&#xa;      cnt_even &lt;= #`DEL cnt_even + 8'd1;&#xa;      clk_even &lt;= #`DEL clk_even;&#xa;    end&#xa;  end&#xa;end     &#xa;&#xa;assign division_even = ( division[0] == 0 ) ? ( division[7:0] >> 1 ) : 0;&#xa;&#xa;//&#xa;// Odd division, which duty is 50%&#xa;//&#xa;reg         clk_p;&#xa;reg         clk_n;&#xa;wire        clk_odd;&#xa;reg   [7:0] cnt_p;&#xa;reg   [7:0] cnt_n;&#xa;wire  [7:0] division_odd;&#xa;&#xa;//&#xa;// Rising edge&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    clk_p &lt;= #`DEL 1'b0;&#xa;    cnt_p &lt;= #`DEL 8'b0;&#xa;  end&#xa;  else if( division[0]==0 || ~cnt_div_duty ) begin    &#xa;    clk_p &lt;= #`DEL 1'b0;&#xa;    cnt_p &lt;= #`DEL 8'b0;&#xa;  end&#xa;  else begin&#xa;    if( cnt_p == division_odd - 1 ) begin&#xa;      clk_p &lt;= #`DEL ~clk_p;&#xa;      cnt_p &lt;= #`DEL 8'b0;&#xa;    end&#xa;    else if( cnt_p == ( ( division[7:0] - 1 ) >> 1 ) )begin&#xa;      clk_p &lt;= #`DEL ~clk_p;&#xa;      cnt_p &lt;= #`DEL cnt_p + 8'b1;&#xa;    end&#xa;    else begin&#xa;      clk_p &lt;= #`DEL clk_p;&#xa;      cnt_p &lt;= #`DEL cnt_p + 8'b1;&#xa;    end&#xa;  end&#xa;end      &#xa;&#xa;//&#xa;// Falling edge&#xa;always @( negedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    clk_n &lt;= #`DEL 1'b0;&#xa;    cnt_n &lt;= #`DEL 8'b0;&#xa;  end&#xa;  else if( division[0]==0 || ~cnt_div_duty ) begin    &#xa;    clk_n &lt;= #`DEL 1'b0;&#xa;    cnt_n &lt;= #`DEL 8'b0;&#xa;  end&#xa;  else begin&#xa;    if( cnt_n == division_odd - 1 ) begin&#xa;      clk_n &lt;= #`DEL ~clk_n;&#xa;      cnt_n &lt;= #`DEL 8'b0;&#xa;    end&#xa;    else if( cnt_n == ( ( division[7:0] - 1 ) >> 1 ) )begin&#xa;      clk_n &lt;= #`DEL ~clk_n;&#xa;      cnt_n &lt;= #`DEL cnt_n + 8'b1;&#xa;    end&#xa;    else begin&#xa;      clk_n &lt;= #`DEL clk_n;&#xa;      cnt_n &lt;= #`DEL cnt_n + 8'b1;&#xa;    end&#xa;  end&#xa;end     &#xa;&#xa;&#xa;assign division_odd = ( division[0] == 1 ) ? division[7:0] : 0;&#xa;assign clk_odd = clk_n | clk_p;&#xa;&#xa;assign clk_out_div = ( division[0] == 1 ) ? clk_odd : clk_even;&#xa;&#xa;//&#xa;// Duty&#xa;//&#xa;reg [7:0] cnt_duty; // Used in duty generate&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    cnt_duty &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else if( ( duty_num == (division[7:0]>>1) ) || cnt_duty_flag || ~cnt_div_duty ) begin&#xa;    // If duty is half of division[7:0] that means duty is 50%,&#xa;    // use clk_div as clk_out&#xa;    // If cnt_duty_flag is 1, then count begin from 0&#xa;    cnt_duty &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else if( cnt_duty == division[7:0] )begin&#xa;    cnt_duty &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else begin&#xa;    cnt_duty &lt;= #`DEL cnt_duty + 8'd1;&#xa;  end&#xa;end      &#xa;&#xa;//&#xa;// Attention: duty_num is an input signal, which is equal to duty(%) * division&#xa;reg clk_out_duty;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    clk_out_duty &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else if( duty_num == (division[7:0]>>1) || cnt_duty_flag || ~cnt_div_duty ) begin&#xa;    clk_out_duty &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else if( cnt_duty &lt; duty_num )begin&#xa;    clk_out_duty &lt;= #`DEL 1'b1;&#xa;  end&#xa;  else begin&#xa;    clk_out_duty &lt;= #`DEL 1'b0;&#xa;  end&#xa;end      &#xa;&#xa;// While duty_num is half of division which means duty is 50%, clk_out is generated by the first method that is more accurate than the second method&#xa;// While duty is not 50%,clk_out is generated by the 2nd way which duty is variable&#xa;assign clk_out = ( duty_num == (division[7:0]>>1) || duty_num == 0 ) ? clk_out_div : clk_out_duty;&#xa;&#xa;//&#xa;// Detect the change of duty_num and division&#xa;//&#xa;reg [7:0]  duty_num_temp;&#xa;reg [7:0]  division_temp;&#xa;reg        duty_num_flag;&#xa;reg        division_flag;&#xa;reg        cnt_duty_flag;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    duty_num_temp &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else begin&#xa;    duty_num_temp &lt;= #`DEL duty_num;&#xa;  end&#xa;end      &#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    division_temp &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else begin&#xa;    division_temp &lt;= #`DEL division;&#xa;  end&#xa;end &#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    duty_num_flag &lt;= #`DEL 1'd0;&#xa;    division_flag &lt;= #`DEL 1'd0;&#xa;  end&#xa;  else if( duty_num_temp != duty_num )begin&#xa;    duty_num_flag &lt;= #`DEL 1'd1;&#xa;  end&#xa;  else if( division_temp != division )begin&#xa;    division_flag &lt;= #`DEL 1'd1;&#xa;  end&#xa;  else begin &#xa;    duty_num_flag &lt;= #`DEL 1'd0;&#xa;    division_flag &lt;= #`DEL 1'd0;&#xa;  end&#xa;end      &#xa;&#xa;//&#xa;// Generate the start counting signal of cnt_duty. If cnt_duty_flag is 1, which means division or duty_num has changed, then cnt_duty start count from 0 again&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    cnt_duty_flag &lt;= #`DEL 1'd0;&#xa;  end&#xa;  else if( duty_num_flag || division_flag )begin&#xa;    cnt_duty_flag &lt;= #`DEL 1'd1;&#xa;  end&#xa;  else begin&#xa;    cnt_duty_flag &lt;= #`DEL 1'd0;&#xa;  end&#xa;end &#xa;&#xa;" Parent="uart_div_duty">
  <Port Height="20" Name="clk" Connect="" Side="left" Color="#0000ff" X="-0.125" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.1" Inout="input" Parent="division_duty1"/>
  <Port Height="20" Name="rst_n" Connect="" Side="left" Color="#00ffff" X="-0.125" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.2625" Inout="input" Parent="division_duty1"/>
  <Port Height="20" Name="clk_out" Connect="" Side="right" Color="#a52a2a" X="0.875" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.1875" Inout="output" Parent="division_duty1"/>
  <Port Height="20" Name="data_in" Connect="" Side="left" Color="#7fff00" X="-0.125" Width="20" Function="" Datatype="wire" Datasize="9" Y="0.5875" Inout="input" Parent="division_duty1"/>
  <Port Height="20" Name="data_en" Connect="" Side="left" Color="#ff1493" X="-0.125" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.425" Inout="input" Parent="division_duty1"/>
  <Port Height="20" Name="division_num" Connect="" Side="right" Color="#00bfff" X="0.875" Width="20" Function="" Datatype="wire" Datasize="8" Y="0.4375" Inout="output" Parent="division_duty1"/>
 </Module>
 <Module Height="160" Name="led_display4" Parameters="" Include="" File="Current/led_display.model" Comment="" Color="#d3d3d3" X="594.503" Width="160" Class="led_display" Y="278.609" Type="model" Code="`define DEL 1&#xa;//&#xa;// LED display start signal&#xa;//&#xa;reg  display_en_q;&#xa;wire display_start;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    display_en_q &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    display_en_q &lt;= #`DEL display_en;&#xa;  end&#xa;end      &#xa;// Rising edge effective&#xa;assign display_start = ~display_en_q &amp;&amp; display_en;&#xa;&#xa;//&#xa;// Parity check&#xa;//&#xa;always @( posedge clk ) begin&#xa;  if( display_data_in[8] != ( ^display_data_in[7:0] ) ) begin&#xa;    $display(&quot;LED:Parity check failed!&quot;);&#xa;    $display(&quot;Receive data is: 9'b%b_%b_%b&quot;,display_data_in[8],display_data_in[7:4],display_data_in[3:0]);&#xa;    $finish;&#xa;  end&#xa;end  &#xa;&#xa;//&#xa;// LED display decoder&#xa;//&#xa;reg [6:0] seg [15:0];&#xa;initial begin&#xa;  seg[0] = 7'h3f; // 0&#xa;  seg[1] = 7'h06; // 1&#xa;  seg[2] = 7'h5b; // 2&#xa;  seg[3] = 7'h4f; // 3&#xa;  seg[4] = 7'h66; // 4&#xa;  seg[5] = 7'h6d; // 5&#xa;  seg[6] = 7'h7d; // 6&#xa;  seg[7] = 7'h07; // 7&#xa;  seg[8] = 7'h7f; // 8&#xa;  seg[9] = 7'h6f; // 9&#xa;  seg[10]= 7'h77; // A&#xa;  seg[11]= 7'h7c; // b&#xa;  seg[12]= 7'h39; // C&#xa;  seg[13]= 7'h5e; // d&#xa;  seg[14]= 7'h79; // E&#xa;  seg[15]= 7'h71; // F&#xa;end&#xa;&#xa;reg [3:0] led0_temp;&#xa;reg [3:0] led1_temp;&#xa;reg       display_flag;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    led0_temp &lt;= #`DEL 4'd0;&#xa;    led1_temp &lt;= #`DEL 4'd0;&#xa;    display_flag &lt;= #`DEL 1'd0;&#xa;  end&#xa;  else if( display_start )begin&#xa;    led0_temp &lt;= #`DEL display_data_in[3:0];&#xa;    led1_temp &lt;= #`DEL display_data_in[7:4];&#xa;    display_flag &lt;= #`DEL 1'd1;&#xa;  end&#xa;  else begin      &#xa;    display_flag &lt;= #`DEL 1'd0;&#xa;  end&#xa;end      &#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    out_to_led0 &lt;= #`DEL 7'd0;&#xa;    out_to_led1 &lt;= #`DEL 7'd0;&#xa;  end&#xa;  else if( display_flag ) begin&#xa;    out_to_led0 &lt;= #`DEL seg[led0_temp];&#xa;    out_to_led1 &lt;= #`DEL seg[led1_temp];&#xa;  end&#xa;end      " Parent="uart_div_duty">
  <Port Height="20" Name="clk" Connect="" Side="left" Color="#0000ff" X="-0.125" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.1" Inout="input" Parent="led_display4"/>
  <Port Height="20" Name="rst_n" Connect="" Side="left" Color="#00ffff" X="-0.125" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.2625" Inout="input" Parent="led_display4"/>
  <Port Height="20" Name="display_data_in" Connect="" Side="left" Color="#5f9ea0" X="-0.125" Width="20" Function="" Datatype="wire" Datasize="9" Y="0.425" Inout="input" Parent="led_display4"/>
  <Port Height="20" Name="out_to_led1" Connect="" Side="right" Color="#00bfff" X="0.875" Width="20" Function="" Datatype="reg" Datasize="9" Y="0.4375" Inout="output" Parent="led_display4"/>
  <Port Height="20" Name="out_to_led0" Connect="" Side="right" Color="#b8860b" X="0.875" Width="20" Function="" Datatype="reg" Datasize="9" Y="0.1875" Inout="output" Parent="led_display4"/>
  <Port Height="20" Name="display_en" Connect="" Side="left" Color="#ffe4c4" X="-0.125" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.5875" Inout="input" Parent="led_display4"/>
 </Module>
 <Port Height="20" Name="clk" Side="left" Color="#0000ff" X="-0.0222222" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.181667" Inout="input" Parent="uart_div_duty"/>
 <Port Height="20" Name="rst_n" Side="left" Color="#00ffff" X="-0.0222222" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.381667" Inout="input" Parent="uart_div_duty"/>
 <Port Height="20" Name="rx" Side="left" Color="#7fffd4" X="-0.0222222" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.581667" Inout="input" Parent="uart_div_duty"/>
 <Port Height="20" Name="clk_out" Side="right" Color="#8b0000" X="0.977778" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.15" Inout="output" Parent="uart_div_duty"/>
 <Port Height="20" Name="led0" Side="right" Color="#7fffd4" X="0.977778" Width="20" Function="" Datatype="wire" Datasize="9" Y="0.481667" Inout="output" Parent="uart_div_duty"/>
 <Port Height="20" Name="led1" Side="right" Color="#cd5c5c" X="0.977778" Width="20" Function="" Datatype="wire" Datasize="9" Y="0.65" Inout="output" Parent="uart_div_duty"/>
 <Port Height="20" Name="division_num" Side="right" Color="#b8860b" X="0.977778" Width="20" Function="" Datatype="wire" Datasize="8" Y="0.316667" Inout="output" Parent="uart_div_duty"/>
 <Wire From="uart_div_duty>clk" Name="uart_div_duty_clk" Datatype="wire" Datasize="1" To="uart_div_duty#generate_clk1>clk" Parent="uart_div_duty"/>
 <Wire From="uart_div_duty#generate_clk1>clk_out" Name="generate_clk1_clk_out" Datatype="wire" Datasize="1" To="uart_div_duty#uart1>clk" Parent="uart_div_duty"/>
 <Wire From="uart_div_duty#generate_clk1>clk_out" Name="generate_clk1_clk_out" Datatype="wire" Datasize="1" To="uart_div_duty#division_duty1>clk" Parent="uart_div_duty"/>
 <Wire From="uart_div_duty>rst_n" Name="uart_div_duty_rst_n" Datatype="wire" Datasize="1" To="uart_div_duty#generate_clk1>rst_n" Parent="uart_div_duty"/>
 <Wire From="uart_div_duty>rst_n" Name="uart_div_duty_rst_n" Datatype="wire" Datasize="1" To="uart_div_duty#uart1>rst_n" Parent="uart_div_duty"/>
 <Wire From="uart_div_duty>rst_n" Name="uart_div_duty_rst_n" Datatype="wire" Datasize="1" To="uart_div_duty#division_duty1>rst_n" Parent="uart_div_duty"/>
 <Wire From="uart_div_duty>rx" Name="uart_div_duty_rx" Datatype="wire" Datasize="1" To="uart_div_duty#uart1>rx" Parent="uart_div_duty"/>
 <Wire From="uart_div_duty#uart1>data_received" Name="uart1_data_received" Datatype="wire" Datasize="9" To="uart_div_duty#division_duty1>data_in" Parent="uart_div_duty"/>
 <Wire From="uart_div_duty#uart1>rx_buf_full" Name="uart1_rx_buf_full" Datatype="wire" Datasize="1" To="uart_div_duty#division_duty1>data_en" Parent="uart_div_duty"/>
 <Wire From="uart_div_duty#division_duty1>clk_out" Name="division_duty1_clk_out" Datatype="wire" Datasize="1" To="uart_div_duty>clk_out" Parent="uart_div_duty"/>
 <Wire From="uart_div_duty#generate_clk1>clk_out" Name="generate_clk1_clk_out" Datatype="wire" Datasize="1" To="uart_div_duty#led_display4>clk" Parent="uart_div_duty"/>
 <Wire From="uart_div_duty>rst_n" Name="uart_div_duty_rst_n" Datatype="wire" Datasize="1" To="uart_div_duty#led_display4>rst_n" Parent="uart_div_duty"/>
 <Wire From="uart_div_duty#uart1>rx_buf_full" Name="uart1_rx_buf_full" Datatype="wire" Datasize="1" To="uart_div_duty#led_display4>display_en" Parent="uart_div_duty"/>
 <Wire From="uart_div_duty#uart1>data_received" Name="uart1_data_received" Datatype="wire" Datasize="9" To="uart_div_duty#led_display4>display_data_in" Parent="uart_div_duty"/>
 <Wire From="uart_div_duty#led_display4>out_to_led0" Name="led_display4_out_to_led0" Datatype="wire" Datasize="9" To="uart_div_duty>led0" Parent="uart_div_duty"/>
 <Wire From="uart_div_duty#led_display4>out_to_led1" Name="led_display4_out_to_led1" Datatype="wire" Datasize="9" To="uart_div_duty>led1" Parent="uart_div_duty"/>
 <Wire From="uart_div_duty#division_duty1>division_num" Name="division_duty1_division_num" Datatype="wire" Datasize="8" To="uart_div_duty>division_num" Parent="uart_div_duty"/>
</Module>
