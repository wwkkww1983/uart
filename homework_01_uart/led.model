<!DOCTYPE Robei>
<Module Height="600" Name="led" Parameters="" Include="" File="Current/led.model" Comment="" Color="#d3d3d3" X="0" Width="900" Class="module" Y="0" Type="module" Code="`define DEL 1&#xa;//&#xa;// LED display start signal&#xa;//&#xa;reg  display_en_q;&#xa;wire display_start;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    display_en_q &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    display_en_q &lt;= #`DEL display_en;&#xa;  end&#xa;end      &#xa;// Rising edge effective&#xa;assign display_start = ~display_en_q &amp;&amp; display_en;&#xa;&#xa;//&#xa;// Parity check&#xa;//&#xa;always @( posedge clk ) begin&#xa;  if( data_in[8] != ( ^data_in[7:0] ) ) begin&#xa;    $display(&quot;LED:Parity check failed!&quot;);&#xa;    $display(&quot;Receive data is: 9'b%b_%b_%b&quot;,data_in[8],data_in[7:4],data_in[3:0]);&#xa;    $finish;&#xa;  end&#xa;end  &#xa;&#xa;" Parent="0">
 <Module Height="257" Name="bin_bcd1" Parameters="" Include="" File="Current/bin_bcd.model" Comment="" Color="#d3d3d3" X="263.305" Width="284" Class="bin_bcd" Y="158.972" Type="model" Code="`define DEL 1&#xa;&#xa;reg       [2:0]   cs;&#xa;reg       [2:0]   ns;&#xa;&#xa;reg       [3:0]   shift_cnt;&#xa;reg       [7:0]   data_reg;&#xa;&#xa;reg       [3:0]   ones_reg;&#xa;reg       [3:0]   tens_reg;&#xa;reg       [3:0]   hundreds_reg;&#xa;&#xa;reg       [3:0]   ones_out;&#xa;reg       [3:0]   tens_out;&#xa;reg       [3:0]   hundreds_out;&#xa;&#xa;wire      [3:0]   ones_temp;&#xa;wire      [3:0]   tens_temp;&#xa;wire      [3:0]   hundreds_temp;&#xa;&#xa;parameter [2:0]  IDLE   = 3'b001,&#xa;  SHIFT     = 3'b010,&#xa;  DONE      = 3'b100;&#xa;&#xa;//&#xa;// FSM step1&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if ( !rst_n ) begin&#xa;    cs &lt;= #`DEL IDLE;&#xa;  end&#xa;  else begin&#xa;    cs &lt;= #`DEL ns;&#xa;  end&#xa;end&#xa;&#xa;//&#xa;// FSM step2&#xa;//&#xa;always @( * ) begin&#xa;  ns = IDLE;&#xa;  case ( cs )&#xa;    IDLE : begin&#xa;      if ( tran_en ) begin&#xa;        ns = SHIFT;&#xa;      end&#xa;      else begin&#xa;        ns = IDLE;&#xa;      end&#xa;    end&#xa;    SHIFT: begin&#xa;      if ( shift_cnt == 9 ) begin&#xa;        ns = DONE;&#xa;      end &#xa;      else begin&#xa;        ns = SHIFT;&#xa;      end&#xa;    end &#xa;    DONE : begin &#xa;        ns = IDLE;&#xa;    end &#xa;    default : begin &#xa;        ns = IDLE;&#xa;    end &#xa;  endcase &#xa;end&#xa;&#xa;//&#xa;// FSM step3&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin &#xa;  if ( !rst_n ) begin &#xa;    ones_reg     &lt;= #`DEL 4'b0;&#xa;    tens_reg     &lt;= #`DEL 4'b0;&#xa;    hundreds_reg &lt;= #`DEL 4'b0;&#xa;    shift_cnt    &lt;= #`DEL 4'b0;&#xa;    data_reg     &lt;= #`DEL 8'b0;&#xa;    tran_done    &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin &#xa;    case ( ns )&#xa;      IDLE: begin&#xa;        ones_reg     &lt;= #`DEL 4'b0;&#xa;        tens_reg     &lt;= #`DEL 4'b0;&#xa;        hundreds_reg &lt;= #`DEL 4'b0;&#xa;        shift_cnt    &lt;= #`DEL 4'b0;&#xa;        data_reg     &lt;= #`DEL data_in;&#xa;        tran_done    &lt;= #`DEL 1'b0;&#xa;      end&#xa;      SHIFT: begin&#xa;        if( shift_cnt == 8 ) begin&#xa;          shift_cnt &lt;= #`DEL shift_cnt + 1'b1 ;&#xa;          data_reg     &lt;= #`DEL data_reg;&#xa;          ones_reg     &lt;= #`DEL ones_reg;&#xa;          tens_reg     &lt;= #`DEL tens_reg;&#xa;          hundreds_reg &lt;= #`DEL hundreds_reg;&#x9;&#x9;&#x9;&#xa;        end&#xa;        else begin&#xa;          shift_cnt    &lt;= #`DEL shift_cnt + 1'b1;&#xa;          data_reg     &lt;= #`DEL data_reg  &lt;&lt; 1;&#xa;          ones_reg     &lt;= #`DEL {ones_temp[2:0], data_reg[7]};&#xa;          tens_reg     &lt;= #`DEL {tens_temp[2:0], ones_temp[3]};&#xa;          hundreds_reg &lt;= #`DEL {hundreds_temp[2:0], tens_temp[3]};&#xa;        end&#xa;      end&#xa;      DONE: begin&#xa;        tran_done &lt;= #`DEL 1'b1;&#xa;      end&#xa;    endcase &#xa;  end &#xa;end      &#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    ones_out     &lt;= #`DEL 4'b0;&#xa;    tens_out     &lt;= #`DEL 4'b0;&#xa;    hundreds_out &lt;= #`DEL 4'b0;&#xa;  end&#xa;  else if( tran_done ) begin    &#xa;    ones_out     &lt;= #`DEL ones_reg;&#xa;    tens_out     &lt;= #`DEL tens_reg;&#xa;    hundreds_out &lt;= #`DEL hundreds_reg;&#xa;  end&#xa;  else begin    &#xa;    ones_out     &lt;= #`DEL ones_out;&#xa;    tens_out     &lt;= #`DEL tens_out;&#xa;    hundreds_out &lt;= #`DEL hundreds_out;&#xa;  end&#xa;end      &#xa;&#xa;&#xa;assign ones_temp     = ( ones_reg     > 4'd4 ) ? ( ones_reg     + 2'd3 ) : ones_reg;&#xa;assign tens_temp     = ( tens_reg     > 4'd4 ) ? ( tens_reg     + 2'd3 ) : tens_reg;&#xa;assign hundreds_temp = ( hundreds_reg > 4'd4 ) ? ( hundreds_reg + 2'd3 ) : hundreds_reg;&#xa;&#xa;assign hundreds_place = hundreds_out;&#xa;assign tens_place     = tens_out;&#xa;assign ones_place     = ones_out;&#xa;&#xa;&#xa;&#xa;" Parent="led">
  <Port Height="20" Name="clk" Connect="" Side="left" Color="#0000ff" X="-0.0704225" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.124514" Inout="input" Parent="bin_bcd1"/>
  <Port Height="20" Name="rst_n" Connect="" Side="left" Color="#00ffff" X="-0.0704225" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.287938" Inout="input" Parent="bin_bcd1"/>
  <Port Height="20" Name="tran_en" Connect="display_start" Side="left" Color="#8a2be2" X="-0.0704225" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.614786" Inout="input" Parent="bin_bcd1"/>
  <Port Height="20" Name="data_in" Connect="data_in[7:0]" Side="left" Color="#a52a2a" X="-0.0704225" Width="20" Function="" Datatype="wire" Datasize="8" Y="0.451362" Inout="input" Parent="bin_bcd1"/>
  <Port Height="20" Name="tran_done" Connect="" Side="right" Color="#7fff00" X="0.929577" Width="20" Function="" Datatype="reg" Datasize="1" Y="0.124514" Inout="output" Parent="bin_bcd1"/>
  <Port Height="20" Name="hundreds_place" Connect="" Side="right" Color="#5f9ea0" X="0.929577" Width="20" Function="" Datatype="wire" Datasize="4" Y="0.287938" Inout="output" Parent="bin_bcd1"/>
  <Port Height="20" Name="tens_place" Connect="" Side="right" Color="#b8860b" X="0.929577" Width="20" Function="" Datatype="wire" Datasize="4" Y="0.451362" Inout="output" Parent="bin_bcd1"/>
  <Port Height="20" Name="ones_place" Connect="" Side="right" Color="#6495ed" X="0.929577" Width="20" Function="" Datatype="wire" Datasize="4" Y="0.614786" Inout="output" Parent="bin_bcd1"/>
 </Module>
 <Port Height="20" Name="clk" Side="left" Color="#0000ff" X="-0.0222222" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.15" Inout="input" Parent="led"/>
 <Port Height="20" Name="rst_n" Side="left" Color="#00ffff" X="-0.0222222" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.316667" Inout="input" Parent="led"/>
 <Port Height="20" Name="data_in" Side="left" Color="#8a2be2" X="-0.0222222" Width="20" Function="" Datatype="wire" Datasize="9" Y="0.481667" Inout="input" Parent="led"/>
 <Port Height="20" Name="display_en" Side="left" Color="#a52a2a" X="-0.0222222" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.65" Inout="input" Parent="led"/>
 <Port Height="20" Name="led0_out" Side="right" Color="#00bfff" X="0.977778" Width="20" Function="" Datatype="wire" Datasize="4" Y="0.65" Inout="output" Parent="led"/>
 <Port Height="20" Name="led1_out" Side="right" Color="#006400" X="0.977778" Width="20" Function="" Datatype="wire" Datasize="4" Y="0.481667" Inout="output" Parent="led"/>
 <Port Height="20" Name="led2_out" Side="right" Color="#b8860b" X="0.977778" Width="20" Function="" Datatype="wire" Datasize="4" Y="0.316667" Inout="output" Parent="led"/>
 <Port Height="20" Name="led_done" Side="right" Color="#9932cc" X="0.977778" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.15" Inout="output" Parent="led"/>
 <Wire From="led>clk" Name="led_clk" Datatype="wire" Datasize="1" To="led#bin_bcd1>clk" Parent="led"/>
 <Wire From="led>rst_n" Name="led_rst_n" Datatype="wire" Datasize="1" To="led#bin_bcd1>rst_n" Parent="led"/>
 <Wire From="led#bin_bcd1>tran_done" Name="bin_bcd1_tran_done" Datatype="wire" Datasize="1" To="led>led_done" Parent="led"/>
 <Wire From="led#bin_bcd1>hundreds_place" Name="bin_bcd1_hundreds_place" Datatype="wire" Datasize="4" To="led>led2_out" Parent="led"/>
 <Wire From="led#bin_bcd1>tens_place" Name="bin_bcd1_tens_place" Datatype="wire" Datasize="4" To="led>led1_out" Parent="led"/>
 <Wire From="led#bin_bcd1>ones_place" Name="bin_bcd1_ones_place" Datatype="wire" Datasize="4" To="led>led0_out" Parent="led"/>
</Module>
