<!DOCTYPE Robei>
<Module File="Current/uart_top.model" Height="724" Width="1293" Color="#d3d3d3" Parent="0" Name="uart_top" X="68.8647" Type="module" Class="module" Y="171.299" Comment="" Parameters="" Code="`define DEL 1&#xa;&#xa;wire [7:0] key_out;&#xa;wire [7:0] count_out;&#xa;wire       key_pressed;&#xa;wire       count_full;&#xa;&#xa;reg  [7:0] data_send;&#xa;reg        tx_en;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    data_send &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else if( key_pressed ) begin&#xa;    data_send &lt;= #`DEL key_out;&#xa;  end&#xa;  else if( count_full ) begin&#xa;    data_send &lt;= #`DEL count_out;&#xa;  end&#xa;end   &#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    tx_en     &lt;= #`DEL 1'd0;&#xa;  end&#xa;  else begin&#xa;    tx_en     &lt;= #`DEL key_pressed || count_full;&#xa;  end&#xa;end    &#xa;" Include="">
 <Module File="Current/key.model" Height="160" Width="160" Color="#d3d3d3" Parent="uart_top" Name="key1" X="131.729" Type="model" Class="key" Y="132.064" Comment="" Parameters="" Code="`define DEL 1&#xa;&#xa;//&#xa;// Key signal detected&#xa;//&#xa;reg    [3:0] key_in_q;&#xa;wire   [3:0] key_flag;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    key_in_q &lt;= #`DEL 4'b0;&#xa;  end&#xa;  else begin&#xa;    key_in_q &lt;= #`DEL key_in;&#xa;  end&#xa;end      &#xa;assign key_flag = key_in_q &amp; ( ~key_in );&#xa;&#xa;//&#xa;// Delay 20ms&#xa;//&#xa;reg   [19:0] cnt;&#xa;reg   [ 3:0] key_flag_delay;  // Detect key's status after delay 20ms&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    cnt            &lt;= #`DEL 20'd0;&#xa;    key_flag_delay &lt;= #`DEL  4'd0;&#xa;  end&#xa;  else if( cnt == 20'd 999_998 ) begin&#xa;    cnt            &lt;= #`DEL cnt + 20'd1;&#xa;    key_flag_delay &lt;= #`DEL key_flag;&#xa;  end // 20ms&#xa;  else if( cnt == 20'd 999_999 ) begin&#xa;    cnt            &lt;= #`DEL 20'd0;&#xa;    key_flag_delay &lt;= #`DEL 4'd0;&#xa;  end // 20ms&#xa;  else begin&#xa;    cnt            &lt;= #`DEL cnt + 20'd1;&#xa;    key_flag_delay &lt;= #`DEL 4'd0;&#xa;  end&#xa;end&#xa;&#xa;//&#xa;// If key has been pressed, output&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    key_out     &lt;= #`DEL 8'd0;&#xa;    key_pressed &lt;= #`DEL 1'd0;&#xa;  end&#xa;  else begin&#xa;    case( key_flag_delay ) &#xa;      4'b0000: begin&#xa;        key_out     &lt;= #`DEL 8'd0;&#xa;        key_pressed &lt;= #`DEL 1'd0;&#xa;      end // No key pressed&#xa;      4'b0001: begin&#xa;        key_out     &lt;= #`DEL 8'd1;&#xa;        key_pressed &lt;= #`DEL 1'd1;&#xa;      end // The first key's value is 1&#xa;      4'b0010: begin&#xa;        key_out     &lt;= #`DEL 8'd2;&#xa;        key_pressed &lt;= #`DEL 1'd1;&#xa;      end // The second key's value is 2&#xa;      4'b0100: begin&#xa;        key_out     &lt;= #`DEL 8'd3;&#xa;        key_pressed &lt;= #`DEL 1'd1;&#xa;      end // The third key's value is 3&#xa;      4'b1000: begin&#xa;        key_out     &lt;= #`DEL 8'd4;&#xa;        key_pressed &lt;= #`DEL 1'd1;&#xa;      end // The third key's value is 4&#xa;      default: begin&#xa;        key_out     &lt;= #`DEL key_out;&#xa;        key_pressed &lt;= #`DEL 1'd0;&#xa;      end &#xa;    endcase&#xa;  end&#xa;end      &#xa;" Include="">
  <Port Height="20" Function="" Width="20" Color="#0000ff" Parent="key1" Name="clk" X="-0.125" Side="left" Y="0.1375" Connect="" Inout="input" Datatype="wire" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#00ffff" Parent="key1" Name="rst_n" X="-0.125" Side="left" Y="0.3375" Connect="" Inout="input" Datatype="wire" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#8a2be2" Parent="key1" Name="key_in" X="-0.125" Side="left" Y="0.5375" Connect="" Inout="input" Datatype="wire" Datasize="4"/>
  <Port Height="20" Function="" Width="20" Color="#a52a2a" Parent="key1" Name="key_out" X="0.875" Side="right" Y="0.1875" Connect="key_out" Inout="output" Datatype="reg" Datasize="8"/>
  <Port Height="20" Function="" Width="20" Color="#ff7f50" Parent="key1" Name="key_pressed" X="0.875" Side="right" Y="0.4375" Connect="key_pressed" Inout="output" Datatype="reg" Datasize="1"/>
 </Module>
 <Module File="Current/division_duty.model" Height="160" Width="160" Color="#d3d3d3" Parent="uart_top" Name="division_duty1" X="957.343" Type="model" Class="division_duty" Y="152.848" Comment="" Parameters="" Code="`define DEL 1&#xa;&#xa;//&#xa;// There should be two datas to control frequency division and duty seperately&#xa;// The first data is to control the division, while the second control the duty&#xa;//&#xa;reg [7:0] division;&#xa;reg [7:0] duty_num;&#xa;&#xa;//&#xa;// Detect the rising edge of data_en&#xa;reg     data_en_q;&#xa;wire    data_en_flag;&#xa;reg     cnt_div_duty;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    data_en_q &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    data_en_q &lt;= #`DEL data_en;&#xa;  end&#xa;end&#xa;assign data_en_flag = ( data_en_q ) &amp;&amp; ( ~data_en );&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    division     &lt;= #`DEL 8'd0;&#xa;    duty_num     &lt;= #`DEL 8'd0;&#xa;    cnt_div_duty &lt;= #`DEL 1'd1;&#xa;  end&#xa;  else if( data_en_flag ) begin&#xa;    case( cnt_div_duty )&#xa;      1:begin&#xa;        division     &lt;= #`DEL data_in[7:0];&#xa;        duty_num     &lt;= #`DEL duty_num;&#xa;        cnt_div_duty &lt;= #`DEL cnt_div_duty + 1'b1;&#xa;      end&#xa;      0:begin&#xa;        division     &lt;= #`DEL division;&#xa;        duty_num     &lt;= #`DEL data_in[7:0];&#xa;        cnt_div_duty &lt;= #`DEL cnt_div_duty + 1'b1;&#xa;      end&#xa;    endcase&#xa;  end&#xa;end &#xa;&#xa;//&#xa;// Parity check&#xa;//&#xa;always @( posedge clk ) begin&#xa;  if( data_in[8] != ^data_in[7:0] ) begin&#xa;    $display(&quot;Uart communication error!&quot;);&#xa;    $stop;&#xa;  end&#xa;end      &#xa;&#xa;&#xa;//&#xa;// Even division, which duty is 50%&#xa;//&#xa;reg           clk_even;&#xa;wire          clk_out_div;&#xa;reg     [7:0] cnt_even;&#xa;wire    [7:0] division_even;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    cnt_even &lt;= #`DEL 8'd0;&#xa;    clk_even &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else if( division[0]==1 || ~cnt_div_duty ) begin&#xa;    cnt_even &lt;= #`DEL 8'd0;&#xa;    clk_even &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    if( division[7:0] == 8'd0 ) begin    &#xa;      cnt_even &lt;= #`DEL 8'd0;&#xa;    end&#xa;    else if( cnt_even == ( division_even - 1 ) ) begin&#xa;      cnt_even &lt;= #`DEL 8'd0;&#xa;      clk_even &lt;= #`DEL ~clk_even;&#xa;    end&#xa;    else begin&#xa;      cnt_even &lt;= #`DEL cnt_even + 8'd1;&#xa;      clk_even &lt;= #`DEL clk_even;&#xa;    end&#xa;  end&#xa;end     &#xa;&#xa;assign division_even = ( division[0] == 0 ) ? ( division[7:0] >> 1 ) : 0;&#xa;&#xa;//&#xa;// Odd division, which duty is 50%&#xa;//&#xa;reg         clk_p;&#xa;reg         clk_n;&#xa;wire        clk_odd;&#xa;reg   [7:0] cnt_p;&#xa;reg   [7:0] cnt_n;&#xa;wire  [7:0] division_odd;&#xa;&#xa;//&#xa;// Rising edge&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    clk_p &lt;= #`DEL 1'b0;&#xa;    cnt_p &lt;= #`DEL 8'b0;&#xa;  end&#xa;  else if( division[0]==0 || ~cnt_div_duty ) begin    &#xa;    clk_p &lt;= #`DEL 1'b0;&#xa;    cnt_p &lt;= #`DEL 8'b0;&#xa;  end&#xa;  else begin&#xa;    if( cnt_p == division_odd - 1 ) begin&#xa;      clk_p &lt;= #`DEL ~clk_p;&#xa;      cnt_p &lt;= #`DEL 8'b0;&#xa;    end&#xa;    else if( cnt_p == ( ( division[7:0] - 1 ) >> 1 ) )begin&#xa;      clk_p &lt;= #`DEL ~clk_p;&#xa;      cnt_p &lt;= #`DEL cnt_p + 8'b1;&#xa;    end&#xa;    else begin&#xa;      clk_p &lt;= #`DEL clk_p;&#xa;      cnt_p &lt;= #`DEL cnt_p + 8'b1;&#xa;    end&#xa;  end&#xa;end      &#xa;&#xa;//&#xa;// Falling edge&#xa;always @( negedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    clk_n &lt;= #`DEL 1'b0;&#xa;    cnt_n &lt;= #`DEL 8'b0;&#xa;  end&#xa;  else if( division[0]==0 || ~cnt_div_duty ) begin    &#xa;    clk_n &lt;= #`DEL 1'b0;&#xa;    cnt_n &lt;= #`DEL 8'b0;&#xa;  end&#xa;  else begin&#xa;    if( cnt_n == division_odd - 1 ) begin&#xa;      clk_n &lt;= #`DEL ~clk_n;&#xa;      cnt_n &lt;= #`DEL 8'b0;&#xa;    end&#xa;    else if( cnt_n == ( ( division[7:0] - 1 ) >> 1 ) )begin&#xa;      clk_n &lt;= #`DEL ~clk_n;&#xa;      cnt_n &lt;= #`DEL cnt_n + 8'b1;&#xa;    end&#xa;    else begin&#xa;      clk_n &lt;= #`DEL clk_n;&#xa;      cnt_n &lt;= #`DEL cnt_n + 8'b1;&#xa;    end&#xa;  end&#xa;end     &#xa;&#xa;&#xa;assign division_odd = ( division[0] == 1 ) ? division[7:0] : 0;&#xa;assign clk_odd = clk_n | clk_p;&#xa;&#xa;assign clk_out_div = ( division[0] == 1 ) ? clk_odd : clk_even;&#xa;&#xa;//&#xa;// Duty&#xa;//&#xa;reg [7:0] cnt_duty; // Used in duty generate&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    cnt_duty &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else if( ( duty_num == (division[7:0]>>1) ) || cnt_duty_flag || ~cnt_div_duty ) begin&#xa;    // If duty is half of division[7:0] that means duty is 50%,&#xa;    // use clk_div as clk_out&#xa;    // If cnt_duty_flag is 1, then count begin from 0&#xa;    cnt_duty &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else if( cnt_duty == division[7:0] )begin&#xa;    cnt_duty &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else begin&#xa;    cnt_duty &lt;= #`DEL cnt_duty + 8'd1;&#xa;  end&#xa;end      &#xa;&#xa;//&#xa;// Attention: duty_num is an input signal, which is equal to duty(%) * division&#xa;reg clk_out_duty;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    clk_out_duty &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else if( duty_num == (division[7:0]>>1) || cnt_duty_flag || ~cnt_div_duty ) begin&#xa;    clk_out_duty &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else if( cnt_duty &lt; duty_num )begin&#xa;    clk_out_duty &lt;= #`DEL 1'b1;&#xa;  end&#xa;  else begin&#xa;    clk_out_duty &lt;= #`DEL 1'b0;&#xa;  end&#xa;end      &#xa;&#xa;// While duty_num is half of division which means duty is 50%, clk_out is generated by the first method that is more accurate than the second method&#xa;// While duty is not 50%,clk_out is generated by the 2nd way which duty is variable&#xa;assign clk_out = ( duty_num == (division[7:0]>>1) || duty_num == 0 ) ? clk_out_div : clk_out_duty;&#xa;&#xa;//&#xa;// Detect the change of duty_num and division&#xa;//&#xa;reg [7:0]  duty_num_temp;&#xa;reg [7:0]  division_temp;&#xa;reg        duty_num_flag;&#xa;reg        division_flag;&#xa;reg        cnt_duty_flag;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    duty_num_temp &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else begin&#xa;    duty_num_temp &lt;= #`DEL duty_num;&#xa;  end&#xa;end      &#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    division_temp &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else begin&#xa;    division_temp &lt;= #`DEL division;&#xa;  end&#xa;end &#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    duty_num_flag &lt;= #`DEL 1'd0;&#xa;    division_flag &lt;= #`DEL 1'd0;&#xa;  end&#xa;  else if( duty_num_temp != duty_num )begin&#xa;    duty_num_flag &lt;= #`DEL 1'd1;&#xa;  end&#xa;  else if( division_temp != division )begin&#xa;    division_flag &lt;= #`DEL 1'd1;&#xa;  end&#xa;  else begin &#xa;    duty_num_flag &lt;= #`DEL 1'd0;&#xa;    division_flag &lt;= #`DEL 1'd0;&#xa;  end&#xa;end      &#xa;&#xa;//&#xa;// Generate the start counting signal of cnt_duty. If cnt_duty_flag is 1, which means division or duty_num has changed, then cnt_duty start count from 0 again&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    cnt_duty_flag &lt;= #`DEL 1'd0;&#xa;  end&#xa;  else if( duty_num_flag || division_flag )begin&#xa;    cnt_duty_flag &lt;= #`DEL 1'd1;&#xa;  end&#xa;  else begin&#xa;    cnt_duty_flag &lt;= #`DEL 1'd0;&#xa;  end&#xa;end &#xa;&#xa;" Include="">
  <Port Height="20" Function="" Width="20" Color="#0000ff" Parent="division_duty1" Name="clk" X="-0.125" Side="left" Y="0.1" Connect="" Inout="input" Datatype="wire" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#00ffff" Parent="division_duty1" Name="rst_n" X="-0.125" Side="left" Y="0.2625" Connect="" Inout="input" Datatype="wire" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#a52a2a" Parent="division_duty1" Name="clk_out" X="0.875" Side="right" Y="0.26875" Connect="" Inout="output" Datatype="wire" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#7fff00" Parent="division_duty1" Name="data_in" X="-0.125" Side="left" Y="0.5875" Connect="" Inout="input" Datatype="wire" Datasize="9"/>
  <Port Height="20" Function="" Width="20" Color="#f5f5dc" Parent="division_duty1" Name="data_en" X="-0.125" Side="left" Y="0.425" Connect="" Inout="input" Datatype="wire" Datasize="1"/>
 </Module>
 <Module File="Current/uart.model" Height="242" Width="254" Color="#d3d3d3" Parent="uart_top" Name="uart1" X="500.566" Type="model" Class="uart" Y="279.469" Comment="" Parameters="" Code="`define DEL 1&#xa;&#xa;//&#xa;// This block is used to receive data&#xa;//&#xa;reg         rx_q;&#xa;wire        rx_start;&#xa;reg  [7:0]  rx_cnt;&#xa;reg         rx_cnt_en;&#xa;&#xa;// &#xa;// Edge deteted&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    rx_q &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    rx_q &lt;= #`DEL rx;&#xa;  end&#xa;end      &#xa;// Falling edge effective&#xa;assign rx_start = ( rx_q &amp;&amp; ~rx );&#xa;&#xa;//&#xa;// Generate the count enable signal &#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    rx_cnt_en &lt;= #`DEL 1'b0;&#xa;  end&#xa;  //&#xa;  // Count enable&#xa;  else if( rx_start ) begin&#xa;    rx_cnt_en &lt;= #`DEL 1'b1;&#xa;  end&#xa;  //&#xa;  // Count disable&#xa;  else if( rx_cnt == 8'd168 ) begin&#xa;    rx_cnt_en &lt;= #`DEL 1'b0;&#xa;  end&#xa;end     &#xa;&#xa;//&#xa;// Frequence division&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if ( ~rst_n ) begin&#xa;    rx_cnt &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else if ( rx_cnt_en ) begin&#xa;    rx_cnt &lt;= #`DEL rx_cnt + 8'b1;&#xa;  end&#xa;  else begin&#xa;    rx_cnt &lt;= #`DEL 8'b0;&#xa;  end&#xa;end&#xa;&#xa;//&#xa;// FSM&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    data_received &lt;= #`DEL 9'b0;&#xa;    rx_buf_full   &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else if( rx_cnt_en ) begin&#xa;    case( rx_cnt ) &#xa;      8'd24: begin&#xa;        data_received[0] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end  // Least significant bit&#xa;      8'd40: begin&#xa;        data_received[1] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd56: begin&#xa;        data_received[2] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd72: begin&#xa;        data_received[3] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd88: begin&#xa;        data_received[4] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd104: begin&#xa;        data_received[5] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd120: begin&#xa;        data_received[6] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd136: begin&#xa;        data_received[7] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end  // Most significant bit&#xa;      8'd152: begin&#xa;        data_received[8] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end  // Parity check&#xa;      8'd168: begin&#xa;        rx_buf_full      &lt;= #`DEL 1'b1;&#xa;      end  // Stop bit&#xa;    endcase&#xa;  end// Least significant bit&#xa;end      &#xa;&#xa;//&#xa;// This block is used to transmit data&#xa;//&#xa;reg         tx_en_q;&#xa;wire        tx_start;&#xa;reg  [7:0]  tx_cnt;&#xa;reg         tx_cnt_en;&#xa;reg  [8:0]  shift_reg;&#xa;&#xa;// &#xa;// Edge deteted&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    tx_en_q &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    tx_en_q &lt;= #`DEL tx_en;&#xa;  end&#xa;end      &#xa;// Rising edge effective&#xa;assign tx_start = ( ~tx_en_q &amp;&amp; tx_en );&#xa;&#xa;//&#xa;// Transmit data_send to shift_reg&#xa;//&#xa;always @( posedge tx_start or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    shift_reg &lt;= #`DEL 9'd0;&#xa;  end&#xa;  else begin&#xa;    shift_reg[7:0] &lt;= #`DEL data_send;&#xa;    //&#xa;    // Parity check bit, even parity&#xa;    shift_reg[8]   &lt;= #`DEL ( ^data_send ) ? 1 : 0;   &#xa;  end&#xa;end      &#xa;&#xa;//&#xa;// Generate the count enable signal &#xa;// Generate the tx_buf_full signal which means shift_reg is not empty&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    tx_cnt_en   &lt;= #`DEL 1'b0;&#xa;    tx_buf_full &lt;= #`DEL 1'b0;&#xa;  end&#xa;  //&#xa;  // Count enable&#xa;  else if( tx_start ) begin&#xa;    tx_cnt_en   &lt;= #`DEL 1'b1;&#xa;    tx_buf_full &lt;= #`DEL 1'b1;&#xa;  end&#xa;  //&#xa;  // Count disable&#xa;  else if( tx_cnt == 8'd176 ) begin&#xa;    tx_cnt_en   &lt;= #`DEL 1'b0;&#xa;    tx_buf_full &lt;= #`DEL 1'b0;&#xa;  end&#xa;end     &#xa;&#xa;//&#xa;// Frequence division&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if ( ~rst_n ) begin&#xa;    tx_cnt &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else if ( tx_cnt_en ) begin&#xa;    tx_cnt &lt;= #`DEL tx_cnt + 8'b1;&#xa;  end&#xa;  else begin&#xa;    tx_cnt &lt;= #`DEL 8'b0;&#xa;  end&#xa;end&#xa;&#xa;//&#xa;// FSM&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    tx &lt;= #`DEL 1'b1;&#xa;  end&#xa;  else if( tx_cnt_en ) begin&#xa;    case( tx_cnt ) &#xa;      8'd0: begin&#xa;        tx &lt;= #`DEL 1'b0;&#xa;      end  // Start signal&#xa;      8'd16: begin&#xa;        tx &lt;= #`DEL shift_reg[0];&#xa;      end  // Least significant bit&#xa;      8'd32: begin&#xa;        tx &lt;= #`DEL shift_reg[1];&#xa;      end&#xa;      8'd48: begin&#xa;        tx &lt;= #`DEL shift_reg[2];&#xa;      end&#xa;      8'd64: begin&#xa;        tx &lt;= #`DEL shift_reg[3];&#xa;      end&#xa;      8'd80: begin&#xa;        tx &lt;= #`DEL shift_reg[4];&#xa;      end&#xa;      8'd96: begin&#xa;        tx &lt;= #`DEL shift_reg[5];&#xa;      end&#xa;      8'd112: begin&#xa;        tx &lt;= #`DEL shift_reg[6];&#xa;      end  &#xa;      8'd128: begin&#xa;        tx &lt;= #`DEL shift_reg[7];&#xa;      end  // Most significant bit&#xa;      8'd144: begin&#xa;        tx &lt;= #`DEL shift_reg[8];&#xa;      end  // Parity check      &#xa;      8'd160: begin&#xa;        tx &lt;= #`DEL 1'b1;&#xa;      end  // Stop bit&#xa;    endcase&#xa;  end&#xa;end      &#xa;" Include="">
  <Port Height="20" Function="" Width="20" Color="#00ffff" Parent="uart1" Name="clk" X="-0.0787402" Side="left" Y="0.0991736" Connect="" Inout="input" Datatype="wire" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#7fffd4" Parent="uart1" Name="rst_n" X="-0.0787402" Side="left" Y="0.239669" Connect="" Inout="input" Datatype="wire" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#0000ff" Parent="uart1" Name="rx" X="-0.0787402" Side="left" Y="0.380165" Connect="" Inout="input" Datatype="wire" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#8a2be2" Parent="uart1" Name="tx_en" X="-0.0787402" Side="left" Y="0.520661" Connect="tx_en" Inout="input" Datatype="wire" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#a52a2a" Parent="uart1" Name="data_send" X="-0.0787402" Side="left" Y="0.661157" Connect="data_send" Inout="input" Datatype="wire" Datasize="8"/>
  <Port Height="20" Function="" Width="20" Color="#5f9ea0" Parent="uart1" Name="tx_buf_full" X="0.92126" Side="right" Y="0.123967" Connect="" Inout="output" Datatype="reg" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#b8860b" Parent="uart1" Name="rx_buf_full" X="0.92126" Side="right" Y="0.289256" Connect="" Inout="output" Datatype="reg" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#7fff00" Parent="uart1" Name="tx" X="0.92126" Side="right" Y="0.454545" Connect="" Inout="output" Datatype="reg" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#ff8c00" Parent="uart1" Name="data_received" X="0.92126" Side="right" Y="0.619835" Connect="" Inout="output" Datatype="reg" Datasize="9"/>
 </Module>
 <Module File="Current/countdown.model" Height="160" Width="160" Color="#d3d3d3" Parent="uart_top" Name="countdown1" X="188.309" Type="model" Class="countdown" Y="509.652" Comment="" Parameters="" Code="`define DEL 1&#xa;&#xa;//&#xa;// Count enable edge detected&#xa;//&#xa;reg     count_en_q;&#xa;reg     count_en_start;&#xa;wire    count_en_flag;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    count_en_q &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    count_en_q &lt;= #`DEL count_en;&#xa;  end&#xa;end&#xa;assign count_en_flag = ~count_en_q &amp;&amp; ( count_en );&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    count_en_start &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else if( count_en_flag )begin&#xa;    count_en_start &lt;= #`DEL 1'b1;&#xa;  end&#xa;  else if( count == 8'd99 ) begin&#xa;    count_en_start &lt;= #`DEL 1'b0;&#xa;  end&#xa;end      &#xa;&#xa;&#xa;//&#xa;// Tx_done edge detected&#xa;// Tx_done signal comes from uart unit, while uart transmit one data done, begining next count &#xa;//&#xa;reg     tx_done_q;&#xa;wire    tx_done_n;&#xa;wire    tx_done_flag;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    tx_done_q &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    tx_done_q &lt;= #`DEL tx_done_n;&#xa;  end&#xa;end&#xa;assign tx_done_n = ~tx_done;&#xa;assign tx_done_flag = ~tx_done_q &amp;&amp; ( tx_done_n );&#xa;&#xa;//&#xa;// Countdown and output&#xa;//&#xa;reg [7:0] count;&#xa;   &#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    count      &lt;= #`DEL 8'd0;&#xa;    count_full &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else if( count_en_flag ) begin&#xa;    count &lt;= #`DEL 1'b0;&#xa;    count_full &lt;= #`DEL 1'b1;&#xa;  end&#xa;  else if( count_en_start ) begin&#xa;    if( tx_done_flag ) begin&#xa;      if( count == 8'd99 )begin&#xa;        count      &lt;= #`DEL 8'd0;&#xa;        count_full &lt;= #`DEL 1'b0;&#xa;      end&#xa;      else begin&#xa;        count      &lt;= #`DEL count + 1;&#xa;        count_full &lt;= #`DEL 1'b1;&#xa;      end&#xa;    end     &#xa;    else begin&#xa;      count      &lt;= #`DEL count;&#xa;      count_full &lt;= #`DEL 1'b0;&#xa;    end&#xa;  end  &#xa;  else begin&#xa;    count      &lt;= #`DEL count;&#xa;    count_full &lt;= #`DEL 1'b0;&#xa;  end&#xa;end&#xa;&#xa;assign count_out  =  count;" Include="">
  <Port Height="20" Function="" Width="20" Color="#0000ff" Parent="countdown1" Name="clk" X="-0.125" Side="left" Y="0.1375" Connect="" Inout="input" Datatype="wire" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#00ffff" Parent="countdown1" Name="rst_n" X="-0.125" Side="left" Y="0.3375" Connect="" Inout="input" Datatype="wire" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#8a2be2" Parent="countdown1" Name="count_en" X="-0.125" Side="left" Y="0.5375" Connect="" Inout="input" Datatype="wire" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#d2691e" Parent="countdown1" Name="tx_done" X="0.875" Side="right" Y="0.5375" Connect="" Inout="input" Datatype="wire" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#a52a2a" Parent="countdown1" Name="count_full" X="0.875" Side="right" Y="0.3375" Connect="count_full" Inout="output" Datatype="reg" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#7fff00" Parent="countdown1" Name="count_out" X="0.875" Side="right" Y="0.1375" Connect="count_out" Inout="output" Datatype="wire" Datasize="8"/>
 </Module>
 <Module File="Current/led.model" Height="160" Width="160" Color="#d3d3d3" Parent="uart_top" Name="led1" X="925.011" Type="model" Class="led" Y="486.558" Comment="" Parameters="" Code="`define DEL 1&#xa;//&#xa;// LED display start signal&#xa;//&#xa;reg  display_en_q;&#xa;wire display_start;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    display_en_q &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    display_en_q &lt;= #`DEL display_en;&#xa;  end&#xa;end      &#xa;// Rising edge effective&#xa;assign display_start = ~display_en_q &amp;&amp; display_en;&#xa;&#xa;//&#xa;// Parity check&#xa;//&#xa;always @( posedge clk ) begin&#xa;  if( data_in[8] != ( ^data_in[7:0] ) ) begin&#xa;    $display(&quot;Parity check failed.&quot;);&#xa;    $stop;&#xa;  end&#xa;end  &#xa;&#xa;" Include="">
  <Port Height="20" Function="" Width="20" Color="#0000ff" Parent="led1" Name="clk" X="-0.125" Side="left" Y="0.1" Connect="" Inout="input" Datatype="wire" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#00ffff" Parent="led1" Name="rst_n" X="-0.125" Side="left" Y="0.2625" Connect="" Inout="input" Datatype="wire" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#8a2be2" Parent="led1" Name="data_in" X="-0.125" Side="left" Y="0.5875" Connect="" Inout="input" Datatype="wire" Datasize="9"/>
  <Port Height="20" Function="" Width="20" Color="#a52a2a" Parent="led1" Name="display_en" X="-0.125" Side="left" Y="0.425" Connect="" Inout="input" Datatype="wire" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#9932cc" Parent="led1" Name="led_done" X="0.875" Side="right" Y="0.1" Connect="" Inout="output" Datatype="wire" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#00bfff" Parent="led1" Name="led0_out" X="0.875" Side="right" Y="0.425" Connect="" Inout="output" Datatype="wire" Datasize="4"/>
  <Port Height="20" Function="" Width="20" Color="#006400" Parent="led1" Name="led1_out" X="0.875" Side="right" Y="0.2625" Connect="" Inout="output" Datatype="wire" Datasize="4"/>
  <Port Height="20" Function="" Width="20" Color="#b8860b" Parent="led1" Name="led2_out" X="0.875" Side="right" Y="0.5875" Connect="" Inout="output" Datatype="wire" Datasize="4"/>
 </Module>
 <Module File="System/orgate.model" Height="81" Width="76" Color="#ff7f50" Parent="uart_top" Name="or1" X="1171.39" Type="model" Class="orgate" Y="108.055" Comment="Basic or operation like y=a|b." Parameters="" Code="assign y = a | b;" Include="">
  <Port Height="20" Function="1 bit input" Width="20" Color="#8b4513" Parent="or1" Name="a" X="-0.263158" Side="left" Y="0.209877" Connect="" Inout="input" Datatype="wire" Datasize="1"/>
  <Port Height="20" Function="1 bit input" Width="20" Color="#dda0dd" Parent="or1" Name="b" X="0.736842" Side="right" Y="0.37037" Connect="" Inout="input" Datatype="wire" Datasize="1"/>
  <Port Height="20" Function="1 bit output" Width="20" Color="#800080" Parent="or1" Name="y" X="0.736842" Side="right" Y="0.123457" Connect="" Inout="output" Datatype="wire" Datasize="1"/>
 </Module>
 <Port Height="20" Function="" Width="20" Color="#0000ff" Parent="uart_top" Name="clk" X="-0.0154679" Side="left" Y="0.128453" Inout="input" Datatype="wire" Datasize="1"/>
 <Port Height="20" Function="" Width="20" Color="#00ffff" Parent="uart_top" Name="rst_n" X="-0.0154679" Side="left" Y="0.270718" Inout="input" Datatype="wire" Datasize="1"/>
 <Port Height="20" Function="" Width="20" Color="#7fffd4" Parent="uart_top" Name="key_in" X="-0.0154679" Side="left" Y="0.412983" Inout="input" Datatype="wire" Datasize="4"/>
 <Port Height="20" Function="" Width="20" Color="#bdb76b" Parent="uart_top" Name="tx" X="0.984532" Side="right" Y="0.270718" Inout="output" Datatype="wire" Datasize="1"/>
 <Port Height="20" Function="" Width="20" Color="#556b2f" Parent="uart_top" Name="count_enable" X="-0.0154679" Side="left" Y="0.697514" Inout="input" Datatype="wire" Datasize="1"/>
 <Port Height="20" Function="" Width="20" Color="#ffe4c4" Parent="uart_top" Name="tx_buf_full" X="0.984532" Side="right" Y="0.128453" Inout="output" Datatype="wire" Datasize="1"/>
 <Port Height="20" Function="" Width="20" Color="#b8860b" Parent="uart_top" Name="rx" X="-0.0154679" Side="left" Y="0.555249" Inout="input" Datatype="wire" Datasize="1"/>
 <Port Height="20" Function="" Width="20" Color="#1e90ff" Parent="uart_top" Name="led0_out" X="0.984532" Side="right" Y="0.697514" Inout="output" Datatype="wire" Datasize="4"/>
 <Port Height="20" Function="" Width="20" Color="#8b0000" Parent="uart_top" Name="led1_out" X="0.984532" Side="right" Y="0.555249" Inout="output" Datatype="wire" Datasize="4"/>
 <Port Height="20" Function="" Width="20" Color="#8a2be2" Parent="uart_top" Name="clk_out" X="0.984532" Side="right" Y="0.412983" Inout="output" Datatype="wire" Datasize="1"/>
 <Wire From="uart_top>clk" Parent="uart_top" Name="uart_top_clk" To="uart_top#key1>clk" Datatype="wire" Datasize="1"/>
 <Wire From="uart_top>clk" Parent="uart_top" Name="uart_top_clk" To="uart_top#countdown1>clk" Datatype="wire" Datasize="1"/>
 <Wire From="uart_top>clk" Parent="uart_top" Name="uart_top_clk" To="uart_top#uart1>clk" Datatype="wire" Datasize="1"/>
 <Wire From="uart_top>clk" Parent="uart_top" Name="uart_top_clk" To="uart_top#division_duty1>clk" Datatype="wire" Datasize="1"/>
 <Wire From="uart_top>clk" Parent="uart_top" Name="uart_top_clk" To="uart_top#led1>clk" Datatype="wire" Datasize="1"/>
 <Wire From="uart_top>rst_n" Parent="uart_top" Name="uart_top_rst_n" To="uart_top#key1>rst_n" Datatype="wire" Datasize="1"/>
 <Wire From="uart_top>rst_n" Parent="uart_top" Name="uart_top_rst_n" To="uart_top#countdown1>rst_n" Datatype="wire" Datasize="1"/>
 <Wire From="uart_top>rst_n" Parent="uart_top" Name="uart_top_rst_n" To="uart_top#division_duty1>rst_n" Datatype="wire" Datasize="1"/>
 <Wire From="uart_top>rst_n" Parent="uart_top" Name="uart_top_rst_n" To="uart_top#uart1>rst_n" Datatype="wire" Datasize="1"/>
 <Wire From="uart_top>rst_n" Parent="uart_top" Name="uart_top_rst_n" To="uart_top#led1>rst_n" Datatype="wire" Datasize="1"/>
 <Wire From="uart_top>key_in" Parent="uart_top" Name="uart_top_key_in" To="uart_top#key1>key_in" Datatype="wire" Datasize="4"/>
 <Wire From="uart_top>rx" Parent="uart_top" Name="uart_top_rx" To="uart_top#uart1>rx" Datatype="wire" Datasize="1"/>
 <Wire From="uart_top>count_enable" Parent="uart_top" Name="uart_top_count_enable" To="uart_top#countdown1>count_en" Datatype="wire" Datasize="1"/>
 <Wire From="uart_top#countdown1>tx_done" Parent="uart_top" Name="uart1_tx_buf_full" To="uart_top#uart1>tx_buf_full" Datatype="wire" Datasize="1"/>
 <Wire From="uart_top#uart1>tx" Parent="uart_top" Name="uart1_tx" To="uart_top>tx" Datatype="wire" Datasize="1"/>
 <Wire From="uart_top#uart1>data_received" Parent="uart_top" Name="uart1_data_received" To="uart_top#division_duty1>data_in" Datatype="wire" Datasize="9"/>
 <Wire From="uart_top#uart1>rx_buf_full" Parent="uart_top" Name="uart1_rx_buf_full" To="uart_top#division_duty1>data_en" Datatype="wire" Datasize="1"/>
 <Wire From="uart_top#uart1>data_received" Parent="uart_top" Name="uart1_data_received" To="uart_top#led1>data_in" Datatype="wire" Datasize="9"/>
 <Wire From="uart_top#uart1>rx_buf_full" Parent="uart_top" Name="uart1_rx_buf_full" To="uart_top#led1>display_en" Datatype="wire" Datasize="1"/>
 <Wire From="uart_top#division_duty1>clk_out" Parent="uart_top" Name="division_duty1_clk_out" To="uart_top>clk_out" Datatype="wire" Datasize="1"/>
 <Wire From="uart_top#led1>led0_out" Parent="uart_top" Name="led1_led0_out" To="uart_top>led0_out" Datatype="wire" Datasize="4"/>
 <Wire From="uart_top#led1>led1_out" Parent="uart_top" Name="led1_led1_out" To="uart_top>led1_out" Datatype="wire" Datasize="4"/>
 <Wire From="uart_top#uart1>tx_buf_full" Parent="uart_top" Name="uart1_tx_buf_full" To="uart_top#or1>a" Datatype="wire" Datasize="1"/>
 <Wire From="uart_top#led1>led_done" Parent="uart_top" Name="led1_led_done" To="uart_top#or1>b" Datatype="wire" Datasize="1"/>
 <Wire From="uart_top#or1>y" Parent="uart_top" Name="or1_y" To="uart_top>tx_buf_full" Datatype="wire" Datasize="1"/>
</Module>
