<!DOCTYPE Robei>
<Module File="Current/key.model" Name="key" Parameters="" Include="" Class="module" Code="`define DEL 1&#xa;&#xa;//&#xa;// Key signal detected&#xa;//&#xa;reg    [3:0] key_in_q;  // Last status&#xa;reg    [3:0] key_in_n;  // Now status&#xa;wire   [3:0] key_in_flag;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    key_in_q &lt;= #`DEL 4'b1111;&#xa;    key_in_n &lt;= #`DEL 4'b1111;&#xa;  end&#xa;  else begin&#xa;    key_in_n &lt;= #`DEL key_in;&#xa;    key_in_q &lt;= #`DEL key_in_n;&#xa;  end&#xa;end      &#xa;assign key_in_flag = key_in_q &amp; ( ~key_in_n );&#xa;&#xa;//&#xa;// Delay 20ms&#xa;//&#xa;reg   [ 11:0] cnt;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    cnt &lt;= #`DEL 12'd0;&#xa;  end&#xa;  else if( key_in_flag ) begin&#xa;    cnt &lt;= #`DEL 12'd0;&#xa;  end&#xa;  else begin&#xa;    cnt &lt;= #`DEL cnt + 1'b1;&#xa;  end&#xa;end&#xa;&#xa;//&#xa;// Detect if key was pressed after delay 20ms, if pressed then generate key_flag_start signal&#xa;//&#xa;reg   [  3:0]  key_flag_q; // Last status&#xa;reg   [  3:0]  key_flag_n; // Now status&#xa;wire  [  3:0]  key_flag_start;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    key_flag_n &lt;= #`DEL 4'b1111;&#xa;  end&#xa;  else if( cnt == 3076 ) begin&#xa;    key_flag_n &lt;= #`DEL key_in;&#xa;  end&#xa;end&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    key_flag_q &lt;= #`DEL 4'b1111;&#xa;  end&#xa;  else begin&#xa;    key_flag_q &lt;= #`DEL key_flag_n;&#xa;  end&#xa;end      &#xa;&#xa;assign key_flag_start = key_flag_q &amp; ( ~key_flag_n );&#xa;&#xa;&#xa;//&#xa;// If key has been pressed, output&#xa;//&#xa;reg [6:0] key_out_temp;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    key_out_temp     &lt;= #`DEL 7'd0;&#xa;    key_pressed &lt;= #`DEL 1'd0;&#xa;  end&#xa;  else if( key_flag_start ) begin&#xa;    case( key_in ) &#xa;      4'b1111: begin&#xa;        key_out_temp     &lt;= #`DEL 7'h0;&#xa;        key_pressed &lt;= #`DEL 1'd0;&#xa;      end // No key pressed&#xa;      4'b1110: begin&#xa;        key_out_temp     &lt;= #`DEL 7'h06;&#xa;        key_pressed &lt;= #`DEL 1'd1;&#xa;      end // The first key's value is 1&#xa;      4'b1101: begin&#xa;        key_out_temp     &lt;= #`DEL 7'h5b;&#xa;        key_pressed &lt;= #`DEL 1'd1;&#xa;      end // The second key's value is 2&#xa;      4'b1011: begin&#xa;        key_out_temp     &lt;= #`DEL 7'h4f;&#xa;        key_pressed &lt;= #`DEL 1'd1;&#xa;      end // The third key's value is 3&#xa;      4'b0111: begin&#xa;        key_out_temp     &lt;= #`DEL 7'h66;&#xa;        key_pressed &lt;= #`DEL 1'd1;&#xa;      end // The third key's value is 4&#xa;      default: begin&#xa;        key_out_temp     &lt;= #`DEL key_out_temp;&#xa;        key_pressed &lt;= #`DEL 1'd0;&#xa;      end &#xa;    endcase&#xa;  end&#xa;  else begin&#xa;    key_pressed &lt;= #`DEL 1'd0;&#xa;  end&#xa;end  &#xa;&#xa;assign key_out = {2'b00,key_out_temp};" Comment="" Type="module" Width="900" Height="600" X="0" Color="#d3d3d3" Y="0" Parent="0">
 <Port Side="left" Name="clk" Datatype="wire" Datasize="1" Width="20" Height="20" X="-0.0222222" Inout="input" Function="" Color="#0000ff" Y="0.183333" Parent="key"/>
 <Port Side="left" Name="rst_n" Datatype="wire" Datasize="1" Width="20" Height="20" X="-0.0222222" Inout="input" Function="" Color="#00ffff" Y="0.383333" Parent="key"/>
 <Port Side="left" Name="key_in" Datatype="wire" Datasize="4" Width="20" Height="20" X="-0.0222222" Inout="input" Function="" Color="#8a2be2" Y="0.583333" Parent="key"/>
 <Port Side="right" Name="key_out" Datatype="wire" Datasize="9" Width="20" Height="20" X="0.977778" Inout="output" Function="" Color="#a52a2a" Y="0.233333" Parent="key"/>
 <Port Side="right" Name="key_pressed" Datatype="reg" Datasize="1" Width="20" Height="20" X="0.977778" Inout="output" Function="" Color="#ff7f50" Y="0.483333" Parent="key"/>
</Module>
