<!DOCTYPE Robei>
<Module Code="`define DEL 1&#xa;&#xa;//&#xa;// Key signal detected&#xa;//&#xa;reg    [3:0] key_in_q;&#xa;wire   [3:0] key_flag;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    key_in_q &lt;= #`DEL 4'b0;&#xa;  end&#xa;  else begin&#xa;    key_in_q &lt;= #`DEL key_in;&#xa;  end&#xa;end      &#xa;assign key_flag = key_in_q &amp; ( ~key_in );&#xa;&#xa;//&#xa;// Delay 20ms&#xa;//&#xa;reg   [19:0] cnt;&#xa;reg   [ 3:0] key_flag_delay;  // Detect key's status after delay 20ms&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    cnt            &lt;= #`DEL 20'd0;&#xa;    key_flag_delay &lt;= #`DEL  4'd0;&#xa;  end&#xa;  else if( cnt == 20'd 999_998 ) begin&#xa;    cnt            &lt;= #`DEL cnt + 20'd1;&#xa;    key_flag_delay &lt;= #`DEL key_flag;&#xa;  end // 20ms&#xa;  else if( cnt == 20'd 999_999 ) begin&#xa;    cnt            &lt;= #`DEL 20'd0;&#xa;    key_flag_delay &lt;= #`DEL 4'd0;&#xa;  end // 20ms&#xa;  else begin&#xa;    cnt            &lt;= #`DEL cnt + 20'd1;&#xa;    key_flag_delay &lt;= #`DEL 4'd0;&#xa;  end&#xa;end&#xa;&#xa;//&#xa;// If key has been pressed, output&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    key_out     &lt;= #`DEL 8'd0;&#xa;    key_pressed &lt;= #`DEL 1'd0;&#xa;  end&#xa;  else begin&#xa;    case( key_flag_delay ) &#xa;      4'b0000: begin&#xa;        key_out     &lt;= #`DEL 8'd0;&#xa;        key_pressed &lt;= #`DEL 1'd0;&#xa;      end // No key pressed&#xa;      4'b0001: begin&#xa;        key_out     &lt;= #`DEL 8'd1;&#xa;        key_pressed &lt;= #`DEL 1'd1;&#xa;      end // The first key's value is 1&#xa;      4'b0010: begin&#xa;        key_out     &lt;= #`DEL 8'd2;&#xa;        key_pressed &lt;= #`DEL 1'd1;&#xa;      end // The second key's value is 2&#xa;      4'b0100: begin&#xa;        key_out     &lt;= #`DEL 8'd3;&#xa;        key_pressed &lt;= #`DEL 1'd1;&#xa;      end // The third key's value is 3&#xa;      4'b1000: begin&#xa;        key_out     &lt;= #`DEL 8'd4;&#xa;        key_pressed &lt;= #`DEL 1'd1;&#xa;      end // The third key's value is 4&#xa;      default: begin&#xa;        key_out     &lt;= #`DEL key_out;&#xa;        key_pressed &lt;= #`DEL 1'd0;&#xa;      end &#xa;    endcase&#xa;  end&#xa;end      &#xa;" Include="" Parameters="" Height="600" Class="module" Y="0" Name="key" Type="module" Width="900" File="Current/key.model" Color="#d3d3d3" Comment="" Parent="0" X="0">
 <Port Datasize="1" Datatype="wire" Height="20" Function="" Side="left" Y="0.183333" Name="clk" Width="20" Color="#0000ff" Parent="key" X="-0.0222222" Inout="input"/>
 <Port Datasize="1" Datatype="wire" Height="20" Function="" Side="left" Y="0.383333" Name="rst_n" Width="20" Color="#00ffff" Parent="key" X="-0.0222222" Inout="input"/>
 <Port Datasize="4" Datatype="wire" Height="20" Function="" Side="left" Y="0.583333" Name="key_in" Width="20" Color="#8a2be2" Parent="key" X="-0.0222222" Inout="input"/>
 <Port Datasize="8" Datatype="reg" Height="20" Function="" Side="right" Y="0.233333" Name="key_out" Width="20" Color="#a52a2a" Parent="key" X="0.977778" Inout="output"/>
 <Port Datasize="1" Datatype="reg" Height="20" Function="" Side="right" Y="0.483333" Name="key_pressed" Width="20" Color="#ff7f50" Parent="key" X="0.977778" Inout="output"/>
</Module>
