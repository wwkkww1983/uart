<!DOCTYPE Robei>
<Module Y="0" Comment="" Time_Scale="" X="0" Color="#d3d3d3" Include="sfifo_def.v" Type="testbench" Height="600" Code="  initial begin&#xa;    clock = 1;&#xa;  end&#xa;&#xa;  // Generate the clock&#xa;  always #30 clock = ~clock;&#xa;&#xa;  // Initialize inputs&#xa;  initial begin&#xa;    in_data = 0;&#xa;    read_n = 1;&#xa;    write_n = 1;&#xa;&#xa;    // Reset the FIFO&#xa;    clr_n=1;&#xa;    @( negedge clock);&#xa;    clr_n = 0;&#xa;    @( negedge clock);&#xa;    clr_n = 1;&#xa;&#xa;    // Check that the status output are correct  &#xa;    if ( empty != 1 ) begin&#xa;      $display(&quot;\nERROR at time %0t:&quot;, $time );&#xa;      $display(&quot;After reset, empty status not asserted\n&quot; );&#xa;      // Use $stop for debugging&#xa;      $stop;&#xa;    end&#xa;    if ( full != 0 )begin&#xa;      $display (&quot;\nERROR at time %0t:&quot;, $time );&#xa;      $display (&quot;After reset,full status is asserted\n&quot;);&#xa;      // Use $stop for debugging&#xa;      $stop;&#xa;    end&#xa;    if ( half != 0 )begin&#xa;      $display( &quot;\nERROR at time %0t:&quot;, $time );&#xa;      $display (&quot;After reset ,half status is asserted\n&quot;);&#xa;      // Use $stop for debugging&#xa;      $stop;&#xa;    end&#xa;  end &#xa;&#xa;  reg                         start_rw;  // start to read/write fifo&#xa;  reg                        fast_read;  // Read at high frequency&#xa;  reg                       fast_write;  // Write at high frequency&#xa;  reg                         cycle_en;  // Count the cycles&#xa;  reg   [`FIFO_WIDTH - 1:0]   exp_data;  // The expected data from the FIFO&#xa;  reg                      filled_flag;  // The FIFO has filled at least once&#xa;&#xa;  // Initialize internal variables&#xa;  initial begin&#xa;    start_rw = 0;&#xa;&#xa;    // Write more quickly to the FIFO&#xa;    fast_write = 1;&#xa;    // Read more slowly from the FIFO&#xa;    fast_read = 0;&#xa;&#xa;    cycle_en = 0;&#xa;    exp_data = 0;&#xa;&#xa;    filled_flag = 0;&#xa;&#xa;    repeat(10) @( negedge clock );&#xa;    start_rw = 1;&#xa;    repeat(1000) @( negedge clock );&#xa;    repeat(1000) @( negedge clock );&#xa;    $finish;&#xa;  end&#xa;&#xa;  // Increment the cycle count&#xa;  always @( negedge clock or negedge clr_n ) begin&#xa;    if ( ~clr_n ) begin&#xa;      cycle_en = 0;&#xa;    end&#xa;    else begin&#xa;      cycle_en = cycle_en + 1;&#xa;    end&#xa;  end&#xa;&#xa;  // READ operation&#xa;  // Check whether to assert read_n&#xa;  // Do not read the FIFO if it is empty&#xa;  always @( negedge clock or negedge clr_n ) begin&#xa;    if ( ~clr_n ) begin&#xa;      read_n &lt;= 1;&#xa;      exp_data &lt;= 0;&#xa;    end&#xa;    // Check the read data&#xa;    else if ( start_rw &amp;&amp; ( ( fast_read || cycle_en ) &amp;&amp; ~empty ) ) begin&#xa;      read_n &lt;= 0;&#xa;      // Increment the expected data&#xa;      exp_data &lt;= exp_data + 1;&#xa;    end&#xa;    else begin&#xa;      read_n &lt;= 1;&#xa;      exp_data &lt;= exp_data;&#xa;    end&#xa;  end&#xa;&#xa;  // READ operation&#xa;  // Check whether expected data == actual data &#xa;  always @( negedge clock ) begin&#xa;    if ( start_rw &amp;&amp; ~read_n &amp;&amp; ( out_data != exp_data ) ) begin&#xa;      $display(&quot;\nERROR at time %0t:&quot;, $time );&#xa;      $display(&quot;Expect data out = %h&quot;, exp_data );&#xa;      $display(&quot;Actual data out = %h\n&quot;,out_data );&#xa;      // Use $stop for debugging&#xa;      $stop;&#xa;    end&#xa;  end&#xa;&#xa;  // WRITE operation&#xa;  // Check whether to assert write_n&#xa;  // Do not write the FIFO if it is full&#xa;  always @( negedge clock or negedge clr_n ) begin&#xa;    if ( ~clr_n ) begin&#xa;      write_n &lt;= 1;&#xa;      in_data &lt;= 0;&#xa;    end&#xa;    // Check the read data&#xa;    else if ( start_rw &amp;&amp; ( ( fast_write || cycle_en ) &amp;&amp; ~full ) ) begin&#xa;      write_n &lt;= 0;&#xa;      // Increment the expected data&#xa;      in_data &lt;= in_data + 1;&#xa;    end&#xa;    else begin&#xa;      write_n &lt;= 1;&#xa;      in_data &lt;= in_data;&#xa;    end&#xa;  end&#xa;&#xa;  //&#xa;  // Complete the simulation&#xa;  //&#xa;  always @( negedge clock or negedge clr_n ) begin&#xa;    // When the FIFO has been filled then emptied.&#xa;    // We are done&#xa;    if ( filled_flag &amp;&amp; empty )begin&#xa;      $display(&quot;\nSimulation complete - no errors\n&quot;);&#xa;      $stop;&#xa;    end&#xa;  end &#xa;&#xa;  // Analyze the fifo_count&#xa;  // Check all of the status signals with each changes of fifo_count&#xa;  always @( fifo_count ) begin&#xa;    //  Wait a moment to evaluate everything&#xa;    #`DEL;&#xa;    #`DEL;&#xa;    #`DEL;&#xa;&#xa;    case ( fifo_count )&#xa;      0 : begin&#xa;        if ( ( empty != 1) || (half != 0 ) || ( full != 0 ) ) begin&#xa;          $display( &quot;\nERROR at time %0t:&quot;, $time );&#xa;          $display( &quot;fifo_count = %h&quot;, fifo_count );&#xa;          $display( &quot;empty = %b&quot;, empty);&#xa;          $display( &quot;half = %b&quot;,half);&#xa;          $display( &quot;full = %b\n&quot;,full);&#xa;          // Use $stop for debugging&#xa;          $stop;&#xa;        end&#xa;        if ( filled_flag == 1 ) begin&#xa;          // The FIFO has filled and emptied &#xa;          $display(&quot;\nSimulation complete - no error\n&quot;);&#xa;          $stop;&#xa;        end&#xa;      end // 0&#xa;&#xa;      `FIFO_HALF : begin&#xa;        if ( ( empty != 0 ) || ( half != 1 ) || ( full != 0 ) ) begin&#xa;          $display(&quot;\nERROR at time %0t:&quot;, $time);&#xa;          $display(&quot;fifo_count = %h&quot;, fifo_count);&#xa;          $display(&quot;empty = %b&quot;, empty);&#xa;          $display(&quot;half = %b&quot;, half);&#xa;          $display(&quot;full = %b\n&quot;,full);&#xa;          // Use $stop for debugging&#xa;          $stop;&#xa;        end&#xa;      end // FIFO_HALF&#xa;&#xa;      `FIFO_DEPTH : begin&#xa;        if ( ( empty != 0) || (half != 1 ) || ( full != 1 ) ) begin&#xa;          $display(&quot;\nERROR at time %0t:&quot;, $time);&#xa;          $display(&quot;fifo_count = %h&quot;, fifo_count);&#xa;          $display(&quot;empty = %b&quot;,empty);&#xa;          $display(&quot;half = %b&quot;,half);&#xa;          $display(&quot;full = %b&quot;, full);&#xa;          // Use $stop for debugging&#xa;          $stop;&#xa;        end&#xa;        // The FIFO has filled, so set the flag filled_flag = 1;&#xa;        filled_flag = 1;&#xa;        // Once the FIFO has filled, empty it&#xa;        // write slowly to the FIFO&#xa;        fast_write = 0;&#xa;        // read quickly from the FIFO&#xa;        fast_read = 1;&#xa;      end // FIFO_DEPTH&#xa;&#xa;      default: begin&#xa;        if ( ( empty != 0) || ( full != 0 ) ) begin&#xa;          $display(&quot;\nERROR at time %0t:&quot;, $time);&#xa;          $display(&quot;fifo_count = %h&quot;, fifo_count);&#xa;          $display(&quot;empty = %b&quot;,empty);&#xa;          $display(&quot;half = %b&quot;,half);&#xa;          $display(&quot;full = %b\n&quot;,full);&#xa;          // Use $stop for debugging&#xa;          $stop;&#xa;        end&#xa;        if ( ( ( fifo_count &lt; `FIFO_HALF ) &amp;&amp; ( half == 1 ) ) || &#xa;             ( ( fifo_count >= `FIFO_HALF ) &amp;&amp; ( half == 0 ) ) &#xa;           ) begin&#xa;          $display(&quot;\nERROR at time %0t:&quot;, $time);&#xa;          $display(&quot;fifo_count = %h&quot;,fifo_count);&#xa;          $display(&quot;empty = %b&quot;, empty);&#xa;          $display(&quot;half = %b&quot;, half);&#xa;          $display(&quot;full = %b\n&quot;,full);&#xa;          // Use $stop for debugging&#xa;          $stop;&#xa;        end &#xa;      end // default&#xa;    endcase&#xa;  end // always&#xa;&#xa;&#xa;" Width="900" Name="sfifo_test" File="Current/sfifo_test.test" Class="module" Parent="0">
 <Module Y="207.284" Comment="" X="355.165" Color="#d3d3d3" Include="sfifo_def.v" Type="model" Height="160" Code="  // The FIFOmemory. &#xa;  reg   [`FIFO_WIDTH-1:0] fifo_mem[0:`FIFO_DEPTH-1];  // How many locations in the FIFO are occupied?&#xa;  reg   [`FIFO_BITS-1:0]  rd_pointer;  // FIFO write pointer points to the location in the FIFO to write to next&#xa;  reg   [`FIFO_BITS-1:0]  wr_pointer;  &#xa;&#xa;  // ASSIGN STATEMENTS&#xa;  assign #`DEL full  = ( counter == `FIFO_DEPTH ) ? 1'b1 : 1'b0;  // FIFO_DEPTH=16&#xa;  assign #`DEL empty = ( counter == 0 ) ? 1'b1 : 1'b0;&#xa;  assign #`DEL half  = ( counter >= `FIFO_HALF )? 1'b1 : 1'b0;    // FIFO_HALF=8&#xa;&#xa;  //&#xa;  // This block contains counter affected by the clock and reset inputs&#xa;  //&#xa;  always @( posedge clock or negedge reset_n ) begin&#xa;    if ( ~reset_n ) begin&#xa;      // Reset the FIFO pointer&#xa;      counter    &lt;= #`DEL 'b0;&#xa;    end &#xa;    else if ( ~read_n &amp;&amp; write_n ) begin&#xa;      // Check for FIFO underflow&#xa;      // Decrement the FIFO counter&#xa;      counter &lt;= #`DEL counter - 1;&#xa;    end&#x9;&#xa;    else if ( ~write_n &amp;&amp; read_n ) begin&#xa;      // Increment teh FIFO counter&#xa;      counter &lt;= #`DEL counter + 1;&#xa;    end&#xa;    else begin&#xa;      counter &lt;= counter;&#xa;    end&#xa;  end&#xa;        &#xa;  // Increment the read pointer&#xa;  // Check if the read pointer has gone beyond the depth of&#xa;  // FIFO, so, set it back to the begining of the FIFO&#x9;&#xa;  always @( posedge clock or negedge reset_n ) begin&#xa;    if ( ~reset_n ) begin&#xa;      // Reset the FIFO pointer&#xa;      rd_pointer &lt;= #`DEL `FIFO_BITS'b0;&#xa;    end &#xa;    else if ( ~read_n ) begin&#xa;      if ( rd_pointer == `FIFO_DEPTH ) begin&#xa;        rd_pointer &lt;= #`DEL `FIFO_BITS'b0; &#xa;      end &#xa;      else begin&#xa;        rd_pointer &lt;= #`DEL rd_pointer + 1;&#xa;      end &#xa;    end &#xa;    else begin&#xa;      rd_pointer &lt;= rd_pointer;&#xa;    end &#xa;  end&#xa;&#xa;  // Increment the write pointer&#xa;  // Check if the write pointer has gone beyond the depth of&#xa;  // FIFO, so, set it back to the begining of the FIFO&#x9;&#xa;  always @( posedge clock or negedge reset_n ) begin&#xa;    if ( ~reset_n ) begin&#xa;      // Reset the FIFO pointer&#xa;      wr_pointer &lt;= #`DEL `FIFO_BITS'b0;&#xa;    end &#xa;    else if ( ~write_n ) begin&#xa;      if ( wr_pointer == `FIFO_DEPTH ) begin&#xa;        wr_pointer &lt;= #`DEL `FIFO_BITS'b0; &#xa;      end &#xa;      else begin &#xa;        wr_pointer &lt;= #`DEL wr_pointer + 1;&#xa;      end&#xa;    end&#xa;  end &#xa;&#xa;  // This block contains sfifo read data output &#xa;  always @( posedge clock or negedge reset_n ) begin&#xa;    if ( ~reset_n ) begin&#xa;      data_out &lt;= #`DEL `FIFO_WIDTH'b0;&#xa;    end&#xa;    else if ( ~read_n )begin&#xa;      // Output the data&#xa;      data_out &lt;= #`DEL fifo_mem [ rd_pointer ];&#xa;    end&#xa;  end&#xa;&#xa;  // sfifo write operation&#xa;  always @( posedge clock ) begin&#xa;    if ( ~write_n )begin&#xa;      // Store the data&#xa;      fifo_mem [ wr_pointer ] &lt;= #`DEL data_in; &#xa;    end&#xa;  end&#xa;&#xa;  // This block contains all devices affected by the clock but not reset&#xa;  always @( posedge clock or negedge reset_n ) begin&#xa;    if ( ~reset_n ) begin&#xa;      data_out &lt;= #`DEL `FIFO_WIDTH'b0;&#xa;    end&#xa;    else if ( ~read_n )begin&#xa;      // Output the data&#xa;      data_out &lt;= #`DEL fifo_mem [ rd_pointer ];&#xa;    end&#xa;    if ( ~write_n )begin&#xa;      // Store the data&#xa;      fifo_mem [ wr_pointer ] &lt;= #`DEL data_in; &#xa;    end&#xa;  end&#xa;&#xa;&#xa;" Parameters="" Width="160" Name="sfifo1" File="Current/sfifo.model" Class="sfifo" Parent="sfifo_test">
  <Port Inout="input" Y="0.075" Datasize="1" X="-0.125" Color="#0000ff" Side="left" Height="20" Datatype="wire" Width="20" Connect="" Function="" Name="clock" Parent="sfifo1"/>
  <Port Inout="input" Y="0.2125" Datasize="1" X="-0.125" Color="#00ffff" Side="left" Height="20" Datatype="wire" Width="20" Connect="" Function="" Name="reset_n" Parent="sfifo1"/>
  <Port Inout="input" Y="0.35" Datasize="8" X="-0.125" Color="#7fffd4" Side="left" Height="20" Datatype="wire" Width="20" Connect="" Function="" Name="data_in" Parent="sfifo1"/>
  <Port Inout="input" Y="0.4875" Datasize="1" X="-0.125" Color="#006400" Side="left" Height="20" Datatype="wire" Width="20" Connect="" Function="" Name="read_n" Parent="sfifo1"/>
  <Port Inout="input" Y="0.625" Datasize="1" X="-0.125" Color="#cd5c5c" Side="left" Height="20" Datatype="wire" Width="20" Connect="" Function="" Name="write_n" Parent="sfifo1"/>
  <Port Inout="output" Y="0.075" Datasize="8" X="0.875" Color="#ffe4c4" Side="right" Height="20" Datatype="reg" Width="20" Connect="" Function="" Name="data_out" Parent="sfifo1"/>
  <Port Inout="output" Y="0.2125" Datasize="1" X="0.875" Color="#b8860b" Side="right" Height="20" Datatype="wire" Width="20" Connect="" Function="" Name="full" Parent="sfifo1"/>
  <Port Inout="output" Y="0.35" Datasize="1" X="0.875" Color="#bdb76b" Side="right" Height="20" Datatype="wire" Width="20" Connect="" Function="" Name="empty" Parent="sfifo1"/>
  <Port Inout="output" Y="0.4875" Datasize="1" X="0.875" Color="#0000ff" Side="right" Height="20" Datatype="wire" Width="20" Connect="" Function="" Name="half" Parent="sfifo1"/>
  <Port Inout="output" Y="0.625" Datasize="4" X="0.875" Color="#8a2be2" Side="right" Height="20" Datatype="reg" Width="20" Connect="" Function="" Name="counter" Parent="sfifo1"/>
 </Module>
 <Port Inout="input" Y="0.125" Datasize="1" X="-0.0222222" Color="#0000ff" Side="left" Height="20" Datatype="reg" Width="20" Function="" Name="clock" Parent="sfifo_test"/>
 <Port Inout="input" Y="0.266667" Datasize="1" X="-0.0222222" Color="#00ffff" Side="left" Height="20" Datatype="reg" Width="20" Function="" Name="clr_n" Parent="sfifo_test"/>
 <Port Inout="input" Y="0.408333" Datasize="8" X="-0.0222222" Color="#7fffd4" Side="left" Height="20" Datatype="reg" Width="20" Function="" Name="in_data" Parent="sfifo_test"/>
 <Port Inout="input" Y="0.55" Datasize="1" X="-0.0222222" Color="#006400" Side="left" Height="20" Datatype="reg" Width="20" Function="" Name="read_n" Parent="sfifo_test"/>
 <Port Inout="input" Y="0.691667" Datasize="1" X="-0.0222222" Color="#cd5c5c" Side="left" Height="20" Datatype="reg" Width="20" Function="" Name="write_n" Parent="sfifo_test"/>
 <Port Inout="output" Y="0.125" Datasize="8" X="0.977778" Color="#ffe4c4" Side="right" Height="20" Datatype="wire" Width="20" Function="" Name="out_data" Parent="sfifo_test"/>
 <Port Inout="output" Y="0.266667" Datasize="1" X="0.977778" Color="#b8860b" Side="right" Height="20" Datatype="wire" Width="20" Function="" Name="full" Parent="sfifo_test"/>
 <Port Inout="output" Y="0.408333" Datasize="1" X="0.977778" Color="#bdb76b" Side="right" Height="20" Datatype="wire" Width="20" Function="" Name="empty" Parent="sfifo_test"/>
 <Port Inout="output" Y="0.55" Datasize="1" X="0.977778" Color="#0000ff" Side="right" Height="20" Datatype="wire" Width="20" Function="" Name="half" Parent="sfifo_test"/>
 <Port Inout="output" Y="0.691667" Datasize="4" X="0.977778" Color="#8a2be2" Side="right" Height="20" Datatype="wire" Width="20" Function="" Name="fifo_count" Parent="sfifo_test"/>
 <Wire To="sfifo_test#sfifo1>clock" Datasize="1" Datatype="wire" From="sfifo_test>clock" Name="sfifo_test_clock" Parent="sfifo_test"/>
 <Wire To="sfifo_test#sfifo1>reset_n" Datasize="1" Datatype="wire" From="sfifo_test>clr_n" Name="sfifo_test_clr_n" Parent="sfifo_test"/>
 <Wire To="sfifo_test#sfifo1>data_in" Datasize="8" Datatype="wire" From="sfifo_test>in_data" Name="sfifo_test_in_data" Parent="sfifo_test"/>
 <Wire To="sfifo_test#sfifo1>read_n" Datasize="1" Datatype="wire" From="sfifo_test>read_n" Name="sfifo_test_read_n" Parent="sfifo_test"/>
 <Wire To="sfifo_test#sfifo1>write_n" Datasize="1" Datatype="wire" From="sfifo_test>write_n" Name="sfifo_test_write_n" Parent="sfifo_test"/>
 <Wire To="sfifo_test>out_data" Datasize="8" Datatype="wire" From="sfifo_test#sfifo1>data_out" Name="sfifo1_data_out" Parent="sfifo_test"/>
 <Wire To="sfifo_test>full" Datasize="1" Datatype="wire" From="sfifo_test#sfifo1>full" Name="sfifo1_full" Parent="sfifo_test"/>
 <Wire To="sfifo_test>empty" Datasize="1" Datatype="wire" From="sfifo_test#sfifo1>empty" Name="sfifo1_empty" Parent="sfifo_test"/>
 <Wire To="sfifo_test>half" Datasize="1" Datatype="wire" From="sfifo_test#sfifo1>half" Name="sfifo1_half" Parent="sfifo_test"/>
 <Wire To="sfifo_test>fifo_count" Datasize="4" Datatype="wire" From="sfifo_test#sfifo1>counter" Name="sfifo1_counter" Parent="sfifo_test"/>
</Module>
