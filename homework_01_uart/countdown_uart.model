<!DOCTYPE Robei>
<Module Name="countdown_uart" Type="module" Width="900" Class="module" Comment="" X="0" Parameters="" Y="0" Parent="0" Height="600" Color="#d3d3d3" Include="" File="Current/countdown_uart.model" Code="&#xa;&#xa;&#xa;">
 <Module Name="uart2" Type="model" Width="184" Class="uart" Comment="" X="550.414" Parameters="" Y="129.862" Parent="countdown_uart" Height="152" Color="#d3d3d3" Include="" File="Current/uart.model" Code="`define DEL 1&#xa;&#xa;//&#xa;// This block is used to receive data&#xa;//&#xa;reg         rx_q;&#xa;wire        rx_start;&#xa;reg  [7:0]  rx_cnt;&#xa;reg         rx_cnt_en;&#xa;&#xa;// &#xa;// Edge deteted&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    rx_q &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    rx_q &lt;= #`DEL rx;&#xa;  end&#xa;end      &#xa;// Falling edge effective&#xa;assign rx_start = ( rx_q &amp;&amp; ~rx );&#xa;&#xa;//&#xa;// Generate the count enable signal &#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    rx_cnt_en &lt;= #`DEL 1'b0;&#xa;  end&#xa;  //&#xa;  // Count enable&#xa;  else if( rx_start ) begin&#xa;    rx_cnt_en &lt;= #`DEL 1'b1;&#xa;  end&#xa;  //&#xa;  // Count disable&#xa;  else if( rx_cnt == 8'd168 ) begin&#xa;    rx_cnt_en &lt;= #`DEL 1'b0;&#xa;  end&#xa;end     &#xa;&#xa;//&#xa;// Frequence division&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if ( ~rst_n ) begin&#xa;    rx_cnt &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else if ( rx_cnt_en ) begin&#xa;    rx_cnt &lt;= #`DEL rx_cnt + 8'b1;&#xa;  end&#xa;  else begin&#xa;    rx_cnt &lt;= #`DEL 8'b0;&#xa;  end&#xa;end&#xa;&#xa;//&#xa;// FSM&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    data_received &lt;= #`DEL 9'b0;&#xa;    rx_buf_full   &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else if( rx_cnt_en ) begin&#xa;    case( rx_cnt ) &#xa;      8'd24: begin&#xa;        data_received[0] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end  // Least significant bit&#xa;      8'd40: begin&#xa;        data_received[1] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd56: begin&#xa;        data_received[2] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd72: begin&#xa;        data_received[3] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd88: begin&#xa;        data_received[4] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd104: begin&#xa;        data_received[5] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd120: begin&#xa;        data_received[6] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd136: begin&#xa;        data_received[7] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end  // Most significant bit&#xa;      8'd152: begin&#xa;        data_received[8] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end  // Parity check&#xa;      8'd168: begin&#xa;        rx_buf_full      &lt;= #`DEL 1'b1;&#xa;      end  // Stop bit&#xa;    endcase&#xa;  end// Least significant bit&#xa;end      &#xa;&#xa;//&#xa;// This block is used to transmit data&#xa;//&#xa;reg         tx_en_q;&#xa;wire        tx_start;&#xa;reg  [7:0]  tx_cnt;&#xa;reg         tx_cnt_en;&#xa;reg  [8:0]  shift_reg;&#xa;&#xa;// &#xa;// Edge deteted&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    tx_en_q &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    tx_en_q &lt;= #`DEL tx_en;&#xa;  end&#xa;end      &#xa;// Rising edge effective&#xa;assign tx_start = ( ~tx_en_q &amp;&amp; tx_en );&#xa;&#xa;//&#xa;// Transmit data_send to shift_reg&#xa;//&#xa;always @( posedge tx_start or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    shift_reg &lt;= #`DEL 9'd0;&#xa;  end&#xa;  else begin&#xa;    shift_reg[7:0] &lt;= #`DEL data_send;&#xa;    //&#xa;    // Parity check bit, even parity&#xa;    shift_reg[8]   &lt;= #`DEL ( ^data_send ) ? 1 : 0;   &#xa;  end&#xa;end      &#xa;&#xa;//&#xa;// Generate the count enable signal &#xa;// Generate the tx_buf_full signal which means shift_reg is not empty&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    tx_cnt_en   &lt;= #`DEL 1'b0;&#xa;    tx_buf_full &lt;= #`DEL 1'b0;&#xa;  end&#xa;  //&#xa;  // Count enable&#xa;  else if( tx_start ) begin&#xa;    tx_cnt_en   &lt;= #`DEL 1'b1;&#xa;    tx_buf_full &lt;= #`DEL 1'b1;&#xa;  end&#xa;  //&#xa;  // Count disable&#xa;  else if( tx_cnt == 8'd176 ) begin&#xa;    tx_cnt_en   &lt;= #`DEL 1'b0;&#xa;    tx_buf_full &lt;= #`DEL 1'b0;&#xa;  end&#xa;end     &#xa;&#xa;//&#xa;// Frequence division&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if ( ~rst_n ) begin&#xa;    tx_cnt &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else if ( tx_cnt_en ) begin&#xa;    tx_cnt &lt;= #`DEL tx_cnt + 8'b1;&#xa;  end&#xa;  else begin&#xa;    tx_cnt &lt;= #`DEL 8'b0;&#xa;  end&#xa;end&#xa;&#xa;//&#xa;// FSM&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    tx &lt;= #`DEL 1'b1;&#xa;  end&#xa;  else if( tx_cnt_en ) begin&#xa;    case( tx_cnt ) &#xa;      8'd0: begin&#xa;        tx &lt;= #`DEL 1'b0;&#xa;      end  // Start signal&#xa;      8'd16: begin&#xa;        tx &lt;= #`DEL shift_reg[0];&#xa;      end  // Least significant bit&#xa;      8'd32: begin&#xa;        tx &lt;= #`DEL shift_reg[1];&#xa;      end&#xa;      8'd48: begin&#xa;        tx &lt;= #`DEL shift_reg[2];&#xa;      end&#xa;      8'd64: begin&#xa;        tx &lt;= #`DEL shift_reg[3];&#xa;      end&#xa;      8'd80: begin&#xa;        tx &lt;= #`DEL shift_reg[4];&#xa;      end&#xa;      8'd96: begin&#xa;        tx &lt;= #`DEL shift_reg[5];&#xa;      end&#xa;      8'd112: begin&#xa;        tx &lt;= #`DEL shift_reg[6];&#xa;      end  &#xa;      8'd128: begin&#xa;        tx &lt;= #`DEL shift_reg[7];&#xa;      end  // Most significant bit&#xa;      8'd144: begin&#xa;        tx &lt;= #`DEL shift_reg[8];&#xa;      end  // Parity check      &#xa;      8'd160: begin&#xa;        tx &lt;= #`DEL 1'b1;&#xa;      end  // Stop bit&#xa;    endcase&#xa;  end&#xa;end      &#xa;">
  <Port Connect="" Name="clk" Inout="input" Function="" Width="20" Side="left" X="-0.108696" Y="0.184211" Datatype="wire" Parent="uart2" Height="20" Color="#00ffff" Datasize="1"/>
  <Port Connect="" Name="rst_n" Inout="input" Function="" Width="20" Side="left" X="-0.108696" Y="0.322368" Datatype="wire" Parent="uart2" Height="20" Color="#7fffd4" Datasize="1"/>
  <Port Connect="" Name="rx" Inout="input" Function="" Width="20" Side="left" X="-0.108696" Y="0.0657895" Datatype="wire" Parent="uart2" Height="20" Color="#0000ff" Datasize="1"/>
  <Port Connect="" Name="tx_en" Inout="input" Function="" Width="20" Side="left" X="-0.108696" Y="0.460526" Datatype="wire" Parent="uart2" Height="20" Color="#8a2be2" Datasize="1"/>
  <Port Connect="" Name="data_send" Inout="input" Function="" Width="20" Side="left" X="-0.108696" Y="0.625" Datatype="wire" Parent="uart2" Height="20" Color="#a52a2a" Datasize="8"/>
  <Port Connect="" Name="tx_buf_full" Inout="output" Function="" Width="20" Side="right" X="0.891304" Y="0.0921053" Datatype="reg" Parent="uart2" Height="20" Color="#5f9ea0" Datasize="1"/>
  <Port Connect="" Name="rx_buf_full" Inout="output" Function="" Width="20" Side="right" X="0.891304" Y="0.427632" Datatype="reg" Parent="uart2" Height="20" Color="#b8860b" Datasize="1"/>
  <Port Connect="" Name="tx" Inout="output" Function="" Width="20" Side="right" X="0.891304" Y="0.263158" Datatype="reg" Parent="uart2" Height="20" Color="#7fff00" Datasize="1"/>
  <Port Connect="" Name="data_received" Inout="output" Function="" Width="20" Side="right" X="0.891304" Y="0.565789" Datatype="reg" Parent="uart2" Height="20" Color="#ff8c00" Datasize="9"/>
 </Module>
 <Module Name="countdown6" Type="model" Width="160" Class="countdown" Comment="" X="174.483" Parameters="" Y="342.069" Parent="countdown_uart" Height="160" Color="#d3d3d3" Include="" File="Current/countdown.model" Code="`define DEL 1&#xa;&#xa;//&#xa;// Count enable edge detected&#xa;//&#xa;reg     count_en_q;&#xa;reg     count_en_start;&#xa;wire    count_en_flag;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    count_en_q &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    count_en_q &lt;= #`DEL count_en;&#xa;  end&#xa;end&#xa;assign count_en_flag = ~count_en_q &amp;&amp; ( count_en );&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    count_en_start &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else if( count_en_flag )begin&#xa;    count_en_start &lt;= #`DEL 1'b1;&#xa;  end&#xa;  else if( count == 8'd99 ) begin&#xa;    count_en_start &lt;= #`DEL 1'b0;&#xa;  end&#xa;end      &#xa;&#xa;&#xa;//&#xa;// Tx_done edge detected&#xa;// Tx_done signal comes from uart unit, while uart transmit one data done, begining next count &#xa;//&#xa;reg     tx_done_q;&#xa;wire    tx_done_n;&#xa;wire    tx_done_flag;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    tx_done_q &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    tx_done_q &lt;= #`DEL tx_done_n;&#xa;  end&#xa;end&#xa;assign tx_done_n = ~tx_done;&#xa;assign tx_done_flag = ~tx_done_q &amp;&amp; ( tx_done_n );&#xa;&#xa;//&#xa;// Countdown and output&#xa;//&#xa;reg [7:0] count;&#xa;   &#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    count      &lt;= #`DEL 8'd0;&#xa;    count_full &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else if( count_en_flag ) begin&#xa;    count &lt;= #`DEL 1'b0;&#xa;    count_full &lt;= #`DEL 1'b1;&#xa;  end&#xa;  else if( count_en_start ) begin&#xa;    if( tx_done_flag ) begin&#xa;      if( count == 8'd99 )begin&#xa;        count      &lt;= #`DEL 8'd0;&#xa;        count_full &lt;= #`DEL 1'b0;&#xa;      end&#xa;      else begin&#xa;        count      &lt;= #`DEL count + 1;&#xa;        count_full &lt;= #`DEL 1'b1;&#xa;      end&#xa;    end     &#xa;    else begin&#xa;      count      &lt;= #`DEL count;&#xa;      count_full &lt;= #`DEL 1'b0;&#xa;    end&#xa;  end  &#xa;  else begin&#xa;    count      &lt;= #`DEL count;&#xa;    count_full &lt;= #`DEL 1'b0;&#xa;  end&#xa;end&#xa;&#xa;assign count_out  =  count;">
  <Port Connect="" Name="clk" Inout="input" Function="" Width="20" Side="left" X="-0.125" Y="0.1" Datatype="wire" Parent="countdown6" Height="20" Color="#0000ff" Datasize="1"/>
  <Port Connect="" Name="rst_n" Inout="input" Function="" Width="20" Side="left" X="-0.125" Y="0.2625" Datatype="wire" Parent="countdown6" Height="20" Color="#00ffff" Datasize="1"/>
  <Port Connect="" Name="count_en" Inout="input" Function="" Width="20" Side="left" X="-0.125" Y="0.425" Datatype="wire" Parent="countdown6" Height="20" Color="#8a2be2" Datasize="1"/>
  <Port Connect="" Name="count_full" Inout="output" Function="" Width="20" Side="right" X="0.875" Y="0.1875" Datatype="reg" Parent="countdown6" Height="20" Color="#a52a2a" Datasize="1"/>
  <Port Connect="" Name="count_out" Inout="output" Function="" Width="20" Side="right" X="0.875" Y="0.4375" Datatype="wire" Parent="countdown6" Height="20" Color="#7fff00" Datasize="8"/>
  <Port Connect="" Name="tx_done" Inout="input" Function="" Width="20" Side="left" X="-0.125" Y="0.5875" Datatype="wire" Parent="countdown6" Height="20" Color="#d2691e" Datasize="1"/>
 </Module>
 <Port Name="clk" Inout="input" Function="" Width="20" Side="left" X="-0.0222222" Y="0.181667" Datatype="wire" Parent="countdown_uart" Height="20" Color="#0000ff" Datasize="1"/>
 <Port Name="rst_n" Inout="input" Function="" Width="20" Side="left" X="-0.0222222" Y="0.381667" Datatype="wire" Parent="countdown_uart" Height="20" Color="#00ffff" Datasize="1"/>
 <Port Name="count_enable" Inout="input" Function="" Width="20" Side="left" X="-0.0222222" Y="0.581667" Datatype="wire" Parent="countdown_uart" Height="20" Color="#7fffd4" Datasize="1"/>
 <Port Name="tx_valid" Inout="output" Function="" Width="20" Side="right" X="0.977778" Y="0.231667" Datatype="wire" Parent="countdown_uart" Height="20" Color="#b8860b" Datasize="1"/>
 <Port Name="tx" Inout="output" Function="" Width="20" Side="right" X="0.977778" Y="0.481667" Datatype="wire" Parent="countdown_uart" Height="20" Color="#006400" Datasize="1"/>
 <Wire Name="countdown_uart_clk" To="countdown_uart#uart2>clk" From="countdown_uart>clk" Datatype="wire" Parent="countdown_uart" Datasize="1"/>
 <Wire Name="countdown_uart_rst_n" To="countdown_uart#uart2>rst_n" From="countdown_uart>rst_n" Datatype="wire" Parent="countdown_uart" Datasize="1"/>
 <Wire Name="uart2_tx_buf_full" To="countdown_uart>tx_valid" From="countdown_uart#uart2>tx_buf_full" Datatype="wire" Parent="countdown_uart" Datasize="1"/>
 <Wire Name="uart2_tx" To="countdown_uart>tx" From="countdown_uart#uart2>tx" Datatype="wire" Parent="countdown_uart" Datasize="1"/>
 <Wire Name="countdown_uart_clk" To="countdown_uart#countdown6>clk" From="countdown_uart>clk" Datatype="wire" Parent="countdown_uart" Datasize="1"/>
 <Wire Name="countdown_uart_rst_n" To="countdown_uart#countdown6>rst_n" From="countdown_uart>rst_n" Datatype="wire" Parent="countdown_uart" Datasize="1"/>
 <Wire Name="countdown_uart_count_enable" To="countdown_uart#countdown6>count_en" From="countdown_uart>count_enable" Datatype="wire" Parent="countdown_uart" Datasize="1"/>
 <Wire Name="uart2_tx_buf_full" To="countdown_uart#countdown6>tx_done" From="countdown_uart#uart2>tx_buf_full" Datatype="wire" Parent="countdown_uart" Datasize="1"/>
 <Wire Name="countdown6_count_full" To="countdown_uart#uart2>tx_en" From="countdown_uart#countdown6>count_full" Datatype="wire" Parent="countdown_uart" Datasize="1"/>
 <Wire Name="countdown6_count_out" To="countdown_uart#uart2>data_send" From="countdown_uart#countdown6>count_out" Datatype="wire" Parent="countdown_uart" Datasize="8"/>
</Module>
