<!DOCTYPE Robei>
<Module Height="600" File="Current/uart_top_test.test" Name="uart_top_test" Class="module" Include="" Width="900" Comment="" X="0" Color="#d3d3d3" Type="testbench" Y="0" Parent="0" Time_Scale="" Code="//&#xa;// Generate clk&#xa;//&#xa;initial begin &#xa;  clk = 0;&#xa;end&#xa;always #10 clk = ~clk;&#xa;&#xa;&#xa;initial begin&#xa;  rst_n = 1;&#xa;  key_in = 4'b0000;&#xa;  count_enable = 0;&#xa;  rx = 1;&#xa;&#xa;  //&#xa;  // Generate reset signal&#xa;  //&#xa;  repeat(1) @( posedge clk ) #1;&#xa;  rst_n = 0;&#xa;  repeat(1) @( posedge clk ) #1;&#xa;  rst_n = 1;  &#xa;&#xa;  // &#xa;  // Generate key signal&#xa;  //&#xa;  key_in = 4'b0000;&#xa;  repeat(1000000) @( posedge clk ) #1;&#xa;  key_in = 4'b0001;&#xa;  repeat(1000000) @( posedge clk ) #1;&#xa;  key_in = 4'b0010;&#xa;  repeat(1000000) @( posedge clk ) #1;&#xa;  key_in = 4'b0100;&#xa;  repeat(1000000) @( posedge clk ) #1;&#xa;  key_in = 4'b1000;&#xa;  repeat(1000000) @( posedge clk ) #1;     &#xa;  key_in = 4'b0000;&#xa;  repeat(1000000) @( posedge clk ) #1;   &#xa;&#xa;  //&#xa;  // Generate countdown signals&#xa;  //&#xa;  count_enable = 0;&#xa;  repeat( 4 ) @( posedge clk ) #1;&#xa;  count_enable = 1;&#xa;  repeat( 2 ) @( posedge clk ) #1;&#xa;  count_enable= 0;&#xa;  repeat( 50 ) @( posedge clk ) #1;&#xa;  count_enable = 1;&#xa;  repeat( 2 ) @( posedge clk ) #1;&#xa;  count_enable= 0;&#xa;  repeat( 50000 ) @( posedge clk ) #1;&#xa;&#xa;  //**************************************************************************//&#xa;  // Generate led display signals.&#xa;  //&#xa;  // Attension: There should be two datas in once send, the first data is used&#xa;  // to display, while the second one is set to 0( all datas are 8 bits ).&#xa;  // Because we had integretd the display module and the division_duty module&#xa;  // together, if you only send the data once, it will cause the division_duty&#xa;  // output error.&#xa;  //&#xa;  // Please pay attention!!!&#xa;  //**************************************************************************//&#xa;  &#xa;  // &#xa;  // The display data&#xa;  //&#xa;  rx = 1;&#xa;  repeat(10)@( posedge clk ) #1; &#xa;  &#xa;  // Receive display data, which is 1_1001_1011_0( 155 )&#xa;  //&#xa;  repeat(32)@( posedge clk ) #1;&#xa;  rx = 0;  // Start signal&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;  // Least significant signal&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0; &#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;  // Most significant signal&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;  // Parity check&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;  // Stop bit   &#xa;  repeat(16)@( posedge clk ) #1;&#xa;&#xa;  rx = 1;&#xa;  repeat(10)@( posedge clk ) #1; &#xa;  &#xa;  // Receive 0, which is 0_0000_0000_0&#xa;  //&#xa;  repeat(32)@( posedge clk ) #1;&#xa;  rx = 0;  // Start signal&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;  // Least significant signal&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0; &#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;  // Most significant signal&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;  // Parity check&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;  // Stop bit   &#xa;  repeat(16)@( posedge clk ) #1;&#xa;&#xa;  //&#xa;  // Uart division_duty testbench&#xa;  //&#xa;  rx = 1;&#xa;  repeat(10)@( posedge clk ) #1; &#xa;  //&#xa;  // Receive division data, division is 0_0001_0100_0( 20 )&#xa;  //&#xa;  repeat(32)@( posedge clk ) #1;&#xa;  rx = 0;  // Start signal&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;  // Least significant signal&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;  // Most significant signal&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;  // Parity check&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;  // Stop bit   &#xa;  repeat(16)@( posedge clk ) #1; &#xa;  rx = 1;   &#xa;  repeat(32)@( posedge clk ) #1; &#xa;&#xa;  //&#xa;  // Receive duty_num data, duty_num is 1_0000_1000_0( 8 )&#xa;  //&#xa;  rx = 1;&#xa;  repeat(32)@( posedge clk ) #1;&#xa;  rx = 0;  // Start signal&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;  // Least significant signal&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;  // Most significant signal&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;  // Parity check&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;  // Stop bit   &#xa;  repeat(300)@( posedge clk ) #1;&#xa;&#xa;  $finish;&#xa;end">
 <Module Height="228" File="Current/uart_top.model" Name="uart_top1" Class="uart_top" Include="" Width="215" Comment="" X="346.207" Parameters="" Color="#d3d3d3" Type="model" Y="156.84" Parent="uart_top_test" Code="`define DEL 1&#xa;&#xa;wire [7:0] key_out;&#xa;wire [7:0] count_out;&#xa;wire       key_pressed;&#xa;wire       count_full;&#xa;&#xa;reg  [7:0] data_send;&#xa;reg        tx_en;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    data_send &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else if( key_pressed ) begin&#xa;    data_send &lt;= #`DEL key_out;&#xa;  end&#xa;  else if( count_full ) begin&#xa;    data_send &lt;= #`DEL count_out;&#xa;  end&#xa;end   &#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    tx_en     &lt;= #`DEL 1'd0;&#xa;  end&#xa;  else begin&#xa;    tx_en     &lt;= #`DEL key_pressed || count_full;&#xa;  end&#xa;end    &#xa;">
  <Port Height="20" Function="" Side="left" Name="clk" Width="20" X="-0.0930233" Color="#0000ff" Datatype="wire" Connect="" Y="0.0921053" Inout="input" Parent="uart_top1" Datasize="1"/>
  <Port Height="20" Function="" Side="left" Name="rst_n" Width="20" X="-0.0930233" Color="#00ffff" Datatype="wire" Connect="" Y="0.232456" Inout="input" Parent="uart_top1" Datasize="1"/>
  <Port Height="20" Function="" Side="left" Name="key_in" Width="20" X="-0.0930233" Color="#7fffd4" Datatype="wire" Connect="" Y="0.377193" Inout="input" Parent="uart_top1" Datasize="4"/>
  <Port Height="20" Function="" Side="right" Name="tx" Width="20" X="0.906977" Color="#bdb76b" Datatype="wire" Connect="" Y="0.232456" Inout="output" Parent="uart_top1" Datasize="1"/>
  <Port Height="20" Function="" Side="left" Name="count_enable" Width="20" X="-0.0930233" Color="#556b2f" Datatype="wire" Connect="" Y="0.657895" Inout="input" Parent="uart_top1" Datasize="1"/>
  <Port Height="20" Function="" Side="right" Name="tx_buf_full" Width="20" X="0.906977" Color="#ffe4c4" Datatype="wire" Connect="" Y="0.0921053" Inout="output" Parent="uart_top1" Datasize="1"/>
  <Port Height="20" Function="" Side="left" Name="rx" Width="20" X="-0.0930233" Color="#b8860b" Datatype="wire" Connect="" Y="0.517544" Inout="input" Parent="uart_top1" Datasize="1"/>
  <Port Height="20" Function="" Side="right" Name="led0_out" Width="20" X="0.906977" Color="#1e90ff" Datatype="wire" Connect="" Y="0.657895" Inout="output" Parent="uart_top1" Datasize="7"/>
  <Port Height="20" Function="" Side="right" Name="led1_out" Width="20" X="0.906977" Color="#8b0000" Datatype="wire" Connect="" Y="0.517544" Inout="output" Parent="uart_top1" Datasize="7"/>
  <Port Height="20" Function="" Side="right" Name="clk_out" Width="20" X="0.906977" Color="#8a2be2" Datatype="wire" Connect="" Y="0.377193" Inout="output" Parent="uart_top1" Datasize="1"/>
 </Module>
 <Port Height="20" Function="" Side="left" Name="clk" Width="20" X="-0.0222222" Color="#0000ff" Datatype="reg" Y="0.125" Inout="input" Parent="uart_top_test" Datasize="1"/>
 <Port Height="20" Function="" Side="left" Name="rst_n" Width="20" X="-0.0222222" Color="#00ffff" Datatype="reg" Y="0.266667" Inout="input" Parent="uart_top_test" Datasize="1"/>
 <Port Height="20" Function="" Side="left" Name="key_in" Width="20" X="-0.0222222" Color="#7fffd4" Datatype="reg" Y="0.406667" Inout="input" Parent="uart_top_test" Datasize="4"/>
 <Port Height="20" Function="" Side="right" Name="tx" Width="20" X="0.977778" Color="#bdb76b" Datatype="wire" Y="0.125" Inout="output" Parent="uart_top_test" Datasize="1"/>
 <Port Height="20" Function="" Side="left" Name="count_enable" Width="20" X="-0.0222222" Color="#556b2f" Datatype="reg" Y="0.55" Inout="input" Parent="uart_top_test" Datasize="1"/>
 <Port Height="20" Function="" Side="right" Name="tx_buf_full" Width="20" X="0.977778" Color="#ffe4c4" Datatype="wire" Y="0.266667" Inout="output" Parent="uart_top_test" Datasize="1"/>
 <Port Height="20" Function="" Side="left" Name="rx" Width="20" X="-0.0222222" Color="#b8860b" Datatype="reg" Y="0.691667" Inout="input" Parent="uart_top_test" Datasize="1"/>
 <Port Height="20" Function="" Side="right" Name="led0_out" Width="20" X="0.977778" Color="#1e90ff" Datatype="wire" Y="0.406667" Inout="output" Parent="uart_top_test" Datasize="7"/>
 <Port Height="20" Function="" Side="right" Name="led1_out" Width="20" X="0.977778" Color="#8b0000" Datatype="wire" Y="0.55" Inout="output" Parent="uart_top_test" Datasize="7"/>
 <Port Height="20" Function="" Side="right" Name="clk_out" Width="20" X="0.977778" Color="#8a2be2" Datatype="wire" Y="0.691667" Inout="output" Parent="uart_top_test" Datasize="1"/>
 <Wire Name="uart_top_test_clk" From="uart_top_test>clk" Datatype="wire" To="uart_top_test#uart_top1>clk" Parent="uart_top_test" Datasize="1"/>
 <Wire Name="uart_top_test_rst_n" From="uart_top_test>rst_n" Datatype="wire" To="uart_top_test#uart_top1>rst_n" Parent="uart_top_test" Datasize="1"/>
 <Wire Name="uart_top_test_key_in" From="uart_top_test>key_in" Datatype="wire" To="uart_top_test#uart_top1>key_in" Parent="uart_top_test" Datasize="4"/>
 <Wire Name="uart_top_test_count_enable" From="uart_top_test>count_enable" Datatype="wire" To="uart_top_test#uart_top1>count_enable" Parent="uart_top_test" Datasize="1"/>
 <Wire Name="uart_top_test_rx" From="uart_top_test>rx" Datatype="wire" To="uart_top_test#uart_top1>rx" Parent="uart_top_test" Datasize="1"/>
 <Wire Name="uart_top1_tx_buf_full" From="uart_top_test#uart_top1>tx_buf_full" Datatype="wire" To="uart_top_test>tx_buf_full" Parent="uart_top_test" Datasize="1"/>
 <Wire Name="uart_top1_tx" From="uart_top_test#uart_top1>tx" Datatype="wire" To="uart_top_test>tx" Parent="uart_top_test" Datasize="1"/>
 <Wire Name="uart_top1_clk_out" From="uart_top_test#uart_top1>clk_out" Datatype="wire" To="uart_top_test>clk_out" Parent="uart_top_test" Datasize="1"/>
 <Wire Name="uart_top1_led1_out" From="uart_top_test#uart_top1>led1_out" Datatype="wire" To="uart_top_test>led1_out" Parent="uart_top_test" Datasize="7"/>
 <Wire Name="uart_top1_led0_out" From="uart_top_test#uart_top1>led0_out" Datatype="wire" To="uart_top_test>led0_out" Parent="uart_top_test" Datasize="7"/>
</Module>
