<!DOCTYPE Robei>
<Module Class="module" X="0" Y="0" Color="#d3d3d3" Name="bin_bcd" Height="826" Comment="" Width="1146" Type="module" Parent="0" File="Current/bin_bcd.model" Include="" Code="`define DEL 1&#xa;&#xa;reg       [2:0]   cs;&#xa;reg       [2:0]   ns;&#xa;&#xa;reg       [3:0]   shift_cnt;&#xa;reg       [7:0]   data_reg;&#xa;&#xa;reg       [3:0]   ones_reg;&#xa;reg       [3:0]   tens_reg;&#xa;reg       [3:0]   hundreds_reg;&#xa;&#xa;reg       [3:0]   ones_out;&#xa;reg       [3:0]   tens_out;&#xa;reg       [3:0]   hundreds_out;&#xa;&#xa;wire      [3:0]   ones_temp;&#xa;wire      [3:0]   tens_temp;&#xa;wire      [3:0]   hundreds_temp;&#xa;&#xa;parameter [2:0]  IDLE   = 3'b001,&#xa;  SHIFT     = 3'b010,&#xa;  DONE      = 3'b100;&#xa;&#xa;reg     tran_en_q;&#xa;wire    tran_en_flag;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    tran_en_q &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    tran_en_q &lt;= #`DEL tran_en;&#xa;  end&#xa;end&#xa;assign tran_en_flag = tran_en_q &amp;&amp; ( ~tran_en );&#xa;&#xa;&#xa;//&#xa;// FSM step1&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if ( !rst_n ) begin&#xa;    cs &lt;= #`DEL IDLE;&#xa;  end&#xa;  else begin&#xa;    cs &lt;= #`DEL ns;&#xa;  end&#xa;end&#xa;&#xa;//&#xa;// FSM step2&#xa;//&#xa;always @( * ) begin&#xa;  ns = IDLE;&#xa;  case ( cs )&#xa;    IDLE : begin&#xa;      if ( tran_en_flag ) begin&#xa;        ns = SHIFT;&#xa;      end&#xa;      else begin&#xa;        ns = IDLE;&#xa;      end&#xa;    end&#xa;    SHIFT: begin&#xa;      if ( shift_cnt == 9 ) begin&#xa;        ns = DONE;&#xa;      end &#xa;      else begin&#xa;        ns = SHIFT;&#xa;      end&#xa;    end &#xa;    DONE : begin &#xa;        ns = IDLE;&#xa;    end &#xa;    default : begin &#xa;        ns = IDLE;&#xa;    end &#xa;  endcase &#xa;end&#xa;&#xa;//&#xa;// FSM step3&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin &#xa;  if ( !rst_n ) begin &#xa;    ones_reg     &lt;= #`DEL 4'b0;&#xa;    tens_reg     &lt;= #`DEL 4'b0;&#xa;    hundreds_reg &lt;= #`DEL 4'b0;&#xa;    shift_cnt    &lt;= #`DEL 4'b0;&#xa;    data_reg     &lt;= #`DEL 8'b0;&#xa;    tran_done    &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin &#xa;    case ( ns )&#xa;      IDLE: begin&#xa;        ones_reg     &lt;= #`DEL 4'b0;&#xa;        tens_reg     &lt;= #`DEL 4'b0;&#xa;        hundreds_reg &lt;= #`DEL 4'b0;&#xa;        shift_cnt    &lt;= #`DEL 4'b0;&#xa;        data_reg     &lt;= #`DEL data_in;&#xa;        tran_done    &lt;= #`DEL 1'b0;&#xa;      end&#xa;      SHIFT: begin&#xa;        if( shift_cnt == 8 ) begin&#xa;          shift_cnt &lt;= #`DEL shift_cnt + 1'b1 ;&#xa;          data_reg     &lt;= #`DEL data_reg;&#xa;          ones_reg     &lt;= #`DEL ones_reg;&#xa;          tens_reg     &lt;= #`DEL tens_reg;&#xa;          hundreds_reg &lt;= #`DEL hundreds_reg;&#x9;&#x9;&#x9;&#xa;        end&#xa;        else begin&#xa;          shift_cnt    &lt;= #`DEL shift_cnt + 1'b1;&#xa;          data_reg     &lt;= #`DEL data_reg  &lt;&lt; 1;&#xa;          ones_reg     &lt;= #`DEL {ones_temp[2:0], data_reg[7]};&#xa;          tens_reg     &lt;= #`DEL {tens_temp[2:0], ones_temp[3]};&#xa;          hundreds_reg &lt;= #`DEL {hundreds_temp[2:0], tens_temp[3]};&#xa;        end&#xa;      end&#xa;      DONE: begin&#xa;        tran_done &lt;= #`DEL 1'b1;&#xa;      end&#xa;    endcase &#xa;  end &#xa;end      &#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    ones_out     &lt;= #`DEL 4'b0;&#xa;    tens_out     &lt;= #`DEL 4'b0;&#xa;    hundreds_out &lt;= #`DEL 4'b0;&#xa;  end&#xa;  else if( tran_done ) begin    &#xa;    ones_out     &lt;= #`DEL ones_reg;&#xa;    tens_out     &lt;= #`DEL tens_reg;&#xa;    hundreds_out &lt;= #`DEL hundreds_reg;&#xa;  end&#xa;  else begin    &#xa;    ones_out     &lt;= #`DEL ones_out;&#xa;    tens_out     &lt;= #`DEL tens_out;&#xa;    hundreds_out &lt;= #`DEL hundreds_out;&#xa;  end&#xa;end      &#xa;&#xa;&#xa;assign ones_temp     = ( ones_reg     > 4'd4 ) ? ( ones_reg     + 2'd3 ) : ones_reg;&#xa;assign tens_temp     = ( tens_reg     > 4'd4 ) ? ( tens_reg     + 2'd3 ) : tens_reg;&#xa;assign hundreds_temp = ( hundreds_reg > 4'd4 ) ? ( hundreds_reg + 2'd3 ) : hundreds_reg;&#xa;&#xa;assign hundreds_place = hundreds_out;&#xa;assign tens_place     = tens_out;&#xa;assign ones_place     = ones_out;&#xa;&#xa;&#xa;&#xa;" Parameters="">
 <Port Datasize="1" Inout="input" X="-0.017452" Y="0.152542" Color="#0000ff" Name="clk" Height="20" Function="" Width="20" Parent="bin_bcd" Side="left" Datatype="wire"/>
 <Port Datasize="1" Inout="input" X="-0.017452" Y="0.319613" Color="#00ffff" Name="rst_n" Height="20" Function="" Width="20" Parent="bin_bcd" Side="left" Datatype="wire"/>
 <Port Datasize="1" Inout="input" X="-0.017452" Y="0.484262" Color="#8a2be2" Name="tran_en" Height="20" Function="" Width="20" Parent="bin_bcd" Side="left" Datatype="wire"/>
 <Port Datasize="8" Inout="input" X="-0.017452" Y="0.651332" Color="#a52a2a" Name="data_in" Height="20" Function="" Width="20" Parent="bin_bcd" Side="left" Datatype="wire"/>
 <Port Datasize="1" Inout="output" X="0.982548" Y="0.152542" Color="#7fff00" Name="tran_done" Height="20" Function="" Width="20" Parent="bin_bcd" Side="right" Datatype="reg"/>
 <Port Datasize="4" Inout="output" X="0.982548" Y="0.319613" Color="#5f9ea0" Name="hundreds_place" Height="20" Function="" Width="20" Parent="bin_bcd" Side="right" Datatype="wire"/>
 <Port Datasize="4" Inout="output" X="0.982548" Y="0.484262" Color="#b8860b" Name="tens_place" Height="20" Function="" Width="20" Parent="bin_bcd" Side="right" Datatype="wire"/>
 <Port Datasize="4" Inout="output" X="0.982548" Y="0.651332" Color="#6495ed" Name="ones_place" Height="20" Function="" Width="20" Parent="bin_bcd" Side="right" Datatype="wire"/>
</Module>
