<!DOCTYPE Robei>
<Module File="Current/uart_test.test" Height="600" Width="900" Color="#d3d3d3" Parent="0" Name="uart_test" X="0" Type="testbench" Class="module" Time_Scale="" Y="0" Comment="" Code="//&#xa;// Generate clock&#xa;//&#xa;initial begin&#xa;  clk = 0;&#xa;end&#xa;always #5 clk = ~clk;&#xa;&#xa;//&#xa;// Generate reset signal&#xa;//&#xa;initial begin&#xa;  rst_n = 1;&#xa;  @( posedge clk ) #1;&#xa;  rst_n = 0;&#xa;  @( posedge clk ) #1;&#xa;  rst_n = 1;&#xa;end&#xa;&#xa;/*&#xa;//&#xa;// Generate other input signals&#xa;//&#xa;initial begin &#xa;  rx = 1;&#xa;  tx_en = 0;&#xa;  data_send = 8'b0;&#xa;  repeat(10)@( posedge clk ) #1; &#xa;  //&#xa;  // transmit data&#xa;  //&#xa;  data_send = 8'b0010_1010;&#xa;&#xa;  // tx_en effective&#xa;  @( posedge clk ) #1;&#xa;  tx_en = 1;&#xa;  repeat(10)@( posedge clk ) #1;&#xa;  tx_en = 0;&#xa;&#xa;  //&#xa;  // receive data&#xa;  //&#xa;  repeat(32)@( posedge clk ) #1;&#xa;  rx = 0;  // Start signal&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;  // Least significant signal&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;  // Most significant signal&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;  // Parity check&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;  // Stop bit   &#xa;  repeat(64)@( posedge clk ) #1;&#xa;  $finish;&#xa;end&#xa;*/&#xa;&#xa;//&#xa;// Uart division_duty testbench&#xa;//&#xa;&#xa;initial begin &#xa;  rx = 1;&#xa;  repeat(10)@( posedge clk ) #1; &#xa;  //&#xa;  // Receive division data, division is 0_0001_0100_0( 20 )&#xa;  //&#xa;  repeat(32)@( posedge clk ) #1;&#xa;  rx = 0;  // Start signal&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;  // Least significant signal&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;  // Most significant signal&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;  // Parity check&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;  // Stop bit   &#xa;  repeat(10)@( posedge clk ) #1; &#xa;&#xa;&#xa;  //&#xa;  // Receive duty_num data, duty_num is 1_0000_1000_0( 8 )&#xa;  //&#xa;  rx = 1;&#xa;  repeat(32)@( posedge clk ) #1;&#xa;  rx = 0;  // Start signal&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;  // Least significant signal&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;  // Most significant signal&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;  // Parity check&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;  // Stop bit   &#xa;  repeat(64)@( posedge clk ) #1;&#xa;&#xa;  $finish;&#xa;end&#xa;&#xa;&#xa;&#xa;&#xa;" Include="">
 <Module File="Current/uart.model" Height="294" Width="355" Color="#d3d3d3" Parent="uart_test" Name="uart1" X="275.019" Type="model" Class="uart" Y="189.183" Comment="" Parameters="" Code="`define DEL 1&#xa;&#xa;//&#xa;// This block is used to receive data&#xa;//&#xa;reg         rx_q;&#xa;wire        rx_start;&#xa;reg  [7:0]  rx_cnt;&#xa;reg         rx_cnt_en;&#xa;&#xa;// &#xa;// Edge deteted&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    rx_q &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    rx_q &lt;= #`DEL rx;&#xa;  end&#xa;end      &#xa;// Falling edge effective&#xa;assign rx_start = ( rx_q &amp;&amp; ~rx );&#xa;&#xa;//&#xa;// Generate the count enable signal &#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    rx_cnt_en &lt;= #`DEL 1'b0;&#xa;  end&#xa;  //&#xa;  // Count enable&#xa;  else if( rx_start ) begin&#xa;    rx_cnt_en &lt;= #`DEL 1'b1;&#xa;  end&#xa;  //&#xa;  // Count disable&#xa;  else if( rx_cnt == 8'd168 ) begin&#xa;    rx_cnt_en &lt;= #`DEL 1'b0;&#xa;  end&#xa;end     &#xa;&#xa;//&#xa;// Frequence division&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if ( ~rst_n ) begin&#xa;    rx_cnt &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else if ( rx_cnt_en ) begin&#xa;    rx_cnt &lt;= #`DEL rx_cnt + 8'b1;&#xa;  end&#xa;  else begin&#xa;    rx_cnt &lt;= #`DEL 8'b0;&#xa;  end&#xa;end&#xa;&#xa;//&#xa;// FSM&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    data_received &lt;= #`DEL 9'b0;&#xa;    rx_buf_full   &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    case( rx_cnt ) &#xa;      8'd24: begin&#xa;        data_received[0] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end  // Least significant bit&#xa;      8'd40: begin&#xa;        data_received[1] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd56: begin&#xa;        data_received[2] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd72: begin&#xa;        data_received[3] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd88: begin&#xa;        data_received[4] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd104: begin&#xa;        data_received[5] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd120: begin&#xa;        data_received[6] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end&#xa;      8'd136: begin&#xa;        data_received[7] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end  // Most significant bit&#xa;      8'd152: begin&#xa;        data_received[8] &lt;= #`DEL rx;&#xa;        rx_buf_full      &lt;= #`DEL 1'b0;&#xa;      end  // Parity check&#xa;      8'd168: begin&#xa;        rx_buf_full      &lt;= #`DEL 1'b1;&#xa;      end  // Stop bit&#xa;    endcase&#xa;  end// Least significant bit&#xa;end      &#xa;&#xa;&#xa;//&#xa;// This block is used to transmit data&#xa;//&#xa;reg         tx_en_q;&#xa;wire        tx_start;&#xa;reg  [7:0]  tx_cnt;&#xa;reg         tx_cnt_en;&#xa;reg  [8:0]  shift_reg;&#xa;&#xa;// &#xa;// Edge deteted&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    tx_en_q &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    tx_en_q &lt;= #`DEL tx_en;&#xa;  end&#xa;end      &#xa;// Rising edge effective&#xa;assign tx_start = ( ~tx_en_q &amp;&amp; tx_en );&#xa;&#xa;//&#xa;// Transmit data_send to shift_reg&#xa;//&#xa;always @( posedge tx_start or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    shift_reg &lt;= #`DEL 9'd0;&#xa;  end&#xa;  else begin&#xa;    shift_reg[7:0] &lt;= #`DEL data_send;&#xa;    //&#xa;    // Parity check bit, even parity&#xa;    shift_reg[8]   &lt;= #`DEL ( ^data_send ) ? 1 : 0;   &#xa;  end&#xa;end      &#xa;&#xa;//&#xa;// Generate the count enable signal &#xa;// Generate the tx_buf_full signal which means shift_reg is not empty&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    tx_cnt_en   &lt;= #`DEL 1'b0;&#xa;    tx_buf_full &lt;= #`DEL 1'b0;&#xa;  end&#xa;  //&#xa;  // Count enable&#xa;  else if( tx_start ) begin&#xa;    tx_cnt_en   &lt;= #`DEL 1'b1;&#xa;    tx_buf_full &lt;= #`DEL 1'b1;&#xa;  end&#xa;  //&#xa;  // Count disable&#xa;  else if( tx_cnt == 8'd168 ) begin&#xa;    tx_cnt_en   &lt;= #`DEL 1'b0;&#xa;    tx_buf_full &lt;= #`DEL 1'b0;&#xa;  end&#xa;end     &#xa;&#xa;//&#xa;// Frequence division&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if ( ~rst_n ) begin&#xa;    tx_cnt &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else if ( tx_cnt_en ) begin&#xa;    tx_cnt &lt;= #`DEL tx_cnt + 8'b1;&#xa;  end&#xa;  else begin&#xa;    tx_cnt &lt;= #`DEL 8'b0;&#xa;  end&#xa;end&#xa;&#xa;//&#xa;// FSM&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    tx &lt;= #`DEL 1'b1;&#xa;  end&#xa;  else begin&#xa;    case( tx_cnt ) &#xa;      8'd0: begin&#xa;        tx &lt;= #`DEL 1'b0;&#xa;      end  // Start signal&#xa;      8'd16: begin&#xa;        tx &lt;= #`DEL shift_reg[0];&#xa;      end  // Least significant bit&#xa;      8'd32: begin&#xa;        tx &lt;= #`DEL shift_reg[1];&#xa;      end&#xa;      8'd48: begin&#xa;        tx &lt;= #`DEL shift_reg[2];&#xa;      end&#xa;      8'd64: begin&#xa;        tx &lt;= #`DEL shift_reg[3];&#xa;      end&#xa;      8'd80: begin&#xa;        tx &lt;= #`DEL shift_reg[4];&#xa;      end&#xa;      8'd96: begin&#xa;        tx &lt;= #`DEL shift_reg[5];&#xa;      end&#xa;      8'd112: begin&#xa;        tx &lt;= #`DEL shift_reg[6];&#xa;      end  &#xa;      8'd128: begin&#xa;        tx &lt;= #`DEL shift_reg[7];&#xa;      end  // Most significant bit&#xa;      8'd144: begin&#xa;        tx &lt;= #`DEL shift_reg[8];&#xa;      end  // Parity check      &#xa;      8'd160: begin&#xa;        tx &lt;= #`DEL 1'b1;&#xa;      end  // Stop bit&#xa;    endcase&#xa;  end&#xa;end      &#xa;" Include="">
  <Port Height="20" Function="" Width="20" Color="#00ffff" Parent="uart1" Name="clk" X="-0.056338" Side="left" Y="0.108844" Connect="" Inout="input" Datatype="wire" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#7fffd4" Parent="uart1" Name="rst_n" X="-0.056338" Side="left" Y="0.251701" Connect="" Inout="input" Datatype="wire" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#0000ff" Parent="uart1" Name="rx" X="-0.056338" Side="left" Y="0.394558" Connect="" Inout="input" Datatype="wire" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#8a2be2" Parent="uart1" Name="tx_en" X="-0.056338" Side="left" Y="0.537415" Connect="" Inout="input" Datatype="wire" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#a52a2a" Parent="uart1" Name="data_send" X="-0.056338" Side="left" Y="0.680272" Connect="" Inout="input" Datatype="wire" Datasize="8"/>
  <Port Height="20" Function="" Width="20" Color="#5f9ea0" Parent="uart1" Name="tx_buf_full" X="0.943662" Side="right" Y="0.132653" Connect="" Inout="output" Datatype="reg" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#b8860b" Parent="uart1" Name="rx_buf_full" X="0.943662" Side="right" Y="0.29932" Connect="" Inout="output" Datatype="reg" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#7fff00" Parent="uart1" Name="tx" X="0.943662" Side="right" Y="0.465986" Connect="" Inout="output" Datatype="reg" Datasize="1"/>
  <Port Height="20" Function="" Width="20" Color="#ff8c00" Parent="uart1" Name="data_received" X="0.943662" Side="right" Y="0.632653" Connect="" Inout="output" Datatype="reg" Datasize="9"/>
 </Module>
 <Port Height="20" Function="" Width="20" Color="#00ffff" Parent="uart_test" Name="clk" X="-0.0222222" Side="left" Y="0.125" Inout="input" Datatype="reg" Datasize="1"/>
 <Port Height="20" Function="" Width="20" Color="#7fffd4" Parent="uart_test" Name="rst_n" X="-0.0222222" Side="left" Y="0.266667" Inout="input" Datatype="reg" Datasize="1"/>
 <Port Height="20" Function="" Width="20" Color="#0000ff" Parent="uart_test" Name="rx" X="-0.0222222" Side="left" Y="0.408333" Inout="input" Datatype="reg" Datasize="1"/>
 <Port Height="20" Function="" Width="20" Color="#8a2be2" Parent="uart_test" Name="tx_en" X="-0.0222222" Side="left" Y="0.55" Inout="input" Datatype="reg" Datasize="1"/>
 <Port Height="20" Function="" Width="20" Color="#a52a2a" Parent="uart_test" Name="data_send" X="-0.0222222" Side="left" Y="0.691667" Inout="input" Datatype="reg" Datasize="8"/>
 <Port Height="20" Function="" Width="20" Color="#5f9ea0" Parent="uart_test" Name="tx_buf_full" X="0.977778" Side="right" Y="0.15" Inout="output" Datatype="wire" Datasize="1"/>
 <Port Height="20" Function="" Width="20" Color="#b8860b" Parent="uart_test" Name="rx_buf_full" X="0.977778" Side="right" Y="0.316667" Inout="output" Datatype="wire" Datasize="1"/>
 <Port Height="20" Function="" Width="20" Color="#7fff00" Parent="uart_test" Name="tx" X="0.977778" Side="right" Y="0.483333" Inout="output" Datatype="wire" Datasize="1"/>
 <Port Height="20" Function="" Width="20" Color="#ff8c00" Parent="uart_test" Name="data_received" X="0.977778" Side="right" Y="0.65" Inout="output" Datatype="wire" Datasize="9"/>
 <Wire From="uart_test>clk" Parent="uart_test" Name="uart_test_clk" To="uart_test#uart1>clk" Datatype="wire" Datasize="1"/>
 <Wire From="uart_test>rst_n" Parent="uart_test" Name="uart_test_rst_n" To="uart_test#uart1>rst_n" Datatype="wire" Datasize="1"/>
 <Wire From="uart_test>rx" Parent="uart_test" Name="uart_test_rx" To="uart_test#uart1>rx" Datatype="wire" Datasize="1"/>
 <Wire From="uart_test>tx_en" Parent="uart_test" Name="uart_test_tx_en" To="uart_test#uart1>tx_en" Datatype="wire" Datasize="1"/>
 <Wire From="uart_test>data_send" Parent="uart_test" Name="uart_test_data_send" To="uart_test#uart1>data_send" Datatype="wire" Datasize="8"/>
 <Wire From="uart_test#uart1>data_received" Parent="uart_test" Name="uart1_data_received" To="uart_test>data_received" Datatype="wire" Datasize="9"/>
 <Wire From="uart_test#uart1>tx" Parent="uart_test" Name="uart1_tx" To="uart_test>tx" Datatype="wire" Datasize="1"/>
 <Wire From="uart_test#uart1>rx_buf_full" Parent="uart_test" Name="uart1_rx_buf_full" To="uart_test>rx_buf_full" Datatype="wire" Datasize="1"/>
 <Wire From="uart_test#uart1>tx_buf_full" Parent="uart_test" Name="uart1_tx_buf_full" To="uart_test>tx_buf_full" Datatype="wire" Datasize="1"/>
</Module>
