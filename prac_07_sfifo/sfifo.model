<!DOCTYPE Robei>
<Module Height="522" Code="`define DEL 1 // Clock-to-output delay&#xa;&#xa;reg [7:0] sfifo_ram[0:7];  // sfifo_ram initialized&#xa;reg [2:0] rd_ptr;  // Read pointer&#xa;reg [2:0] wr_ptr;  // Write pointer &#xa;&#xa;assign empty = ( sfifo_cnt == 0 ) ? 1 : 0;  //Empty signal&#xa;assign full  = ( sfifo_cnt == 8 ) ? 1 : 0;  //Full signal&#xa;&#xa;// sfifo_cnt changed&#xa;// While rd is valid, cnt--&#xa;// While wr is valid, cnt++&#xa;always @( posedge clk or negedge rst_n) begin&#xa;  if( ~rst_n ) begin&#xa;    sfifo_cnt &lt;= #`DEL 4'h0;&#xa;  end&#xa;  else if( rd &amp;&amp; ~wr ) begin&#xa;    sfifo_cnt &lt;= #`DEL sfifo_cnt - 1;&#xa;  end&#xa;  else if( ~rd &amp;&amp; wr ) begin&#xa;    sfifo_cnt &lt;= #`DEL sfifo_cnt + 1;&#xa;  end&#xa;  else begin &#xa;    sfifo_cnt &lt;= sfifo_cnt;&#xa;  end&#xa;end      &#xa;&#xa;/*&#xa;&#xa;//&#xa;// The change of sfifo_cnt can also be written like below.&#xa;//&#xa;always @( posedge clk or negedge rst_n) begin&#xa;  if( ~rst_n ) begin&#xa;    sfifo_cnt &lt;= #`DEL 4'h0;&#xa;  end&#xa;  else begin&#xa;    case({ wr,rd })&#xa;      2'b00 : sfifo_cnt &lt;= #`DEL sfifo_cnt;&#xa;      2'b01 : sfifo_cnt &lt;= #`DEL (sfifo_cnt==0) ? 0 : fifo_cnt-1;&#xa;      2'b10 : sfifo_cnt &lt;= #`DEL (sfifo_cnt==8) ? 8 : fifo_cnt+1;&#xa;      2'b11 : sfifo_cnt&lt;=sfifo_cnt;&#xa;      default: sfifo_cnt &lt;= sfifo_cnt;&#xa;    endcase&#xa;  end&#xa;end    &#xa;&#xa;*/&#xa;&#xa;// Increment of rd_ptr &#xa;// Check if the read pointer has gone beyond the depth of fifo  &#xa;always @( posedge clk or negedge rst_n) begin&#xa;  if( ~rst_n ) begin&#xa;    rd_ptr &lt;= #`DEL 3'h0;&#xa;  end&#xa;  else if( rd ) begin&#xa;    if( rd_ptr == 3'h7 ) begin&#xa;      rd_ptr &lt;= #`DEL 3'h0;&#xa;    end&#xa;    else begin&#xa;      rd_ptr &lt;= #`DEL rd_ptr +1;&#xa;    end&#xa;  end&#xa;  else begin&#xa;    rd_ptr &lt;= rd_ptr;&#xa;  end&#xa;end    &#xa;&#xa;// Increment of wr_ptr &#xa;// Check if the write pointer has gone beyond the depth of fifo  &#xa;always @( posedge clk or negedge rst_n) begin&#xa;  if( ~rst_n ) begin&#xa;    wr_ptr &lt;= #`DEL 3'h0;&#xa;  end&#xa;  else if( wr ) begin&#xa;    if( wr_ptr == 3'h7 ) begin&#xa;      wr_ptr &lt;= #`DEL 3'h0;&#xa;    end&#xa;    else begin&#xa;      wr_ptr &lt;= #`DEL wr_ptr +1;&#xa;    end&#xa;  end&#xa;  else begin&#xa;    wr_ptr &lt;= wr_ptr;&#xa;  end&#xa;end &#xa;&#xa;/*&#xa;&#xa;//&#xa;// The incerment of pointer can also be written like below. &#xa;//&#xa;always @( posedge clk or negedge rst_n) begin&#xa;  if( ~rst_n ) begin&#xa;    wr_ptr &lt;= #`DEL 3'h0;&#xa;    rd_ptr &lt;= #`DEL 3'h0;&#xa;  end&#xa;  else begin&#xa;    wr_ptr &lt;= #`DEL wr ? wr_ptr + 1 : wr_ptr;&#xa;    rd_ptr &lt;= #`DEL rd ? rd_ptr + 1 : rd_ptr;&#xa;  end&#xa;end    &#xa;&#xa;*/&#xa;&#xa;//&#xa;// Deal with the data &#xa;//&#xa;always @( posedge clk or negedge rst_n) begin&#xa;  if( ~rst_n ) begin&#xa;    data_out &lt;= #`DEL 8'h0;&#xa;  end&#xa;  else if( wr ) begin&#xa;    sfifo_ram[wr_ptr] &lt;= #`DEL data_in;&#xa;  end&#xa;  else if( rd ) begin &#xa;    data_out &lt;= #`DEL sfifo_ram[rd_ptr];&#xa;  end&#xa;end      &#xa;&#xa;" Class="module" X="109.984" Type="module" Width="790" Y="77.5777" Color="#d3d3d3" Include="" Name="sfifo" Comment="" Parameters="" Parent="0" File="Current/sfifo.model">
 <Port Side="left" Height="20" Function="" X="-0.0253165" Inout="input" Width="20" Y="0.122605" Datatype="wire" Color="#00ffff" Name="clk" Datasize="1" Parent="sfifo"/>
 <Port Side="left" Height="20" Function="" X="-0.0253165" Inout="input" Width="20" Y="0.264368" Datatype="wire" Color="#8a2be2" Name="rst_n" Datasize="1" Parent="sfifo"/>
 <Port Side="left" Height="20" Function="" X="-0.0253165" Inout="input" Width="20" Y="0.40613" Datatype="wire" Color="#a52a2a" Name="data_in" Datasize="8" Parent="sfifo"/>
 <Port Side="left" Height="20" Function="" X="-0.0253165" Inout="input" Width="20" Y="0.547893" Datatype="wire" Color="#deb887" Name="wr" Datasize="1" Parent="sfifo"/>
 <Port Side="left" Height="20" Function="" X="-0.0253165" Inout="input" Width="20" Y="0.689655" Datatype="wire" Color="#5f9ea0" Name="rd" Datasize="1" Parent="sfifo"/>
 <Port Side="right" Height="20" Function="" X="0.974684" Inout="output" Width="20" Y="0.14751" Datatype="wire" Color="#7fff00" Name="full" Datasize="1" Parent="sfifo"/>
 <Port Side="right" Height="20" Function="" X="0.974684" Inout="output" Width="20" Y="0.314176" Datatype="wire" Color="#ff7f50" Name="empty" Datasize="1" Parent="sfifo"/>
 <Port Side="right" Height="20" Function="" X="0.974684" Inout="output" Width="20" Y="0.480843" Datatype="reg" Color="#6495ed" Name="data_out" Datasize="8" Parent="sfifo"/>
 <Port Side="right" Height="20" Function="" X="0.974684" Inout="output" Width="20" Y="0.64751" Datatype="reg" Color="#0000ff" Name="sfifo_cnt" Datasize="4" Parent="sfifo"/>
</Module>
