<!DOCTYPE Robei>
<Module X="0" Code="initial begin&#xa;  rst_n=1;&#xa;  clk=0;&#xa;  wr=0;&#xa;  rd=0;&#xa;  data_in=0;&#xa;  #1 rst_n=0;&#xa;  #5 rst_n=1;&#xa;  #3 wr=1;&#xa;  #5 rd=1;&#xa;  #5 rd=0;&#xa;  #5 wr=0;&#xa;  #5 wr=1;&#xa;  #10 rd=1;&#xa;  #10 rd=0;&#xa;  #14 $finish;&#xa;end&#xa;always begin&#xa;  #5 clk=~clk;&#xa;end&#xa;always @(posedge clk or negedge rst_n) begin&#xa;  if (~rst_n) begin&#xa;    data_in&lt;=0;&#xa;    wr&lt;=0;&#xa;    rd&lt;=0;&#xa;  end&#xa;  else begin&#xa;    data_in&lt;=$random;&#xa;  end&#xa;end&#xa;&#xa;&#xa;" Color="#d3d3d3" Comment="" Width="900" Name="sfifo_test" Class="module" Type="testbench" File="Current/sfifo_test.test" Time_Scale="" Y="0" Include="" Height="600" Parent="0">
 <Module X="309.757" Code="`define DEL 1 // Clock-to-output delay&#xa;&#xa;reg [7:0] sfifo_ram[0:7];  // sfifo_ram initialized&#xa;reg [2:0] rd_ptr;  // Read pointer&#xa;reg [2:0] wr_ptr;  // Write pointer &#xa;&#xa;assign empty = ( sfifo_cnt == 0 ) ? 1 : 0;  //Empty signal&#xa;assign full  = ( sfifo_cnt == 8 ) ? 1 : 0;  //Full signal&#xa;&#xa;// sfifo_cnt changed&#xa;// While rd is valid, cnt--&#xa;// While wr is valid, cnt++&#xa;always @( posedge clk or negedge rst_n) begin&#xa;  if( ~rst_n ) begin&#xa;    sfifo_cnt &lt;= #`DEL 4'h0;&#xa;  end&#xa;  else if( rd &amp;&amp; ~wr ) begin&#xa;    sfifo_cnt &lt;= #`DEL sfifo_cnt - 1;&#xa;  end&#xa;  else if( ~rd &amp;&amp; wr ) begin&#xa;    sfifo_cnt &lt;= #`DEL sfifo_cnt + 1;&#xa;  end&#xa;  else begin &#xa;    sfifo_cnt &lt;= sfifo_cnt;&#xa;  end&#xa;end      &#xa;&#xa;/*&#xa;&#xa;//&#xa;// The change of sfifo_cnt can also be written like below.&#xa;//&#xa;always @( posedge clk or negedge rst_n) begin&#xa;  if( ~rst_n ) begin&#xa;    sfifo_cnt &lt;= #`DEL 4'h0;&#xa;  end&#xa;  else begin&#xa;    case({ wr,rd })&#xa;      2'b00 : sfifo_cnt &lt;= #`DEL sfifo_cnt;&#xa;      2'b01 : sfifo_cnt &lt;= #`DEL (sfifo_cnt==0) ? 0 : fifo_cnt-1;&#xa;      2'b10 : sfifo_cnt &lt;= #`DEL (sfifo_cnt==8) ? 8 : fifo_cnt+1;&#xa;      2'b11 : sfifo_cnt&lt;=sfifo_cnt;&#xa;      default: sfifo_cnt &lt;= sfifo_cnt;&#xa;    endcase&#xa;  end&#xa;end    &#xa;&#xa;*/&#xa;&#xa;// Increment of rd_ptr &#xa;// Check if the read pointer has gone beyond the depth of fifo  &#xa;always @( posedge clk or negedge rst_n) begin&#xa;  if( ~rst_n ) begin&#xa;    rd_ptr &lt;= #`DEL 3'h0;&#xa;  end&#xa;  else if( rd ) begin&#xa;    if( rd_ptr == 3'h7 ) begin&#xa;      rd_ptr &lt;= #`DEL 3'h0;&#xa;    end&#xa;    else begin&#xa;      rd_ptr &lt;= #`DEL rd_ptr +1;&#xa;    end&#xa;  end&#xa;  else begin&#xa;    rd_ptr &lt;= rd_ptr;&#xa;  end&#xa;end    &#xa;&#xa;// Increment of wr_ptr &#xa;// Check if the write pointer has gone beyond the depth of fifo  &#xa;always @( posedge clk or negedge rst_n) begin&#xa;  if( ~rst_n ) begin&#xa;    wr_ptr &lt;= #`DEL 3'h0;&#xa;  end&#xa;  else if( wr ) begin&#xa;    if( wr_ptr == 3'h7 ) begin&#xa;      wr_ptr &lt;= #`DEL 3'h0;&#xa;    end&#xa;    else begin&#xa;      wr_ptr &lt;= #`DEL wr_ptr +1;&#xa;    end&#xa;  end&#xa;  else begin&#xa;    wr_ptr &lt;= wr_ptr;&#xa;  end&#xa;end &#xa;&#xa;/*&#xa;&#xa;//&#xa;// The incerment of pointer can also be written like below. &#xa;//&#xa;always @( posedge clk or negedge rst_n) begin&#xa;  if( ~rst_n ) begin&#xa;    wr_ptr &lt;= #`DEL 3'h0;&#xa;    rd_ptr &lt;= #`DEL 3'h0;&#xa;  end&#xa;  else begin&#xa;    wr_ptr &lt;= #`DEL wr ? wr_ptr + 1 : wr_ptr;&#xa;    rd_ptr &lt;= #`DEL rd ? rd_ptr + 1 : rd_ptr;&#xa;  end&#xa;end    &#xa;&#xa;*/&#xa;&#xa;//&#xa;// Deal with the data &#xa;//&#xa;always @( posedge clk or negedge rst_n) begin&#xa;  if( ~rst_n ) begin&#xa;    data_out &lt;= #`DEL 8'h0;&#xa;  end&#xa;  else if( wr ) begin&#xa;    sfifo_ram[wr_ptr] &lt;= #`DEL data_in;&#xa;  end&#xa;  else if( rd ) begin &#xa;    data_out &lt;= #`DEL sfifo_ram[rd_ptr];&#xa;  end&#xa;end      &#xa;&#xa;" Color="#d3d3d3" Comment="" Width="365" Name="sfifo1" Class="sfifo" Type="model" Parameters="" File="Current/sfifo.model" Y="165.333" Include="" Height="298" Parent="sfifo_test">
  <Port Side="left" X="-0.0547945" Datasize="1" Function="" Color="#00ffff" Datatype="wire" Width="20" Name="clk" Inout="input" Connect="" Y="0.107383" Height="20" Parent="sfifo1"/>
  <Port Side="left" X="-0.0547945" Datasize="1" Function="" Color="#8a2be2" Datatype="wire" Width="20" Name="rst_n" Inout="input" Connect="" Y="0.244966" Height="20" Parent="sfifo1"/>
  <Port Side="left" X="-0.0547945" Datasize="8" Function="" Color="#a52a2a" Datatype="wire" Width="20" Name="data_in" Inout="input" Connect="" Y="0.389262" Height="20" Parent="sfifo1"/>
  <Port Side="left" X="-0.0547945" Datasize="1" Function="" Color="#deb887" Datatype="wire" Width="20" Name="wr" Inout="input" Connect="" Y="0.526846" Height="20" Parent="sfifo1"/>
  <Port Side="left" X="-0.0547945" Datasize="1" Function="" Color="#5f9ea0" Datatype="wire" Width="20" Name="rd" Inout="input" Connect="" Y="0.671141" Height="20" Parent="sfifo1"/>
  <Port Side="right" X="0.945205" Datasize="1" Function="" Color="#7fff00" Datatype="wire" Width="20" Name="full" Inout="output" Connect="" Y="0.127517" Height="20" Parent="sfifo1"/>
  <Port Side="right" X="0.945205" Datasize="1" Function="" Color="#ff7f50" Datatype="wire" Width="20" Name="empty" Inout="output" Connect="" Y="0.291946" Height="20" Parent="sfifo1"/>
  <Port Side="right" X="0.945205" Datasize="8" Function="" Color="#6495ed" Datatype="reg" Width="20" Name="data_out" Inout="output" Connect="" Y="0.459732" Height="20" Parent="sfifo1"/>
  <Port Side="right" X="0.945205" Datasize="4" Function="" Color="#0000ff" Datatype="reg" Width="20" Name="sfifo_cnt" Inout="output" Connect="" Y="0.620805" Height="20" Parent="sfifo1"/>
 </Module>
 <Port Side="left" X="-0.0222222" Datasize="1" Function="" Color="#00ffff" Datatype="reg" Width="20" Name="clk" Inout="input" Y="0.125" Height="20" Parent="sfifo_test"/>
 <Port Side="left" X="-0.0222222" Datasize="1" Function="" Color="#8a2be2" Datatype="reg" Width="20" Name="rst_n" Inout="input" Y="0.266667" Height="20" Parent="sfifo_test"/>
 <Port Side="left" X="-0.0222222" Datasize="8" Function="" Color="#a52a2a" Datatype="reg" Width="20" Name="data_in" Inout="input" Y="0.406667" Height="20" Parent="sfifo_test"/>
 <Port Side="left" X="-0.0222222" Datasize="1" Function="" Color="#deb887" Datatype="reg" Width="20" Name="wr" Inout="input" Y="0.55" Height="20" Parent="sfifo_test"/>
 <Port Side="left" X="-0.0222222" Datasize="1" Function="" Color="#5f9ea0" Datatype="reg" Width="20" Name="rd" Inout="input" Y="0.691667" Height="20" Parent="sfifo_test"/>
 <Port Side="right" X="0.977778" Datasize="1" Function="" Color="#7fff00" Datatype="wire" Width="20" Name="full" Inout="output" Y="0.15" Height="20" Parent="sfifo_test"/>
 <Port Side="right" X="0.977778" Datasize="1" Function="" Color="#ff7f50" Datatype="wire" Width="20" Name="empty" Inout="output" Y="0.316667" Height="20" Parent="sfifo_test"/>
 <Port Side="right" X="0.977778" Datasize="8" Function="" Color="#6495ed" Datatype="wire" Width="20" Name="data_out" Inout="output" Y="0.481667" Height="20" Parent="sfifo_test"/>
 <Port Side="right" X="0.977778" Datasize="4" Function="" Color="#0000ff" Datatype="wire" Width="20" Name="sfifo_cnt" Inout="output" Y="0.65" Height="20" Parent="sfifo_test"/>
 <Wire To="sfifo_test#sfifo1>clk" From="sfifo_test>clk" Datasize="1" Datatype="wire" Name="sfifo_test_clk" Parent="sfifo_test"/>
 <Wire To="sfifo_test#sfifo1>rst_n" From="sfifo_test>rst_n" Datasize="1" Datatype="wire" Name="sfifo_test_rst_n" Parent="sfifo_test"/>
 <Wire To="sfifo_test#sfifo1>data_in" From="sfifo_test>data_in" Datasize="8" Datatype="wire" Name="sfifo_test_data_in" Parent="sfifo_test"/>
 <Wire To="sfifo_test#sfifo1>wr" From="sfifo_test>wr" Datasize="1" Datatype="wire" Name="sfifo_test_wr" Parent="sfifo_test"/>
 <Wire To="sfifo_test#sfifo1>rd" From="sfifo_test>rd" Datasize="1" Datatype="wire" Name="sfifo_test_rd" Parent="sfifo_test"/>
 <Wire To="sfifo_test>full" From="sfifo_test#sfifo1>full" Datasize="1" Datatype="wire" Name="sfifo1_full" Parent="sfifo_test"/>
 <Wire To="sfifo_test>empty" From="sfifo_test#sfifo1>empty" Datasize="1" Datatype="wire" Name="sfifo1_empty" Parent="sfifo_test"/>
 <Wire To="sfifo_test>data_out" From="sfifo_test#sfifo1>data_out" Datasize="8" Datatype="wire" Name="sfifo1_data_out" Parent="sfifo_test"/>
 <Wire To="sfifo_test>sfifo_cnt" From="sfifo_test#sfifo1>sfifo_cnt" Datasize="4" Datatype="wire" Name="sfifo1_sfifo_cnt" Parent="sfifo_test"/>
</Module>
