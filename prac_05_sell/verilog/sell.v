module sell(
	clk,
	nrst,
	half_dollar,
	one_dollar,
	half_out,
	dispense);

	//---Ports declearation: generated by Robei---
	input clk;
	input nrst;
	input half_dollar;
	input one_dollar;
	output half_out;
	output dispense;

	wire clk;
	wire nrst;
	wire half_dollar;
	wire one_dollar;
	reg half_out;
	reg dispense;

	//----Code starts here: integrated by Robei-----
		reg [2:0] ns;
		reg [2:0] cs;
		
		parameter [2:0] 
					IDLE			   = 3'h0,
					HALF 			= 3'h1,
					ONE  			= 3'h2,
					ONE_HALF = 3'h3,
					TWO 			   	= 3'h4;
		
		always @(posedge clk or negedge nrst) begin
			if(!nrst) begin 
				cs <= #1 IDLE;
				ns <= #1 IDLE;
			end
			else begin
				cs <= #1 ns;
				ns <= ns;
			end
		end
		
		always @(half_dollar or one_dollar) begin
			case(cs)
				IDLE: begin
					if(half_dollar) ns = HALF;
					else if(one_dollar) ns = ONE;
				end
				HALF: begin
					if(half_dollar) ns = ONE;
					else if(one_dollar) ns = ONE_HALF;
				end
				ONE: begin
					if(half_dollar) ns = ONE_HALF;
					else if(one_dollar) ns = TWO;
				end
				ONE_HALF: begin
					if(half_dollar) ns = TWO;
					else if(one_dollar) begin
						ns = IDLE;
					end			
				end
				TWO: begin
					if(half_dollar) begin
						ns = IDLE;
					end
					else if(one_dollar) begin
						ns = IDLE;
					end
				end
				default: begin
					ns = IDLE;
				end
			endcase
		end
		
		
		  always @( posedge clk or negedge nrst ) begin 
		    if ( !nrst ) begin 
		      {half_out,dispense} <= 2'b00; 
		    end
		    else begin 
		      case ( cs ) 
		        IDLE:{half_out,dispense} <= #1 2'b00; 
		        HALF:{half_out,dispense} <= #1 2'b00;
		        ONE :{half_out,dispense} <= #1 2'b00; 
		        ONE_HALF: begin
		          if(one_dollar) begin
		            {half_out,dispense} <= #1 2'b01; 
		          end
		          else begin
						{half_out,dispense} <= #1 2'b00;
					end
				 end
		        TWO:  begin
		          if(half_dollar) begin
		           {half_out,dispense} <= #1 2'b01;
		          end
		          else if(one_dollar) begin
		            {half_out,dispense} <= #1 2'b11;
		          end
		        end
		        default begin
		          {half_out,dispense} <= #1 2'b00;
		        end
		      endcase 
		    end 
		  end
	
	
endmodule    //sell

