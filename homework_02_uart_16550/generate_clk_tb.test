<!DOCTYPE Robei>
<Module Height="600" Name="generate_clk_tb" Include="uart_def.v" File="Current/generate_clk_tb.test" Time_Scale="" Comment="" Color="#d3d3d3" X="0" Width="900" Class="module" Y="0" Type="testbench" Code="initial begin&#xa;  clk = 0;&#xa;end&#xa;always #42 clk = ~clk;  // 12MHz&#xa;&#xa;initial begin&#xa;  rst_n = 1;&#xa;  repeat(1) @( posedge clk ) #1;&#xa;  rst_n = 0;&#xa;  repeat(1) @( posedge clk ) #1;&#xa;  rst_n = 1;&#xa;end&#xa;&#xa;initial begin&#xa;  baud_rate = 0;&#xa;  repeat( 10 ) @( posedge clk ) #1;&#xa;  baud_rate = 9600;&#xa;  repeat( 500 ) @( posedge clk ) #1;&#xa;  baud_rate = 115200;&#xa;  repeat( 1000 ) @( posedge clk ) #1;&#xa;  $finish;&#xa;end&#xa;&#xa;&#xa;" Parent="0">
 <Module Height="160" Name="generate_clk1" Parameters="" Include="uart_def.v" File="Current/generate_clk.model" Comment="" Color="#d3d3d3" X="380" Width="160" Class="generate_clk" Y="216" Type="model" Code="parameter CLOCK = 12000000;  // This parameter is equal to the external crystal oscillator on FPGA &#xa;&#xa;wire [`DIV_LENGTH-1:0] division;&#xa;assign division = CLOCK / ( 16 * baud_rate );&#xa;&#xa;//&#xa;// Even division, which duty is 50%&#xa;//&#xa;reg                       clk_even;&#xa;reg     [`DIV_LENGTH-1:0] cnt_even;&#xa;wire    [`DIV_LENGTH-1:0] division_even;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    cnt_even &lt;= #`DEL `DIV_LENGTH'd0;&#xa;    clk_even &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else if( division[0]==1 ) begin&#xa;    cnt_even &lt;= #`DEL `DIV_LENGTH'd0;&#xa;    clk_even &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    if( cnt_even == ( division_even - 1 ) ) begin&#xa;      cnt_even &lt;= #`DEL `DIV_LENGTH'd0;&#xa;      clk_even &lt;= #`DEL ~clk_even;&#xa;    end&#xa;    else begin&#xa;      cnt_even &lt;= #`DEL cnt_even + 1'd1;&#xa;      clk_even &lt;= #`DEL clk_even;&#xa;    end&#xa;  end&#xa;end     &#xa;&#xa;assign division_even = ( division[0] == 0 ) ? ( division >> 1 ) : 0;&#xa;&#xa;//&#xa;// Odd division, which duty is 50%&#xa;//&#xa;reg                     clk_p;&#xa;reg                     clk_n;&#xa;wire                    clk_odd;&#xa;reg   [`DIV_LENGTH-1:0] cnt_p;&#xa;reg   [`DIV_LENGTH-1:0] cnt_n;&#xa;wire  [`DIV_LENGTH-1:0] division_odd;&#xa;&#xa;//&#xa;// Rising edge&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    clk_p &lt;= #`DEL 1'b0;&#xa;    cnt_p &lt;= #`DEL `DIV_LENGTH'b0;&#xa;  end&#xa;  else if( division[0]==0 ) begin    &#xa;    clk_p &lt;= #`DEL 1'b0;&#xa;    cnt_p &lt;= #`DEL `DIV_LENGTH'b0;&#xa;  end&#xa;  else begin&#xa;    if( cnt_p == division_odd - 1 ) begin&#xa;      clk_p &lt;= #`DEL ~clk_p;&#xa;      cnt_p &lt;= #`DEL `DIV_LENGTH'b0;&#xa;    end&#xa;    else if( cnt_p == ( ( division - 1 ) >> 1 ) )begin&#xa;      clk_p &lt;= #`DEL ~clk_p;&#xa;      cnt_p &lt;= #`DEL cnt_p + 1'b1;&#xa;    end&#xa;    else begin&#xa;      clk_p &lt;= #`DEL clk_p;&#xa;      cnt_p &lt;= #`DEL cnt_p + 1'b1;&#xa;    end&#xa;  end&#xa;end      &#xa;&#xa;//&#xa;// Falling edge&#xa;always @( negedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    clk_n &lt;= #`DEL 1'b0;&#xa;    cnt_n &lt;= #`DEL `DIV_LENGTH'b0;&#xa;  end&#xa;  else if( division[0] == 0 ) begin    &#xa;    clk_n &lt;= #`DEL 1'b0;&#xa;    cnt_n &lt;= #`DEL `DIV_LENGTH'b0;&#xa;  end&#xa;  else begin&#xa;    if( cnt_n == division_odd - 1 ) begin&#xa;      clk_n &lt;= #`DEL ~clk_n;&#xa;      cnt_n &lt;= #`DEL `DIV_LENGTH'b0;&#xa;    end&#xa;    else if( cnt_n == ( ( division - 1 ) >> 1 ) )begin&#xa;      clk_n &lt;= #`DEL ~clk_n;&#xa;      cnt_n &lt;= #`DEL cnt_n + `DIV_LENGTH'b1;&#xa;    end&#xa;    else begin&#xa;      clk_n &lt;= #`DEL clk_n;&#xa;      cnt_n &lt;= #`DEL cnt_n + `DIV_LENGTH'b1;&#xa;    end&#xa;  end&#xa;end     &#xa;&#xa;&#xa;assign division_odd = ( division[0] == 1 ) ? division : 0;&#xa;assign clk_odd = clk_n | clk_p;&#xa;&#xa;assign clk_out = ( division[0] == 1 ) ? clk_odd : clk_even;" Parent="generate_clk_tb">
  <Port Height="20" Name="clk" Connect="" Side="left" Color="#0000ff" X="-0.125" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.1375" Inout="input" Parent="generate_clk1"/>
  <Port Height="20" Name="rst_n" Connect="" Side="left" Color="#00ffff" X="-0.125" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.3375" Inout="input" Parent="generate_clk1"/>
  <Port Height="20" Name="baud_rate" Connect="" Side="left" Color="#5f9ea0" X="-0.125" Width="20" Function="" Datatype="wire" Datasize="19" Y="0.5375" Inout="input" Parent="generate_clk1"/>
  <Port Height="20" Name="clk_out" Connect="" Side="right" Color="#d2691e" X="0.875" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.26875" Inout="output" Parent="generate_clk1"/>
 </Module>
 <Port Height="20" Name="clk" Side="left" Color="#0000ff" X="-0.0222222" Width="20" Function="" Datatype="reg" Datasize="1" Y="0.183333" Inout="input" Parent="generate_clk_tb"/>
 <Port Height="20" Name="rst_n" Side="left" Color="#00ffff" X="-0.0222222" Width="20" Function="" Datatype="reg" Datasize="1" Y="0.383333" Inout="input" Parent="generate_clk_tb"/>
 <Port Height="20" Name="baud_rate" Side="left" Color="#5f9ea0" X="-0.0222222" Width="20" Function="" Datatype="reg" Datasize="19" Y="0.583333" Inout="input" Parent="generate_clk_tb"/>
 <Port Height="20" Name="clk_out" Side="right" Color="#d2691e" X="0.977778" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.316667" Inout="output" Parent="generate_clk_tb"/>
 <Wire From="generate_clk_tb>clk" Name="generate_clk_tb_clk" Datatype="wire" Datasize="1" To="generate_clk_tb#generate_clk1>clk" Parent="generate_clk_tb"/>
 <Wire From="generate_clk_tb>rst_n" Name="generate_clk_tb_rst_n" Datatype="wire" Datasize="1" To="generate_clk_tb#generate_clk1>rst_n" Parent="generate_clk_tb"/>
 <Wire From="generate_clk_tb>baud_rate" Name="generate_clk_tb_baud_rate" Datatype="wire" Datasize="19" To="generate_clk_tb#generate_clk1>baud_rate" Parent="generate_clk_tb"/>
 <Wire From="generate_clk_tb#generate_clk1>clk_out" Name="generate_clk1_clk_out" Datatype="wire" Datasize="1" To="generate_clk_tb>clk_out" Parent="generate_clk_tb"/>
</Module>
