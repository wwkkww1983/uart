<!DOCTYPE Robei>
<Module X="0" File="Current/generate_clk.model" Class="module" Height="600" Width="900" Comment="" Color="#d3d3d3" Parent="0" Name="generate_clk" Parameters="" Y="0" Include="uart_def.v" Type="module" Code="parameter CLOCK = 12000000;  // This parameter is equal to the external crystal oscillator on FPGA &#xa;&#xa;wire [`DIV_LENGTH-1:0] division;&#xa;assign division = CLOCK / ( 16 * baud_rate );&#xa;&#xa;//&#xa;// Even division, which duty is 50%&#xa;//&#xa;reg                       clk_even;&#xa;reg     [`DIV_LENGTH-1:0] cnt_even;&#xa;wire    [`DIV_LENGTH-1:0] division_even;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    cnt_even &lt;= #`DEL `DIV_LENGTH'd0;&#xa;    clk_even &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else if( division[0]==1 ) begin&#xa;    cnt_even &lt;= #`DEL `DIV_LENGTH'd0;&#xa;    clk_even &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    if( cnt_even == ( division_even - 1 ) ) begin&#xa;      cnt_even &lt;= #`DEL `DIV_LENGTH'd0;&#xa;      clk_even &lt;= #`DEL ~clk_even;&#xa;    end&#xa;    else begin&#xa;      cnt_even &lt;= #`DEL cnt_even + 1'd1;&#xa;      clk_even &lt;= #`DEL clk_even;&#xa;    end&#xa;  end&#xa;end     &#xa;&#xa;assign division_even = ( division[0] == 0 ) ? ( division >> 1 ) : 0;&#xa;&#xa;//&#xa;// Odd division, which duty is 50%&#xa;//&#xa;reg                     clk_p;&#xa;reg                     clk_n;&#xa;wire                    clk_odd;&#xa;reg   [`DIV_LENGTH-1:0] cnt_p;&#xa;reg   [`DIV_LENGTH-1:0] cnt_n;&#xa;wire  [`DIV_LENGTH-1:0] division_odd;&#xa;&#xa;//&#xa;// Rising edge&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    clk_p &lt;= #`DEL 1'b0;&#xa;    cnt_p &lt;= #`DEL `DIV_LENGTH'b0;&#xa;  end&#xa;  else if( division[0]==0 ) begin    &#xa;    clk_p &lt;= #`DEL 1'b0;&#xa;    cnt_p &lt;= #`DEL `DIV_LENGTH'b0;&#xa;  end&#xa;  else begin&#xa;    if( cnt_p == division_odd - 1 ) begin&#xa;      clk_p &lt;= #`DEL ~clk_p;&#xa;      cnt_p &lt;= #`DEL `DIV_LENGTH'b0;&#xa;    end&#xa;    else if( cnt_p == ( ( division - 1 ) >> 1 ) )begin&#xa;      clk_p &lt;= #`DEL ~clk_p;&#xa;      cnt_p &lt;= #`DEL cnt_p + 1'b1;&#xa;    end&#xa;    else begin&#xa;      clk_p &lt;= #`DEL clk_p;&#xa;      cnt_p &lt;= #`DEL cnt_p + 1'b1;&#xa;    end&#xa;  end&#xa;end      &#xa;&#xa;//&#xa;// Falling edge&#xa;always @( negedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    clk_n &lt;= #`DEL 1'b0;&#xa;    cnt_n &lt;= #`DEL `DIV_LENGTH'b0;&#xa;  end&#xa;  else if( division[0] == 0 ) begin    &#xa;    clk_n &lt;= #`DEL 1'b0;&#xa;    cnt_n &lt;= #`DEL `DIV_LENGTH'b0;&#xa;  end&#xa;  else begin&#xa;    if( cnt_n == division_odd - 1 ) begin&#xa;      clk_n &lt;= #`DEL ~clk_n;&#xa;      cnt_n &lt;= #`DEL `DIV_LENGTH'b0;&#xa;    end&#xa;    else if( cnt_n == ( ( division - 1 ) >> 1 ) )begin&#xa;      clk_n &lt;= #`DEL ~clk_n;&#xa;      cnt_n &lt;= #`DEL cnt_n + `DIV_LENGTH'b1;&#xa;    end&#xa;    else begin&#xa;      clk_n &lt;= #`DEL clk_n;&#xa;      cnt_n &lt;= #`DEL cnt_n + `DIV_LENGTH'b1;&#xa;    end&#xa;  end&#xa;end     &#xa;&#xa;&#xa;assign division_odd = ( division[0] == 1 ) ? division : 0;&#xa;assign clk_odd = clk_n | clk_p;&#xa;&#xa;assign clk_out = ( division[0] == 1 ) ? clk_odd : clk_even;">
 <Port X="-0.0222222" Datatype="wire" Datasize="1" Height="20" Width="20" Color="#0000ff" Parent="generate_clk" Name="clk" Y="0.183333" Inout="input" Function="" Side="left"/>
 <Port X="-0.0222222" Datatype="wire" Datasize="1" Height="20" Width="20" Color="#00ffff" Parent="generate_clk" Name="rst_n" Y="0.383333" Inout="input" Function="" Side="left"/>
 <Port X="-0.0222222" Datatype="wire" Datasize="19" Height="20" Width="20" Color="#5f9ea0" Parent="generate_clk" Name="baud_rate" Y="0.583333" Inout="input" Function="" Side="left"/>
 <Port X="0.977778" Datatype="wire" Datasize="1" Height="20" Width="20" Color="#d2691e" Parent="generate_clk" Name="clk_out" Y="0.316667" Inout="output" Function="" Side="right"/>
</Module>
