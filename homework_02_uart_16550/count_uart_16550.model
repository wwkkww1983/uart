<!DOCTYPE Robei>
<Module Name="count_uart_16550" Type="module" Width="900" Class="module" Comment="" X="0" Parameters="" Y="0" Parent="0" Height="600" Color="#d3d3d3" Include="" File="Current/count_uart_16550.model" Code="&#xa;&#xa;&#xa;">
 <Module Name="countdown2" Type="model" Width="160" Class="countdown" Comment="" X="110.774" Parameters="" Y="346.03" Parent="count_uart_16550" Height="160" Color="#d3d3d3" Include="" File="Current/countdown.model" Code="`define DEL 1&#xa;&#xa;//&#xa;// Count enable edge detected&#xa;//&#xa;reg     count_en_q;&#xa;reg     count_en_start;&#xa;wire    count_en_flag;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    count_en_q &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    count_en_q &lt;= #`DEL count_en;&#xa;  end&#xa;end&#xa;assign count_en_flag = ~count_en_q &amp;&amp; ( count_en );&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    count_en_start &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else if( count_en_flag )begin&#xa;    count_en_start &lt;= #`DEL 1'b1;&#xa;  end&#xa;  else if( count == 8'd99 ) begin&#xa;    count_en_start &lt;= #`DEL 1'b0;&#xa;  end&#xa;end      &#xa;&#xa;&#xa;//&#xa;// Tx_done edge detected&#xa;// Tx_done signal comes from uart unit, while uart transmit one data done, begining next count &#xa;//&#xa;reg     tx_done_q;&#xa;wire    tx_done_n;&#xa;wire    tx_done_flag;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    tx_done_q &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    tx_done_q &lt;= #`DEL tx_done_n;&#xa;  end&#xa;end&#xa;assign tx_done_n = ~tx_done;&#xa;assign tx_done_flag = ~tx_done_q &amp;&amp; ( tx_done_n );&#xa;&#xa;//&#xa;// Countdown and output&#xa;//&#xa;reg [7:0] count;&#xa;   &#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    count      &lt;= #`DEL 8'd0;&#xa;    count_full &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else if( count_en_flag ) begin&#xa;    count &lt;= #`DEL 1'b0;&#xa;    count_full &lt;= #`DEL 1'b1;&#xa;  end&#xa;  else if( count_en_start ) begin&#xa;    if( tx_done_flag ) begin&#xa;      if( count == 8'd99 )begin&#xa;        count      &lt;= #`DEL 8'd0;&#xa;        count_full &lt;= #`DEL 1'b0;&#xa;      end&#xa;      else begin&#xa;        count      &lt;= #`DEL count + 1;&#xa;        count_full &lt;= #`DEL 1'b1;&#xa;      end&#xa;    end     &#xa;    else begin&#xa;      count      &lt;= #`DEL count;&#xa;      count_full &lt;= #`DEL 1'b0;&#xa;    end&#xa;  end  &#xa;  else begin&#xa;    count      &lt;= #`DEL count;&#xa;    count_full &lt;= #`DEL 1'b0;&#xa;  end&#xa;end&#xa;&#xa;assign count_out  =  count;&#xa;">
  <Port Connect="" Name="clk" Inout="input" Function="" Width="20" Side="left" X="-0.125" Y="0.1" Datatype="wire" Parent="countdown2" Height="20" Color="#0000ff" Datasize="1"/>
  <Port Connect="" Name="rst_n" Inout="input" Function="" Width="20" Side="left" X="-0.125" Y="0.2625" Datatype="wire" Parent="countdown2" Height="20" Color="#00ffff" Datasize="1"/>
  <Port Connect="" Name="count_en" Inout="input" Function="" Width="20" Side="left" X="-0.125" Y="0.425" Datatype="wire" Parent="countdown2" Height="20" Color="#8a2be2" Datasize="1"/>
  <Port Connect="" Name="count_full" Inout="output" Function="" Width="20" Side="right" X="0.875" Y="0.1875" Datatype="reg" Parent="countdown2" Height="20" Color="#a52a2a" Datasize="1"/>
  <Port Connect="" Name="count_out" Inout="output" Function="" Width="20" Side="right" X="0.875" Y="0.4375" Datatype="wire" Parent="countdown2" Height="20" Color="#7fff00" Datasize="8"/>
  <Port Connect="" Name="tx_done" Inout="input" Function="" Width="20" Side="left" X="-0.125" Y="0.5875" Datatype="wire" Parent="countdown2" Height="20" Color="#d2691e" Datasize="1"/>
 </Module>
 <Module Name="uart2" Type="model" Width="147" Class="uart" Comment="" X="609.531" Parameters="" Y="35" Parent="count_uart_16550" Height="301" Color="#d3d3d3" Include="uart_def.v" File="Current/uart.model" Code="//&#xa;// Parity is equal to 0 means that there should not have parity bit. Otherwise, there should be one parity bit.&#xa;//&#xa;wire       parity_bit;&#xa;assign parity_bit = ( ~|parity ) ? 0 : 1; &#xa;&#xa;//&#xa;// This block is used to receive data&#xa;//&#xa;&#xa;//&#xa;// Edge deteted&#xa;//&#xa;&#xa;reg                     rx_q;&#xa;wire                    rx_start;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    rx_q &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    rx_q &lt;= #`DEL rx;&#xa;  end&#xa;end      &#xa;// Falling edge effective&#xa;assign rx_start = ( rx_q &amp;&amp; ~rx );&#xa;&#xa;//&#xa;// Counter of rx&#xa;//&#xa;&#xa;reg  [7:0]  rx_cnt;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if ( ~rst_n ) begin&#xa;    rx_cnt &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else if ( ns_rx == IDLE_RX || ns_rx == ERROR_RX ) begin&#xa;    rx_cnt &lt;= #`DEL 8'd0;&#xa;  end  // If the next status is IDLE or ERROR, then don't count&#xa;  else begin&#xa;    rx_cnt &lt;= #`DEL rx_cnt + 1'd1;&#xa;  end  // If the next status is not IDLE or ERROR, then begin to count&#xa;end&#xa;&#xa;//&#xa;// Three paragraph FSM of receive &#xa;//&#xa;reg       [3:0]   cs_rx;&#xa;reg       [3:0]   ns_rx;&#xa;parameter [3:0]   IDLE_RX   = 4'b0000,&#xa;  START_RX     = 4'b0001,&#xa;  RECEIVE_RX   = 4'b0010,&#xa;  STOP_RX      = 4'b0100,&#xa;  ERROR_RX     = 4'b1000;&#xa;&#xa;// FSM one&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if ( !rst_n ) begin&#xa;    cs_rx &lt;= IDLE_RX;&#xa;  end&#xa;  else begin&#xa;    cs_rx &lt;= ns_rx;&#xa;  end&#xa;end&#xa;&#xa;// FSM two&#xa;//&#xa;&#xa;// cnt_parity_rx means that rx_cnt has counted to the parity bit&#xa;wire [7:0] cnt_parity_rx;&#xa;assign cnt_parity_rx = ( 24 + ( data_bit + parity_bit ) * 16 ); &#xa;&#xa;always @( * ) begin&#xa;  ns_rx = IDLE_RX;&#xa;  case ( cs_rx )&#xa;    IDLE_RX: begin&#xa;      if( rx_start ) begin&#xa;        ns_rx = START_RX;  // If there has a falling edge in rx, then transmit to START&#xa;      end&#xa;      else begin&#xa;        ns_rx = IDLE_RX;&#xa;      end&#xa;    end&#xa;    START_RX: begin &#xa;      if ( rx &amp;&amp; rx_cnt &lt; 8 ) begin&#xa;        ns_rx = ERROR_RX;  // If rx has a high volage in START status, there must be an error&#xa;      end &#xa;      else if( rx_cnt == 8 ) begin &#xa;        ns_rx = RECEIVE_RX;  // If rx can remain low volage for 8 cycles, we believe communication is correct, then begin to receive data&#xa;      end&#xa;      else begin &#xa;        ns_rx = START_RX; &#xa;      end&#xa;    end&#xa;    RECEIVE_RX: begin&#xa;      if ( rx_cnt == cnt_parity_rx ) begin&#xa;        ns_rx = STOP_RX;&#xa;      end &#xa;      else begin &#xa;        ns_rx = RECEIVE_RX;&#xa;      end&#xa;    end &#xa;    STOP_RX: begin&#xa;      if( rx_cnt == cnt_parity_rx + ( stop_bit * 16 ) ) begin&#xa;        ns_rx = IDLE_RX;&#xa;      end&#xa;      else begin&#xa;        ns_rx = STOP_RX;&#xa;      end&#xa;    end&#xa;    ERROR_RX: begin &#xa;      ns_rx = IDLE_RX; &#xa;    end &#xa;  endcase&#xa;end&#xa;&#xa;// FSM three&#xa;//&#xa;&#xa;reg [3:0] count_cycle_rx; // Used to count the bit num of received data&#xa;reg [8:0] data_received_temp;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin &#xa;  if ( !rst_n ) begin &#xa;    data_received_temp &lt;= #`DEL 9'd0;&#xa;    rx_buf_full        &lt;= #`DEL 1'b0;&#xa;    count_cycle_rx     &lt;= #`DEL 4'd1;&#xa;  end&#xa;  else begin &#xa;    case ( ns_rx )&#xa;      IDLE_RX: begin&#xa;        data_received_temp &lt;= #`DEL 9'd0;&#xa;        rx_buf_full        &lt;= #`DEL 1'b0;&#xa;        count_cycle_rx     &lt;= #`DEL 4'd1;&#xa;      end&#xa;      START_RX: begin&#xa;        data_received_temp &lt;= #`DEL 9'd0;&#xa;        rx_buf_full        &lt;= #`DEL 1'b0;&#xa;        count_cycle_rx     &lt;= #`DEL 4'd1;&#xa;      end&#xa;      RECEIVE_RX: begin&#xa;        if( count_cycle_rx == ( data_bit + parity_bit ) &amp;&amp; ( rx_cnt == 24 + 16 * ( count_cycle_rx ) ) ) begin&#xa;          data_received_temp[count_cycle_rx - 1] &lt;= #`DEL rx;  // Parity check bit&#xa;          rx_buf_full                            &lt;= #`DEL 1'b0;&#xa;          count_cycle_rx                         &lt;= #`DEL 4'd1; // Reset count_cycle_rx &#xa;        end  // Receive parity check bit&#xa;        else if( rx_cnt == ( 24 + ( count_cycle_rx - 1 ) * 16 ) ) begin&#xa;          data_received_temp[count_cycle_rx - 1] &lt;= #`DEL rx;&#xa;          rx_buf_full                            &lt;= #`DEL 1'b0;&#xa;          count_cycle_rx                         &lt;= #`DEL count_cycle_rx + 1'b1;&#xa;        end  // Data bit&#xa;      end&#xa;      STOP_RX: begin&#xa;        if( rx_cnt == cnt_parity_rx + ( stop_bit * 16 ) - 8 ) begin  // -8 is to catch the stop bit&#xa;          data_received_temp &lt;= #`DEL data_received_temp;&#xa;          rx_buf_full        &lt;= #`DEL 1'b1;&#xa;          count_cycle_rx     &lt;= #`DEL count_cycle_rx;&#xa;        end&#xa;      end&#xa;      ERROR_RX: begin        &#xa;        data_received_temp &lt;= #`DEL 9'd0;&#xa;        rx_buf_full        &lt;= #`DEL 1'b0;&#xa;        count_cycle_rx     &lt;= #`DEL 4'd1; &#xa;      end&#xa;    endcase &#xa;  end &#xa;end      &#xa;&#xa;reg [8:0] data_received_check;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    data_received_check &lt;= #`DEL 9'b0;&#xa;  end&#xa;  else if( ns_rx == STOP_RX ) begin&#xa;    data_received_check &lt;= #`DEL data_received_temp;  // Ensure data can be collected&#xa;  end&#xa;end           &#xa;&#xa;always @( posedge clk ) begin&#xa;  case( parity )&#xa;    3'b000:begin&#xa;      data_received = data_received_check[7:0];&#xa;    end&#xa;    3'b001:begin&#xa;      if( data_received_check[8] == ~^data_received_check[7:0] ) begin&#xa;        data_received = data_received_check[7:0];&#xa;      end&#xa;      else begin&#xa;        $display( &quot;UART line 234: Odd check error!&quot; );&#xa;        $display( &quot;data_received=9'b%b_%b_%b&quot;,data_received_check[8],data_received_check[7:4],data_received_check[3:0] );&#xa;        $finish;&#xa;      end&#xa;    end&#xa;    3'b010:begin&#xa;      if( data_received_check[8] == ^data_received_check[7:0] ) begin&#xa;        data_received = data_received_check[7:0];&#xa;      end&#xa;      else begin&#xa;        $display( &quot;UART line 244: Even check error!&quot; );&#xa;        $display( &quot;data_received=9'b%b_%b_%b&quot;,data_received_check[8],data_received_check[7:4],data_received_check[3:0] );&#xa;        $finish;&#xa;      end&#xa;    end&#xa;    3'b011:begin&#xa;      if( data_received_check[8] == 0 ) begin&#xa;        data_received = data_received_check[7:0];&#xa;      end&#xa;      else begin&#xa;        $display( &quot;UART line 254: Zero check error!&quot; );&#xa;        $display( &quot;data_received=9'b%b_%b_%b&quot;,data_received_check[8],data_received_check[7:4],data_received_check[3:0] );&#xa;        $finish;&#xa;      end&#xa;    end&#xa;    3'b100:begin&#xa;      if( data_received_check[8] == 1 ) begin&#xa;        data_received = data_received_check[7:0];&#xa;      end&#xa;      else begin&#xa;        $display( &quot;UART line 264: One check error!&quot; );&#xa;        $display( &quot;data_received=9'b%b_%b_%b&quot;,data_received_check[8],data_received_check[7:4],data_received_check[3:0] );&#xa;        $finish;&#xa;      end&#xa;    end&#xa;  endcase&#xa;end  &#xa;&#xa;&#xa;//&#xa;// This block is used to send data&#xa;//&#xa;&#xa;// &#xa;// Edge deteted&#xa;//&#xa;&#xa;reg         tx_en_q;&#xa;wire        tx_start;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    tx_en_q &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    tx_en_q &lt;= #`DEL tx_en;&#xa;  end&#xa;end      &#xa;// Rising edge effective&#xa;assign tx_start = ( ~tx_en_q &amp;&amp; tx_en );&#xa;&#xa;//&#xa;// Transmit data_send to shift_reg&#xa;//&#xa;&#xa;reg  [8:0]  shift_reg;&#xa;&#xa;always @( posedge tx_start or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    shift_reg &lt;= #`DEL 9'd0;&#xa;  end&#xa;  else begin&#xa;    shift_reg[7:0] &lt;= #`DEL data_send;&#xa;    //&#xa;    // Parity check bit&#xa;    case( parity )&#xa;      3'b000: shift_reg[8]   &lt;= #`DEL 0;   // No parity check&#xa;      3'b001: shift_reg[8]   &lt;= #`DEL ( ^data_send ) ? 0 : 1;  // Odd check&#xa;      3'b010: shift_reg[8]   &lt;= #`DEL ( ^data_send ) ? 1 : 0;  // Even check&#xa;      3'b011: shift_reg[8]   &lt;= #`DEL 0;  // 0 check&#xa;      3'b100: shift_reg[8]   &lt;= #`DEL 1;  // 1 check&#xa;    endcase&#xa;  end&#xa;end      &#xa;&#xa;//&#xa;// Frequence division&#xa;//&#xa;&#xa;reg  [7:0]  tx_cnt;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if ( ~rst_n ) begin&#xa;    tx_cnt &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else if ( ns_tx == IDLE_TX ) begin&#xa;    tx_cnt &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else begin&#xa;    tx_cnt &lt;= #`DEL tx_cnt + 1'b1;&#xa;  end&#xa;end&#xa;&#xa;//&#xa;// Three paragraph FSM of send data&#xa;//&#xa;reg       [2:0]   cs_tx;&#xa;reg       [2:0]   ns_tx;&#xa;parameter [2:0]  IDLE_TX   = 3'b000,&#xa;  START_TX     = 3'b001,&#xa;  SEND_TX      = 3'b010,&#xa;  STOP_TX      = 3'b100;&#xa;&#xa;//&#xa;// FSM one&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if ( !rst_n ) begin&#xa;    cs_tx &lt;= IDLE_TX;&#xa;  end&#xa;  else begin&#xa;    cs_tx &lt;= ns_tx;&#xa;  end&#xa;end&#xa;&#xa;// &#xa;// FSM two&#xa;&#xa;// cnt_parity_tx means that tx_cnt has counted to the parity bit&#xa;wire [7:0] cnt_parity_tx;&#xa;assign cnt_parity_tx = ( data_bit + parity_bit + 1 ) * 16; &#xa;&#xa;always @( * ) begin&#xa;  ns_tx = IDLE_TX;&#xa;  case ( cs_tx )&#xa;    IDLE_TX: begin&#xa;      if ( tx_start ) begin&#xa;        ns_tx = START_TX;&#xa;      end&#xa;      else begin&#xa;        ns_tx = IDLE_TX;&#xa;      end&#xa;    end&#xa;    START_TX: begin&#xa;      ns_tx = SEND_TX;&#xa;    end &#xa;    SEND_TX: begin &#xa;      if ( tx_cnt == cnt_parity_tx ) begin&#xa;        ns_tx = STOP_TX; &#xa;      end &#xa;      else begin &#xa;        ns_tx = SEND_TX;&#xa;      end&#xa;    end&#xa;    STOP_TX: begin &#xa;      if ( tx_cnt == cnt_parity_tx + stop_bit * 16 ) begin&#xa;        ns_tx = IDLE_TX; &#xa;      end&#xa;      else begin&#xa;        ns_tx = STOP_TX;&#xa;      end&#xa;    end &#xa;  endcase &#xa;end&#xa;&#xa; &#xa;// FSM three &#xa;//&#xa;&#xa;reg [3:0] count_cycle_tx; // Used to count the bit num of send data&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin &#xa;  if ( !rst_n ) begin &#xa;    tx          &lt;= #`DEL 1'b1;&#xa;    tx_buf_full &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin &#xa;    case ( ns_tx )&#xa;      IDLE_TX: begin&#xa;        tx             &lt;= #`DEL 1'b1;&#xa;        tx_buf_full    &lt;= #`DEL 1'b0;&#xa;        count_cycle_tx &lt;= #`DEL 4'd1;&#xa;      end&#xa;      START_TX: begin&#xa;        tx             &lt;= #`DEL 1'b0;&#xa;        tx_buf_full    &lt;= #`DEL 1'b0;&#xa;        count_cycle_tx &lt;= #`DEL 4'd1;&#xa;      end&#xa;      SEND_TX: begin&#xa;        if( ( count_cycle_tx == parity_bit + data_bit + 1 ) &amp;&amp; ( tx_cnt == 16 * count_cycle_tx ) ) begin&#xa;          tx             &lt;= #`DEL shift_reg[count_cycle_tx-1];&#xa;          tx_buf_full    &lt;= #`DEL 1'b1;&#xa;          count_cycle_tx &lt;= #`DEL 4'd1;&#xa;        end&#xa;        else if( tx_cnt == 16 * count_cycle_tx ) begin&#xa;          tx             &lt;= #`DEL shift_reg[count_cycle_tx-1];&#xa;          tx_buf_full    &lt;= #`DEL 1'b1;&#xa;          count_cycle_tx &lt;= #`DEL count_cycle_tx + 1'b1;&#xa;        end&#xa;      end&#xa;      STOP_TX: begin&#xa;        tx             &lt;= #`DEL 1'b1;&#xa;        tx_buf_full    &lt;= #`DEL 1'b0;&#xa;        count_cycle_tx &lt;= #`DEL 4'd1;&#xa;      end&#xa;    endcase &#xa;  end &#xa;end      &#xa;">
  <Port Connect="" Name="clk" Inout="input" Function="" Width="20" Side="left" X="-0.136054" Y="0.0664452" Datatype="wire" Parent="uart2" Height="20" Color="#0000ff" Datasize="1"/>
  <Port Connect="" Name="rst_n" Inout="input" Function="" Width="20" Side="left" X="-0.136054" Y="0.166113" Datatype="wire" Parent="uart2" Height="20" Color="#00ffff" Datasize="1"/>
  <Port Connect="" Name="rx" Inout="input" Function="" Width="20" Side="left" X="-0.136054" Y="0.265781" Datatype="wire" Parent="uart2" Height="20" Color="#a52a2a" Datasize="1"/>
  <Port Connect="" Name="tx_en" Inout="input" Function="" Width="20" Side="left" X="-0.136054" Y="0.365449" Datatype="wire" Parent="uart2" Height="20" Color="#d2691e" Datasize="1"/>
  <Port Connect="" Name="data_send" Inout="input" Function="" Width="20" Side="left" X="-0.136054" Y="0.465116" Datatype="wire" Parent="uart2" Height="20" Color="#7fff00" Datasize="8"/>
  <Port Connect="3'b010" Name="parity" Inout="input" Function="" Width="20" Side="left" X="-0.136054" Y="0.564784" Datatype="wire" Parent="uart2" Height="20" Color="#dc143c" Datasize="3"/>
  <Port Connect="2'b01" Name="stop_bit" Inout="input" Function="Which can be 1 or 2" Width="20" Side="left" X="-0.136054" Y="0.664452" Datatype="wire" Parent="uart2" Height="20" Color="#b8860b" Datasize="2"/>
  <Port Connect="4'd8" Name="data_bit" Inout="input" Function=" It means the length of data, which can be 5, 6, 7 and 8" Width="20" Side="left" X="-0.136054" Y="0.76412" Datatype="wire" Parent="uart2" Height="20" Color="#ff8c00" Datasize="4"/>
  <Port Connect="" Name="tx_buf_full" Inout="output" Function="" Width="20" Side="right" X="0.863946" Y="0.13289" Datatype="reg" Parent="uart2" Height="20" Color="#0000ff" Datasize="1"/>
  <Port Connect="" Name="tx" Inout="output" Function="" Width="20" Side="right" X="0.863946" Y="0.465116" Datatype="reg" Parent="uart2" Height="20" Color="#8a2be2" Datasize="1"/>
  <Port Connect="" Name="data_received" Inout="output" Function="" Width="20" Side="right" X="0.863946" Y="0.631229" Datatype="reg" Parent="uart2" Height="20" Color="#a52a2a" Datasize="8"/>
  <Port Connect="" Name="rx_buf_full" Inout="output" Function="" Width="20" Side="right" X="0.863946" Y="0.299003" Datatype="reg" Parent="uart2" Height="20" Color="#5f9ea0" Datasize="1"/>
 </Module>
 <Port Name="clk" Inout="input" Function="" Width="20" Side="left" X="-0.0222222" Y="0.183333" Datatype="wire" Parent="count_uart_16550" Height="20" Color="#faebd7" Datasize="1"/>
 <Port Name="rst_n" Inout="input" Function="" Width="20" Side="left" X="-0.0222222" Y="0.383333" Datatype="wire" Parent="count_uart_16550" Height="20" Color="#00ffff" Datasize="1"/>
 <Port Name="count_en" Inout="input" Function="" Width="20" Side="left" X="-0.0222222" Y="0.583333" Datatype="wire" Parent="count_uart_16550" Height="20" Color="#7fffd4" Datasize="1"/>
 <Port Name="tx" Inout="output" Function="" Width="20" Side="right" X="0.977778" Y="0.233333" Datatype="wire" Parent="count_uart_16550" Height="20" Color="#f0ffff" Datasize="1"/>
 <Port Name="tx_valid" Inout="output" Function="" Width="20" Side="right" X="0.977778" Y="0.483333" Datatype="wire" Parent="count_uart_16550" Height="20" Color="#f5f5dc" Datasize="1"/>
 <Wire Name="count_uart_16550_clk" To="count_uart_16550#countdown2>clk" From="count_uart_16550>clk" Datatype="wire" Parent="count_uart_16550" Datasize="1"/>
 <Wire Name="count_uart_16550_rst_n" To="count_uart_16550#countdown2>rst_n" From="count_uart_16550>rst_n" Datatype="wire" Parent="count_uart_16550" Datasize="1"/>
 <Wire Name="count_uart_16550_count_en" To="count_uart_16550#countdown2>count_en" From="count_uart_16550>count_en" Datatype="wire" Parent="count_uart_16550" Datasize="1"/>
 <Wire Name="count_uart_16550_clk" To="count_uart_16550#uart2>clk" From="count_uart_16550>clk" Datatype="wire" Parent="count_uart_16550" Datasize="1"/>
 <Wire Name="count_uart_16550_rst_n" To="count_uart_16550#uart2>rst_n" From="count_uart_16550>rst_n" Datatype="wire" Parent="count_uart_16550" Datasize="1"/>
 <Wire Name="countdown2_count_full" To="count_uart_16550#uart2>tx_en" From="count_uart_16550#countdown2>count_full" Datatype="wire" Parent="count_uart_16550" Datasize="1"/>
 <Wire Name="countdown2_count_out" To="count_uart_16550#uart2>data_send" From="count_uart_16550#countdown2>count_out" Datatype="wire" Parent="count_uart_16550" Datasize="8"/>
 <Wire Name="uart2_tx_buf_full" To="count_uart_16550>tx_valid" From="count_uart_16550#uart2>tx_buf_full" Datatype="wire" Parent="count_uart_16550" Datasize="1"/>
 <Wire Name="uart2_tx" To="count_uart_16550>tx" From="count_uart_16550#uart2>tx" Datatype="wire" Parent="count_uart_16550" Datasize="1"/>
 <Wire Name="uart2_tx_buf_full" To="count_uart_16550#uart2>tx_buf_full" From="count_uart_16550#countdown2>tx_done" Datatype="wire" Parent="count_uart_16550" Datasize="1"/>
</Module>
