module countdown(
	clk,
	rst_n,
	count_en,
	count_full,
	count_out,
	tx_done);

	//---Ports declearation: generated by Robei---
	input clk;
	input rst_n;
	input count_en;
	output count_full;
	output [7:0] count_out;
	input tx_done;

	wire clk;
	wire rst_n;
	wire count_en;
	reg count_full;
	wire [7:0] count_out;
	wire tx_done;

	//----Code starts here: integrated by Robei-----
	`define DEL 1
	
	//
	// Count enable edge detected
	//
	reg     count_en_q;
	reg     count_en_start;
	wire    count_en_flag;
	
	always @( posedge clk or negedge rst_n ) begin
	  if( ~rst_n ) begin
	    count_en_q <= #`DEL 1'b1;
	  end
	  else begin
	    count_en_q <= #`DEL count_en;
	  end
	end
	assign count_en_flag = ~count_en_q && ( count_en );
	
	always @( posedge clk or negedge rst_n ) begin
	  if( ~rst_n ) begin
	    count_en_start <= #`DEL 1'b0;
	  end
	  else if( count_en_flag )begin
	    count_en_start <= #`DEL 1'b1;
	  end
	  else if( count == 8'd99 ) begin
	    count_en_start <= #`DEL 1'b0;
	  end
	end      
	
	
	//
	// Tx_done edge detected
	// Tx_done signal comes from uart unit, while uart transmit one data done, begining next count 
	//
	reg     tx_done_q;
	wire    tx_done_n;
	wire    tx_done_flag;
	
	always @( posedge clk or negedge rst_n ) begin
	  if( ~rst_n ) begin
	    tx_done_q <= #`DEL 1'b0;
	  end
	  else begin
	    tx_done_q <= #`DEL tx_done_n;
	  end
	end
	assign tx_done_n = ~tx_done;
	assign tx_done_flag = ~tx_done_q && ( tx_done_n );
	
	//
	// Countdown and output
	//
	reg [7:0] count;
	   
	
	always @( posedge clk or negedge rst_n ) begin
	  if( ~rst_n ) begin
	    count      <= #`DEL 8'd0;
	    count_full <= #`DEL 1'b0;
	  end
	  else if( count_en_flag ) begin
	    count <= #`DEL 8'b0;
	    count_full <= #`DEL 1'b1;
	  end
	  else if( count_en_start ) begin
	    if( tx_done_flag ) begin
	      if( count == 8'd99 )begin
	        count      <= #`DEL 8'd0;
	        count_full <= #`DEL 1'b0;
	      end
	      else begin
	        count      <= #`DEL count + 1;
	        count_full <= #`DEL 1'b1;
	      end
	    end     
	    else begin
	      count      <= #`DEL count;
	      count_full <= #`DEL 1'b0;
	    end
	  end  
	  else begin
	    count      <= #`DEL 0;
	    count_full <= #`DEL 1'b0;
	  end
	end
	
	assign count_out  =  count;
	
endmodule    //countdown

