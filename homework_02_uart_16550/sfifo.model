<!DOCTYPE Robei>
<Module Height="600" Name="sfifo" Parameters="" Include="sfifo_def.v" File="Current/sfifo.model" Comment="" Color="#d3d3d3" X="0" Width="900" Class="module" Y="0" Type="module" Code="  // The FIFOmemory. &#xa;  reg   [`FIFO_WIDTH-1:0] fifo_mem[0:`FIFO_DEPTH-1];  // How many locations in the FIFO are occupied?&#xa;  reg   [`FIFO_BITS-1:0]  rd_pointer;  // FIFO write pointer points to the location in the FIFO to write to next&#xa;  reg   [`FIFO_BITS-1:0]  wr_pointer;  &#xa;&#xa;  // ASSIGN STATEMENTS&#xa;  assign #`DEL full  = ( counter == `FIFO_DEPTH ) ? 1'b1 : 1'b0;  // FIFO_DEPTH=16&#xa;  assign #`DEL empty = ( counter == 0 ) ? 1'b1 : 1'b0;&#xa;  assign #`DEL half  = ( counter >= `FIFO_HALF )? 1'b1 : 1'b0;    // FIFO_HALF=8&#xa;&#xa;  //&#xa;  // This block contains counter affected by the clock and reset inputs&#xa;  //&#xa;  always @( posedge clock or negedge reset_n ) begin&#xa;    if ( ~reset_n ) begin&#xa;      // Reset the FIFO pointer&#xa;      counter    &lt;= #`DEL 'b0;&#xa;    end &#xa;    else if ( ~read_n &amp;&amp; write_n ) begin&#xa;      // Check for FIFO underflow&#xa;      // Decrement the FIFO counter&#xa;      counter &lt;= #`DEL counter - 1;&#xa;    end&#x9;&#xa;    else if ( ~write_n &amp;&amp; read_n ) begin&#xa;      // Increment teh FIFO counter&#xa;      counter &lt;= #`DEL counter + 1;&#xa;    end&#xa;    else begin&#xa;      counter &lt;= counter;&#xa;    end&#xa;  end&#xa;        &#xa;  // Increment the read pointer&#xa;  // Check if the read pointer has gone beyond the depth of&#xa;  // FIFO, so, set it back to the begining of the FIFO&#x9;&#xa;  always @( posedge clock or negedge reset_n ) begin&#xa;    if ( ~reset_n ) begin&#xa;      // Reset the FIFO pointer&#xa;      rd_pointer &lt;= #`DEL `FIFO_BITS'b0;&#xa;    end &#xa;    else if ( ~read_n ) begin&#xa;      if ( rd_pointer == `FIFO_DEPTH ) begin&#xa;        rd_pointer &lt;= #`DEL `FIFO_BITS'b0; &#xa;      end &#xa;      else begin&#xa;        rd_pointer &lt;= #`DEL rd_pointer + 1;&#xa;      end &#xa;    end &#xa;    else begin&#xa;      rd_pointer &lt;= rd_pointer;&#xa;    end &#xa;  end&#xa;&#xa;  // Increment the write pointer&#xa;  // Check if the write pointer has gone beyond the depth of&#xa;  // FIFO, so, set it back to the begining of the FIFO&#x9;&#xa;  always @( posedge clock or negedge reset_n ) begin&#xa;    if ( ~reset_n ) begin&#xa;      // Reset the FIFO pointer&#xa;      wr_pointer &lt;= #`DEL `FIFO_BITS'b0;&#xa;    end &#xa;    else if ( ~write_n ) begin&#xa;      if ( wr_pointer == `FIFO_DEPTH ) begin&#xa;        wr_pointer &lt;= #`DEL `FIFO_BITS'b0; &#xa;      end &#xa;      else begin &#xa;        wr_pointer &lt;= #`DEL wr_pointer + 1;&#xa;      end&#xa;    end&#xa;  end &#xa;&#xa;  // This block contains sfifo read data output &#xa;  always @( posedge clock or negedge reset_n ) begin&#xa;    if ( ~reset_n ) begin&#xa;      data_out &lt;= #`DEL `FIFO_WIDTH'b0;&#xa;    end&#xa;    else if ( ~read_n )begin&#xa;      // Output the data&#xa;      data_out &lt;= #`DEL fifo_mem [ rd_pointer ];&#xa;    end&#xa;  end&#xa;&#xa;  // sfifo write operation&#xa;  always @( posedge clock ) begin&#xa;    if ( ~write_n )begin&#xa;      // Store the data&#xa;      fifo_mem [ wr_pointer ] &lt;= #`DEL data_in; &#xa;    end&#xa;  end&#xa;&#xa;&#xa;&#xa;" Parent="0">
 <Port Height="20" Name="clock" Side="left" Color="#0000ff" X="-0.0222222" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.125" Inout="input" Parent="sfifo"/>
 <Port Height="20" Name="reset_n" Side="left" Color="#00ffff" X="-0.0222222" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.266667" Inout="input" Parent="sfifo"/>
 <Port Height="20" Name="data_in" Side="left" Color="#7fffd4" X="-0.0222222" Width="20" Function="" Datatype="wire" Datasize="8" Y="0.406667" Inout="input" Parent="sfifo"/>
 <Port Height="20" Name="read_n" Side="left" Color="#006400" X="-0.0222222" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.55" Inout="input" Parent="sfifo"/>
 <Port Height="20" Name="write_n" Side="left" Color="#cd5c5c" X="-0.0222222" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.691667" Inout="input" Parent="sfifo"/>
 <Port Height="20" Name="data_out" Side="right" Color="#ffe4c4" X="0.977778" Width="20" Function="" Datatype="reg" Datasize="8" Y="0.125" Inout="output" Parent="sfifo"/>
 <Port Height="20" Name="full" Side="right" Color="#b8860b" X="0.977778" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.266667" Inout="output" Parent="sfifo"/>
 <Port Height="20" Name="empty" Side="right" Color="#bdb76b" X="0.977778" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.406667" Inout="output" Parent="sfifo"/>
 <Port Height="20" Name="half" Side="right" Color="#0000ff" X="0.977778" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.55" Inout="output" Parent="sfifo"/>
 <Port Height="20" Name="counter" Side="right" Color="#8a2be2" X="0.977778" Width="20" Function="" Datatype="reg" Datasize="4" Y="0.691667" Inout="output" Parent="sfifo"/>
</Module>
