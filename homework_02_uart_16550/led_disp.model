<!DOCTYPE Robei>
<Module Height="600" Name="led_disp" Parameters="" Include="uart_def.v" File="Current/led_disp.model" Comment="" Color="#d3d3d3" X="0" Width="900" Class="module" Y="0" Type="module" Code="&#xa;&#xa;&#xa;" Parent="0">
 <Module Height="160" Name="generate_clk1" Parameters="" Include="uart_def.v" File="Current/generate_clk.model" Comment="" Color="#d3d3d3" X="124.255" Width="160" Class="generate_clk" Y="54.5336" Type="model" Code="parameter CLOCK = 12000000;  // This parameter is equal to the external crystal oscillator on FPGA &#xa;&#xa;wire [`DIV_LENGTH-1:0] division;&#xa;assign division = CLOCK / ( 16 * baud_rate );&#xa;&#xa;//&#xa;// Even division, which duty is 50%&#xa;//&#xa;reg                       clk_even;&#xa;reg     [`DIV_LENGTH-1:0] cnt_even;&#xa;wire    [`DIV_LENGTH-1:0] division_even;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    cnt_even &lt;= #`DEL `DIV_LENGTH'd0;&#xa;    clk_even &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else if( division[0]==1 ) begin&#xa;    cnt_even &lt;= #`DEL `DIV_LENGTH'd0;&#xa;    clk_even &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    if( cnt_even == ( division_even - 1 ) ) begin&#xa;      cnt_even &lt;= #`DEL `DIV_LENGTH'd0;&#xa;      clk_even &lt;= #`DEL ~clk_even;&#xa;    end&#xa;    else begin&#xa;      cnt_even &lt;= #`DEL cnt_even + 1'd1;&#xa;      clk_even &lt;= #`DEL clk_even;&#xa;    end&#xa;  end&#xa;end     &#xa;&#xa;assign division_even = ( division[0] == 0 ) ? ( division >> 1 ) : 0;&#xa;&#xa;//&#xa;// Odd division, which duty is 50%&#xa;//&#xa;reg                     clk_p;&#xa;reg                     clk_n;&#xa;wire                    clk_odd;&#xa;reg   [`DIV_LENGTH-1:0] cnt_p;&#xa;reg   [`DIV_LENGTH-1:0] cnt_n;&#xa;wire  [`DIV_LENGTH-1:0] division_odd;&#xa;&#xa;//&#xa;// Rising edge&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    clk_p &lt;= #`DEL 1'b0;&#xa;    cnt_p &lt;= #`DEL `DIV_LENGTH'b0;&#xa;  end&#xa;  else if( division[0]==0 ) begin    &#xa;    clk_p &lt;= #`DEL 1'b0;&#xa;    cnt_p &lt;= #`DEL `DIV_LENGTH'b0;&#xa;  end&#xa;  else begin&#xa;    if( cnt_p == division_odd - 1 ) begin&#xa;      clk_p &lt;= #`DEL ~clk_p;&#xa;      cnt_p &lt;= #`DEL `DIV_LENGTH'b0;&#xa;    end&#xa;    else if( cnt_p == ( ( division - 1 ) >> 1 ) )begin&#xa;      clk_p &lt;= #`DEL ~clk_p;&#xa;      cnt_p &lt;= #`DEL cnt_p + 1'b1;&#xa;    end&#xa;    else begin&#xa;      clk_p &lt;= #`DEL clk_p;&#xa;      cnt_p &lt;= #`DEL cnt_p + 1'b1;&#xa;    end&#xa;  end&#xa;end      &#xa;&#xa;//&#xa;// Falling edge&#xa;always @( negedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    clk_n &lt;= #`DEL 1'b0;&#xa;    cnt_n &lt;= #`DEL `DIV_LENGTH'b0;&#xa;  end&#xa;  else if( division[0] == 0 ) begin    &#xa;    clk_n &lt;= #`DEL 1'b0;&#xa;    cnt_n &lt;= #`DEL `DIV_LENGTH'b0;&#xa;  end&#xa;  else begin&#xa;    if( cnt_n == division_odd - 1 ) begin&#xa;      clk_n &lt;= #`DEL ~clk_n;&#xa;      cnt_n &lt;= #`DEL `DIV_LENGTH'b0;&#xa;    end&#xa;    else if( cnt_n == ( ( division - 1 ) >> 1 ) )begin&#xa;      clk_n &lt;= #`DEL ~clk_n;&#xa;      cnt_n &lt;= #`DEL cnt_n + `DIV_LENGTH'b1;&#xa;    end&#xa;    else begin&#xa;      clk_n &lt;= #`DEL clk_n;&#xa;      cnt_n &lt;= #`DEL cnt_n + `DIV_LENGTH'b1;&#xa;    end&#xa;  end&#xa;end     &#xa;&#xa;&#xa;assign division_odd = ( division[0] == 1 ) ? division : 0;&#xa;assign clk_odd = clk_n | clk_p;&#xa;&#xa;assign clk_out = ( division[0] == 1 ) ? clk_odd : clk_even;" Parent="led_disp">
  <Port Height="20" Name="clk" Connect="" Side="left" Color="#0000ff" X="-0.125" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.1375" Inout="input" Parent="generate_clk1"/>
  <Port Height="20" Name="rst_n" Connect="" Side="left" Color="#00ffff" X="-0.125" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.3375" Inout="input" Parent="generate_clk1"/>
  <Port Height="20" Name="baud_rate" Connect="19'd9600" Side="left" Color="#5f9ea0" X="-0.125" Width="20" Function="" Datatype="wire" Datasize="19" Y="0.5375" Inout="input" Parent="generate_clk1"/>
  <Port Height="20" Name="clk_out" Connect="" Side="right" Color="#d2691e" X="0.875" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.26875" Inout="output" Parent="generate_clk1"/>
 </Module>
 <Module Height="214" Name="uart2" Parameters="" Include="uart_def.v" File="Current/uart.model" Comment="" Color="#d3d3d3" X="181.157" Width="166" Class="uart" Y="351" Type="model" Code="//&#xa;// Parity is equal to 0 means that there should not have parity bit. Otherwise, there should be one parity bit.&#xa;//&#xa;wire       parity_bit;&#xa;assign parity_bit = ( ~|parity ) ? 0 : 1; &#xa;&#xa;//&#xa;// This block is used to receive data&#xa;//&#xa;&#xa;//&#xa;// Edge deteted&#xa;//&#xa;&#xa;reg                     rx_q;&#xa;wire                    rx_start;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    rx_q &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    rx_q &lt;= #`DEL rx;&#xa;  end&#xa;end      &#xa;// Falling edge effective&#xa;assign rx_start = ( rx_q &amp;&amp; ~rx );&#xa;&#xa;//&#xa;// Counter of rx&#xa;//&#xa;&#xa;reg  [7:0]  rx_cnt;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if ( ~rst_n ) begin&#xa;    rx_cnt &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else if ( ns_rx == IDLE_RX || ns_rx == ERROR_RX ) begin&#xa;    rx_cnt &lt;= #`DEL 8'd0;&#xa;  end  // If the next status is IDLE or ERROR, then don't count&#xa;  else begin&#xa;    rx_cnt &lt;= #`DEL rx_cnt + 1'd1;&#xa;  end  // If the next status is not IDLE or ERROR, then begin to count&#xa;end&#xa;&#xa;//&#xa;// Three paragraph FSM of receive &#xa;//&#xa;reg       [3:0]   cs_rx;&#xa;reg       [3:0]   ns_rx;&#xa;parameter [3:0]   IDLE_RX   = 4'b0000,&#xa;  START_RX     = 4'b0001,&#xa;  RECEIVE_RX   = 4'b0010,&#xa;  STOP_RX      = 4'b0100,&#xa;  ERROR_RX     = 4'b1000;&#xa;&#xa;// FSM one&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if ( !rst_n ) begin&#xa;    cs_rx &lt;= IDLE_RX;&#xa;  end&#xa;  else begin&#xa;    cs_rx &lt;= ns_rx;&#xa;  end&#xa;end&#xa;&#xa;// FSM two&#xa;//&#xa;&#xa;// cnt_parity_rx means that rx_cnt has counted to the parity bit&#xa;wire [7:0] cnt_parity_rx;&#xa;assign cnt_parity_rx = ( 24 + ( data_bit + parity_bit ) * 16 ); &#xa;&#xa;always @( * ) begin&#xa;  ns_rx = IDLE_RX;&#xa;  case ( cs_rx )&#xa;    IDLE_RX: begin&#xa;      if( rx_start ) begin&#xa;        ns_rx = START_RX;  // If there has a falling edge in rx, then transmit to START&#xa;      end&#xa;      else begin&#xa;        ns_rx = IDLE_RX;&#xa;      end&#xa;    end&#xa;    START_RX: begin &#xa;      if ( rx &amp;&amp; rx_cnt &lt; 8 ) begin&#xa;        ns_rx = ERROR_RX;  // If rx has a high volage in START status, there must be an error&#xa;      end &#xa;      else if( rx_cnt == 8 ) begin &#xa;        ns_rx = RECEIVE_RX;  // If rx can remain low volage for 8 cycles, we believe communication is correct, then begin to receive data&#xa;      end&#xa;      else begin &#xa;        ns_rx = START_RX; &#xa;      end&#xa;    end&#xa;    RECEIVE_RX: begin&#xa;      if ( rx_cnt == cnt_parity_rx ) begin&#xa;        ns_rx = STOP_RX;&#xa;      end &#xa;      else begin &#xa;        ns_rx = RECEIVE_RX;&#xa;      end&#xa;    end &#xa;    STOP_RX: begin&#xa;      if( rx_cnt == cnt_parity_rx + ( stop_bit * 16 ) ) begin&#xa;        ns_rx = IDLE_RX;&#xa;      end&#xa;      else begin&#xa;        ns_rx = STOP_RX;&#xa;      end&#xa;    end&#xa;    ERROR_RX: begin &#xa;      ns_rx = IDLE_RX; &#xa;    end &#xa;  endcase&#xa;end&#xa;&#xa;// FSM three&#xa;//&#xa;&#xa;reg [3:0] count_cycle_rx; // Used to count the bit num of received data&#xa;reg [8:0] data_received_temp;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin &#xa;  if ( !rst_n ) begin &#xa;    data_received_temp &lt;= #`DEL 9'd0;&#xa;    rx_buf_full        &lt;= #`DEL 1'b0;&#xa;    count_cycle_rx     &lt;= #`DEL 4'd1;&#xa;  end&#xa;  else begin &#xa;    case ( ns_rx )&#xa;      IDLE_RX: begin&#xa;        data_received_temp &lt;= #`DEL 9'd0;&#xa;        rx_buf_full        &lt;= #`DEL 1'b0;&#xa;        count_cycle_rx     &lt;= #`DEL 4'd1;&#xa;      end&#xa;      START_RX: begin&#xa;        data_received_temp &lt;= #`DEL 9'd0;&#xa;        rx_buf_full        &lt;= #`DEL 1'b0;&#xa;        count_cycle_rx     &lt;= #`DEL 4'd1;&#xa;      end&#xa;      RECEIVE_RX: begin&#xa;        if( count_cycle_rx == ( data_bit + parity_bit ) &amp;&amp; ( rx_cnt == 24 + 16 * ( count_cycle_rx ) ) ) begin&#xa;          data_received_temp[count_cycle_rx - 1] &lt;= #`DEL rx;  // Parity check bit&#xa;          rx_buf_full                            &lt;= #`DEL 1'b0;&#xa;          count_cycle_rx                         &lt;= #`DEL 4'd1; // Reset count_cycle_rx &#xa;        end  // Receive parity check bit&#xa;        else if( rx_cnt == ( 24 + ( count_cycle_rx - 1 ) * 16 ) ) begin&#xa;          data_received_temp[count_cycle_rx - 1] &lt;= #`DEL rx;&#xa;          rx_buf_full                            &lt;= #`DEL 1'b0;&#xa;          count_cycle_rx                         &lt;= #`DEL count_cycle_rx + 1'b1;&#xa;        end  // Data bit&#xa;      end&#xa;      STOP_RX: begin&#xa;        if( rx_cnt == cnt_parity_rx + ( stop_bit * 16 ) - 8 ) begin  // -8 is to catch the stop bit&#xa;          data_received_temp &lt;= #`DEL data_received_temp;&#xa;          rx_buf_full        &lt;= #`DEL 1'b1;&#xa;          count_cycle_rx     &lt;= #`DEL count_cycle_rx;&#xa;        end&#xa;      end&#xa;      ERROR_RX: begin        &#xa;        data_received_temp &lt;= #`DEL 9'd0;&#xa;        rx_buf_full        &lt;= #`DEL 1'b0;&#xa;        count_cycle_rx     &lt;= #`DEL 4'd1; &#xa;      end&#xa;    endcase &#xa;  end &#xa;end      &#xa;&#xa;reg [8:0] data_received_check;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    data_received_check &lt;= #`DEL 9'b0;&#xa;  end&#xa;  else if( ns_rx == STOP_RX ) begin&#xa;    data_received_check &lt;= #`DEL data_received_temp;  // Ensure data can be collected&#xa;  end&#xa;end           &#xa;/*&#xa;always @( posedge clk ) begin&#xa;  case( parity )&#xa;    3'b000:begin&#xa;      data_received = data_received_check[7:0];&#xa;    end&#xa;    3'b001:begin&#xa;      if( data_received_check[8] == ~^data_received_check[7:0] ) begin&#xa;        data_received = data_received_check[7:0];&#xa;      end&#xa;      else begin&#xa;        $display( &quot;UART line 234: Odd check error!&quot; );&#xa;        $display( &quot;data_received=9'b%b_%b_%b&quot;,data_received_check[8],data_received_check[7:4],data_received_check[3:0] );&#xa;        $finish;&#xa;      end&#xa;    end&#xa;    3'b010:begin&#xa;      if( data_received_check[8] == ^data_received_check[7:0] ) begin&#xa;        data_received = data_received_check[7:0];&#xa;      end&#xa;      else begin&#xa;        $display( &quot;UART line 244: Even check error!&quot; );&#xa;        $display( &quot;data_received=9'b%b_%b_%b&quot;,data_received_check[8],data_received_check[7:4],data_received_check[3:0] );&#xa;        $finish;&#xa;      end&#xa;    end&#xa;    3'b011:begin&#xa;      if( data_received_check[8] == 0 ) begin&#xa;        data_received = data_received_check[7:0];&#xa;      end&#xa;      else begin&#xa;        $display( &quot;UART line 254: Zero check error!&quot; );&#xa;        $display( &quot;data_received=9'b%b_%b_%b&quot;,data_received_check[8],data_received_check[7:4],data_received_check[3:0] );&#xa;        $finish;&#xa;      end&#xa;    end&#xa;    3'b100:begin&#xa;      if( data_received_check[8] == 1 ) begin&#xa;        data_received = data_received_check[7:0];&#xa;      end&#xa;      else begin&#xa;        $display( &quot;UART line 264: One check error!&quot; );&#xa;        $display( &quot;data_received=9'b%b_%b_%b&quot;,data_received_check[8],data_received_check[7:4],data_received_check[3:0] );&#xa;        $finish;&#xa;      end&#xa;    end&#xa;  endcase&#xa;end  &#xa;*/&#xa;&#xa;//&#xa;// This block is used to send data&#xa;//&#xa;&#xa;// &#xa;// Edge deteted&#xa;//&#xa;&#xa;reg         tx_en_q;&#xa;wire        tx_start;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    tx_en_q &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    tx_en_q &lt;= #`DEL tx_en;&#xa;  end&#xa;end      &#xa;// Rising edge effective&#xa;assign tx_start = ( ~tx_en_q &amp;&amp; tx_en );&#xa;&#xa;//&#xa;// Transmit data_send to shift_reg&#xa;//&#xa;&#xa;reg  [8:0]  shift_reg;&#xa;&#xa;always @( posedge tx_start or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    shift_reg &lt;= #`DEL 9'd0;&#xa;  end&#xa;  else begin&#xa;    shift_reg[7:0] &lt;= #`DEL data_send;&#xa;    //&#xa;    // Parity check bit&#xa;    case( parity )&#xa;      3'b000: shift_reg[8]   &lt;= #`DEL 0;   // No parity check&#xa;      3'b001: shift_reg[8]   &lt;= #`DEL ( ^data_send ) ? 0 : 1;  // Odd check&#xa;      3'b010: shift_reg[8]   &lt;= #`DEL ( ^data_send ) ? 1 : 0;  // Even check&#xa;      3'b011: shift_reg[8]   &lt;= #`DEL 0;  // 0 check&#xa;      3'b100: shift_reg[8]   &lt;= #`DEL 1;  // 1 check&#xa;    endcase&#xa;  end&#xa;end      &#xa;&#xa;//&#xa;// Frequence division&#xa;//&#xa;&#xa;reg  [7:0]  tx_cnt;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if ( ~rst_n ) begin&#xa;    tx_cnt &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else if ( ns_tx == IDLE_TX ) begin&#xa;    tx_cnt &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else begin&#xa;    tx_cnt &lt;= #`DEL tx_cnt + 1'b1;&#xa;  end&#xa;end&#xa;&#xa;//&#xa;// Three paragraph FSM of send data&#xa;//&#xa;reg       [2:0]   cs_tx;&#xa;reg       [2:0]   ns_tx;&#xa;parameter [2:0]  IDLE_TX   = 3'b000,&#xa;  START_TX     = 3'b001,&#xa;  SEND_TX      = 3'b010,&#xa;  STOP_TX      = 3'b100;&#xa;&#xa;//&#xa;// FSM one&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if ( !rst_n ) begin&#xa;    cs_tx &lt;= IDLE_TX;&#xa;  end&#xa;  else begin&#xa;    cs_tx &lt;= ns_tx;&#xa;  end&#xa;end&#xa;&#xa;// &#xa;// FSM two&#xa;&#xa;// cnt_parity_tx means that tx_cnt has counted to the parity bit&#xa;wire [7:0] cnt_parity_tx;&#xa;assign cnt_parity_tx = ( data_bit + parity_bit + 1 ) * 16; &#xa;&#xa;always @( * ) begin&#xa;  ns_tx = IDLE_TX;&#xa;  case ( cs_tx )&#xa;    IDLE_TX: begin&#xa;      if ( tx_start ) begin&#xa;        ns_tx = START_TX;&#xa;      end&#xa;      else begin&#xa;        ns_tx = IDLE_TX;&#xa;      end&#xa;    end&#xa;    START_TX: begin&#xa;      ns_tx = SEND_TX;&#xa;    end &#xa;    SEND_TX: begin &#xa;      if ( tx_cnt == cnt_parity_tx ) begin&#xa;        ns_tx = STOP_TX; &#xa;      end &#xa;      else begin &#xa;        ns_tx = SEND_TX;&#xa;      end&#xa;    end&#xa;    STOP_TX: begin &#xa;      if ( tx_cnt == cnt_parity_tx + stop_bit * 16 ) begin&#xa;        ns_tx = IDLE_TX; &#xa;      end&#xa;      else begin&#xa;        ns_tx = STOP_TX;&#xa;      end&#xa;    end &#xa;  endcase &#xa;end&#xa;&#xa; &#xa;// FSM three &#xa;//&#xa;&#xa;reg [3:0] count_cycle_tx; // Used to count the bit num of send data&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin &#xa;  if ( !rst_n ) begin &#xa;    tx          &lt;= #`DEL 1'b1;&#xa;    tx_buf_full &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin &#xa;    case ( ns_tx )&#xa;      IDLE_TX: begin&#xa;        tx             &lt;= #`DEL 1'b1;&#xa;        tx_buf_full    &lt;= #`DEL 1'b0;&#xa;        count_cycle_tx &lt;= #`DEL 4'd1;&#xa;      end&#xa;      START_TX: begin&#xa;        tx             &lt;= #`DEL 1'b0;&#xa;        tx_buf_full    &lt;= #`DEL 1'b0;&#xa;        count_cycle_tx &lt;= #`DEL 4'd1;&#xa;      end&#xa;      SEND_TX: begin&#xa;        if( ( count_cycle_tx == parity_bit + data_bit + 1 ) &amp;&amp; ( tx_cnt == 16 * count_cycle_tx ) ) begin&#xa;          tx             &lt;= #`DEL shift_reg[count_cycle_tx-1];&#xa;          tx_buf_full    &lt;= #`DEL 1'b1;&#xa;          count_cycle_tx &lt;= #`DEL 4'd1;&#xa;        end&#xa;        else if( tx_cnt == 16 * count_cycle_tx ) begin&#xa;          tx             &lt;= #`DEL shift_reg[count_cycle_tx-1];&#xa;          tx_buf_full    &lt;= #`DEL 1'b1;&#xa;          count_cycle_tx &lt;= #`DEL count_cycle_tx + 1'b1;&#xa;        end&#xa;      end&#xa;      STOP_TX: begin&#xa;        if( tx_cnt == cnt_parity_tx + stop_bit * 16 ) begin&#xa;          tx             &lt;= #`DEL 1'b1;&#xa;          tx_buf_full    &lt;= #`DEL 1'b0;&#xa;          count_cycle_tx &lt;= #`DEL 4'd1;&#xa;        end&#xa;      end&#xa;    endcase &#xa;  end &#xa;end      &#xa;" Parent="led_disp">
  <Port Height="20" Name="clk" Connect="" Side="left" Color="#0000ff" X="-0.120482" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.0514019" Inout="input" Parent="uart2"/>
  <Port Height="20" Name="rst_n" Connect="" Side="left" Color="#00ffff" X="-0.120482" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.149533" Inout="input" Parent="uart2"/>
  <Port Height="20" Name="rx" Connect="" Side="left" Color="#a52a2a" X="-0.120482" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.247664" Inout="input" Parent="uart2"/>
  <Port Height="20" Name="tx_en" Connect="" Side="left" Color="#d2691e" X="-0.120482" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.345794" Inout="input" Parent="uart2"/>
  <Port Height="20" Name="data_send" Connect="" Side="left" Color="#7fff00" X="-0.120482" Width="20" Function="" Datatype="wire" Datasize="8" Y="0.443925" Inout="input" Parent="uart2"/>
  <Port Height="20" Name="parity" Connect="3'b010" Side="left" Color="#dc143c" X="-0.120482" Width="20" Function="" Datatype="wire" Datasize="3" Y="0.542056" Inout="input" Parent="uart2"/>
  <Port Height="20" Name="stop_bit" Connect="2'b01" Side="left" Color="#b8860b" X="-0.120482" Width="20" Function="Which can be 1 or 2" Datatype="wire" Datasize="2" Y="0.640187" Inout="input" Parent="uart2"/>
  <Port Height="20" Name="data_bit" Connect="4'd8" Side="left" Color="#ff8c00" X="-0.120482" Width="20" Function=" It means the length of data, which can be 5, 6, 7 and 8" Datatype="wire" Datasize="4" Y="0.738318" Inout="input" Parent="uart2"/>
  <Port Height="20" Name="tx_buf_full" Connect="" Side="right" Color="#0000ff" X="0.879518" Width="20" Function="" Datatype="reg" Datasize="1" Y="0.116822" Inout="output" Parent="uart2"/>
  <Port Height="20" Name="tx" Connect="" Side="right" Color="#8a2be2" X="0.879518" Width="20" Function="" Datatype="reg" Datasize="1" Y="0.443925" Inout="output" Parent="uart2"/>
  <Port Height="20" Name="data_received" Connect="" Side="right" Color="#a52a2a" X="0.879518" Width="20" Function="" Datatype="reg" Datasize="8" Y="0.607477" Inout="output" Parent="uart2"/>
  <Port Height="20" Name="rx_buf_full" Connect="" Side="right" Color="#5f9ea0" X="0.879518" Width="20" Function="" Datatype="reg" Datasize="1" Y="0.280374" Inout="output" Parent="uart2"/>
 </Module>
 <Module Height="160" Name="led_display3" Parameters="" Include="" File="Current/led_display.model" Comment="" Color="#d3d3d3" X="545.532" Width="160" Class="led_display" Y="181.211" Type="model" Code="`define DEL 1&#xa;//&#xa;// LED display start signal&#xa;//&#xa;reg  display_en_q;&#xa;wire display_start;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    display_en_q &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    display_en_q &lt;= #`DEL display_en;&#xa;  end&#xa;end      &#xa;// Rising edge effective&#xa;assign display_start = ~display_en_q &amp;&amp; display_en;&#xa;&#xa;//&#xa;// Parity check&#xa;//&#xa;always @( posedge clk ) begin&#xa;  if( display_data_in[8] != ( ^display_data_in[7:0] ) ) begin&#xa;    $display(&quot;LED:Parity check failed!&quot;);&#xa;    $display(&quot;Receive data is: 9'b%b_%b_%b&quot;,display_data_in[8],display_data_in[7:4],display_data_in[3:0]);&#xa;    $finish;&#xa;  end&#xa;end  &#xa;&#xa;//&#xa;// LED display decoder&#xa;//&#xa;reg [8:0] seg [15:0];&#xa;initial begin&#xa;  seg[0] = 9'h3f; // 0&#xa;  seg[1] = 9'h06; // 1&#xa;  seg[2] = 9'h5b; // 2&#xa;  seg[3] = 9'h4f; // 3&#xa;  seg[4] = 9'h66; // 4&#xa;  seg[5] = 9'h6d; // 5&#xa;  seg[6] = 9'h7d; // 6&#xa;  seg[7] = 9'h07; // 7&#xa;  seg[8] = 9'h7f; // 8&#xa;  seg[9] = 9'h6f; // 9&#xa;  seg[10]= 9'h77; // A&#xa;  seg[11]= 9'h7c; // b&#xa;  seg[12]= 9'h39; // C&#xa;  seg[13]= 9'h5e; // d&#xa;  seg[14]= 9'h79; // E&#xa;  seg[15]= 9'h71; // F&#xa;end&#xa;&#xa;reg [3:0] led0_temp;&#xa;reg [3:0] led1_temp;&#xa;reg       display_flag;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    led0_temp &lt;= #`DEL 4'd0;&#xa;    led1_temp &lt;= #`DEL 4'd0;&#xa;    display_flag &lt;= #`DEL 1'd0;&#xa;  end&#xa;  else if( display_start )begin&#xa;    led0_temp &lt;= #`DEL display_data_in[3:0];&#xa;    led1_temp &lt;= #`DEL display_data_in[7:4];&#xa;    display_flag &lt;= #`DEL 1'd1;&#xa;  end&#xa;  else begin      &#xa;    display_flag &lt;= #`DEL 1'd0;&#xa;  end&#xa;end      &#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    out_to_led0 &lt;= #`DEL 7'd0;&#xa;    out_to_led1 &lt;= #`DEL 7'd0;&#xa;  end&#xa;  else if( display_flag ) begin&#xa;    out_to_led0 &lt;= #`DEL seg[led0_temp];&#xa;    out_to_led1 &lt;= #`DEL seg[led1_temp];&#xa;  end&#xa;end      " Parent="led_disp">
  <Port Height="20" Name="clk" Connect="" Side="left" Color="#0000ff" X="-0.125" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.1" Inout="input" Parent="led_display3"/>
  <Port Height="20" Name="rst_n" Connect="" Side="left" Color="#00ffff" X="-0.125" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.2625" Inout="input" Parent="led_display3"/>
  <Port Height="20" Name="display_data_in" Connect="" Side="left" Color="#5f9ea0" X="-0.15625" Width="20" Function="" Datatype="wire" Datasize="8" Y="0.69375" Inout="input" Parent="led_display3"/>
  <Port Height="20" Name="out_to_led1" Connect="" Side="right" Color="#00bfff" X="0.875" Width="20" Function="" Datatype="reg" Datasize="9" Y="0.4375" Inout="output" Parent="led_display3"/>
  <Port Height="20" Name="out_to_led0" Connect="" Side="right" Color="#b8860b" X="0.875" Width="20" Function="" Datatype="reg" Datasize="9" Y="0.1875" Inout="output" Parent="led_display3"/>
  <Port Height="20" Name="display_en" Connect="" Side="left" Color="#ffe4c4" X="-0.15625" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.45625" Inout="input" Parent="led_display3"/>
 </Module>
 <Port Height="20" Name="clk" Side="left" Color="#faebd7" X="-0.0222222" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.183333" Inout="input" Parent="led_disp"/>
 <Port Height="20" Name="rst_n" Side="left" Color="#00ffff" X="-0.0222222" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.383333" Inout="input" Parent="led_disp"/>
 <Port Height="20" Name="rx" Side="left" Color="#7fffd4" X="-0.0222222" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.583333" Inout="input" Parent="led_disp"/>
 <Port Height="20" Name="led0" Side="right" Color="#f0ffff" X="0.977778" Width="20" Function="" Datatype="wire" Datasize="9" Y="0.233333" Inout="output" Parent="led_disp"/>
 <Port Height="20" Name="led1" Side="right" Color="#f5f5dc" X="0.977778" Width="20" Function="" Datatype="wire" Datasize="9" Y="0.483333" Inout="output" Parent="led_disp"/>
 <Wire From="led_disp>clk" Name="led_disp_clk" Datatype="wire" Datasize="1" To="led_disp#generate_clk1>clk" Parent="led_disp"/>
 <Wire From="led_disp>rst_n" Name="led_disp_rst_n" Datatype="wire" Datasize="1" To="led_disp#generate_clk1>rst_n" Parent="led_disp"/>
 <Wire From="led_disp#generate_clk1>clk_out" Name="generate_clk1_clk_out" Datatype="wire" Datasize="1" To="led_disp#uart2>clk" Parent="led_disp"/>
 <Wire From="led_disp#generate_clk1>clk_out" Name="generate_clk1_clk_out" Datatype="wire" Datasize="1" To="led_disp#led_display3>clk" Parent="led_disp"/>
 <Wire From="led_disp>rst_n" Name="led_disp_rst_n" Datatype="wire" Datasize="1" To="led_disp#uart2>rst_n" Parent="led_disp"/>
 <Wire From="led_disp>rst_n" Name="led_disp_rst_n" Datatype="wire" Datasize="1" To="led_disp#led_display3>rst_n" Parent="led_disp"/>
 <Wire From="led_disp#uart2>data_received" Name="uart2_data_received" Datatype="wire" Datasize="8" To="led_disp#led_display3>display_data_in" Parent="led_disp"/>
 <Wire From="led_disp#uart2>rx_buf_full" Name="uart2_rx_buf_full" Datatype="wire" Datasize="1" To="led_disp#led_display3>display_en" Parent="led_disp"/>
 <Wire From="led_disp#led_display3>out_to_led0" Name="led_display3_out_to_led0" Datatype="wire" Datasize="9" To="led_disp>led0" Parent="led_disp"/>
 <Wire From="led_disp#led_display3>out_to_led1" Name="led_display3_out_to_led1" Datatype="wire" Datasize="9" To="led_disp>led1" Parent="led_disp"/>
 <Wire From="led_disp>rx" Name="led_disp_rx" Datatype="wire" Datasize="1" To="led_disp#uart2>rx" Parent="led_disp"/>
</Module>
