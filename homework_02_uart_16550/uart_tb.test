<!DOCTYPE Robei>
<Module Height="600" Name="uart_tb" Include="uart_def.v" File="Current/uart_tb.test" Time_Scale="" Comment="" Color="#d3d3d3" X="0" Width="900" Class="module" Y="0" Type="testbench" Code="initial begin&#xa;  clk = 0;&#xa;end&#xa;always #10 clk = ~clk;&#xa;&#xa;initial begin&#xa;  rst_n = 1;&#xa;  repeat(1) @( posedge clk ) #1;&#xa;  rst_n = 0;&#xa;  repeat(1) @( posedge clk ) #1;&#xa;  rst_n = 1;&#xa;end&#xa;&#xa;initial begin&#xa;  rx = 1;&#xa;  tx_en = 0;&#xa;  data_send = 0;&#xa;  parity = 0;&#xa;  stop_bit = 0;&#xa;  data_bit = 0;&#xa;  repeat( 4 ) @( posedge clk ) #1;&#xa;  &#xa;  //&#xa;  // Test send data&#xa;  //&#xa;  repeat(10)@( posedge clk ) #1; &#xa;  data_send = 8'b1010_1010;  // The most siginificant 1 is used to test if uart works correctly when data_bit is 7&#xa;  parity = 3'b010; // Even check&#xa;  stop_bit = 1;&#xa;  data_bit = 7;&#xa;&#xa;  // tx_en effective&#xa;  @( posedge clk ) #1;&#xa;  tx_en = 1;&#xa;  repeat(3)@( posedge clk ) #1;&#xa;  tx_en = 0;&#xa;  repeat( 30 ) @( posedge clk ) #1;&#xa;&#xa;  //&#xa;  // Receive data 8'1_101_0101, even check bit is 1, data_bit is 7&#xa;  //&#xa;  repeat(32)@( posedge clk ) #1;&#xa;  rx = 0;  // Start signal&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;  // Least significant signal&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;  // Most significant signal&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;  // Parity check&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;  // Stop bit   &#xa;  repeat(64)@( posedge clk ) #1;  &#xa;&#xa;  //&#xa;  // Test send data&#xa;  //&#xa;  repeat(500)@( posedge clk ) #1; &#xa;  data_send = 8'b1001_1001; &#xa;  parity = 3'b010; // Even check&#xa;  stop_bit = 1;&#xa;  data_bit = 8;&#xa;&#xa;  // tx_en effective&#xa;  @( posedge clk ) #1;&#xa;  tx_en = 1;&#xa;  repeat(3)@( posedge clk ) #1;&#xa;  tx_en = 0;&#xa;  repeat( 30 ) @( posedge clk ) #1;&#xa;&#xa;  //&#xa;  // Receive data 8'1_1000_1001, even check bit is 1, data_bit is 8&#xa;  //&#xa;  repeat(32)@( posedge clk ) #1;&#xa;  rx = 0;  // Start signal&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;  // Least significant signal&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;&#xa;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 0;&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;  // Most significant signal&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;  // Parity check&#xa;  repeat(16)@( posedge clk ) #1;&#xa;  rx = 1;  // Stop bit   &#xa;  repeat(64)@( posedge clk ) #1;&#xa;  $finish;  &#xa;&#xa;end&#xa;&#xa;&#xa;" Parent="0">
 <Module Height="319" Name="uart1" Parameters="" Include="uart_def.v" File="Current/uart.model" Comment="" Color="#d3d3d3" X="324.5" Width="273" Class="uart" Y="130.5" Type="model" Code="//&#xa;// Parity is equal to 0 means that there should not have parity bit. Otherwise, there should be one parity bit.&#xa;//&#xa;wire       parity_bit;&#xa;assign parity_bit = ( ~parity ) ? 0 : 1; &#xa;&#xa;//&#xa;// This block is used to receive data&#xa;//&#xa;&#xa;//&#xa;// Edge deteted&#xa;//&#xa;&#xa;reg                     rx_q;&#xa;wire                    rx_start;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    rx_q &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    rx_q &lt;= #`DEL rx;&#xa;  end&#xa;end      &#xa;// Falling edge effective&#xa;assign rx_start = ( rx_q &amp;&amp; ~rx );&#xa;&#xa;//&#xa;// Counter of rx&#xa;//&#xa;&#xa;reg  [7:0]  rx_cnt;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if ( ~rst_n ) begin&#xa;    rx_cnt &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else if ( ns_rx == IDLE_RX || ns_rx == ERROR_RX ) begin&#xa;    rx_cnt &lt;= #`DEL 8'd0;&#xa;  end  // If the next status is IDLE or ERROR, then don't count&#xa;  else begin&#xa;    rx_cnt &lt;= #`DEL rx_cnt + 1'd1;&#xa;  end  // If the next status is not IDLE or ERROR, then begin to count&#xa;end&#xa;&#xa;//&#xa;// Three paragraph FSM of receive &#xa;//&#xa;reg       [3:0]   cs_rx;&#xa;reg       [3:0]   ns_rx;&#xa;parameter [3:0]   IDLE_RX   = 4'b0000,&#xa;  START_RX     = 4'b0001,&#xa;  RECEIVE_RX   = 4'b0010,&#xa;  STOP_RX      = 4'b0100,&#xa;  ERROR_RX     = 4'b1000;&#xa;&#xa;// FSM one&#xa;//&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if ( !rst_n ) begin&#xa;    cs_rx &lt;= IDLE_RX;&#xa;  end&#xa;  else begin&#xa;    cs_rx &lt;= ns_rx;&#xa;  end&#xa;end&#xa;&#xa;// FSM two&#xa;//&#xa;&#xa;// cnt_parity_rx means that rx_cnt has counted to the parity bit&#xa;wire [7:0] cnt_parity_rx;&#xa;assign cnt_parity_rx = ( 24 + ( data_bit + parity_bit - 1 ) * 16 ); &#xa;&#xa;always @( * ) begin&#xa;  ns_rx = IDLE_RX;&#xa;  case ( cs_rx )&#xa;    IDLE_RX: begin&#xa;      if( rx_start ) begin&#xa;        ns_rx = START_RX;  // If there has a falling edge in rx, then transmit to START&#xa;      end&#xa;      else begin&#xa;        ns_rx = IDLE_RX;&#xa;      end&#xa;    end&#xa;    START_RX: begin &#xa;      if ( rx &amp;&amp; rx_cnt &lt; 8 ) begin&#xa;        ns_rx = ERROR_RX;  // If rx has a high volage in START status, there must be an error&#xa;      end &#xa;      else if( rx_cnt == 8 ) begin &#xa;        ns_rx = RECEIVE_RX;  // If rx can remain low volage for 8 cycles, we believe communication is correct, then begin to receive data&#xa;      end&#xa;    end&#xa;    RECEIVE_RX: begin&#xa;      if ( rx_cnt == cnt_parity_rx ) begin&#xa;        ns_rx = STOP_RX;&#xa;      end &#xa;      else begin &#xa;        ns_rx = RECEIVE_RX;&#xa;      end&#xa;    end &#xa;    STOP_RX: begin&#xa;      if( rx_cnt == cnt_parity_rx + ( stop_bit * 16 ) ) begin&#xa;        ns_rx = IDLE_RX;&#xa;      end&#xa;      else begin&#xa;        ns_rx = STOP_RX;&#xa;      end&#xa;    end&#xa;    ERROR_RX: begin &#xa;      ns_rx = IDLE_RX; &#xa;    end &#xa;  endcase&#xa;end&#xa;&#xa;// FSM three&#xa;//&#xa;&#xa;reg [3:0] count_cycle_rx; // Used to count the bit num of received data&#xa;reg [8:0] data_received_temp;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin &#xa;  if ( rst_n ) begin &#xa;    data_received_temp &lt;= #`DEL 9'd0;&#xa;    rx_buf_full        &lt;= #`DEL 1'b0;&#xa;    count_cycle_rx     &lt;= #`DEL 4'd1;&#xa;  end&#xa;  else begin &#xa;    case ( ns_rx )&#xa;      IDLE_RX: begin&#xa;        data_received_temp &lt;= #`DEL 9'd0;&#xa;        rx_buf_full        &lt;= #`DEL 1'b0;&#xa;        count_cycle_rx     &lt;= #`DEL 4'd1;&#xa;      end&#xa;      START_RX: begin&#xa;        data_received_temp &lt;= #`DEL 9'd0;&#xa;        rx_buf_full        &lt;= #`DEL 1'b0;&#xa;        count_cycle_rx     &lt;= #`DEL 4'd1;&#xa;      end&#xa;      RECEIVE_RX: begin&#xa;        if( count_cycle_rx == data_bit + parity_bit ) begin&#xa;          data_received_temp[count_cycle_rx - 1] &lt;= #`DEL rx;  // Parity check bit&#xa;          rx_buf_full                            &lt;= #`DEL 1'b0;&#xa;          count_cycle_rx                         &lt;= #`DEL 4'd1; // Reset count_cycle_rx &#xa;        end  // Receive parity check bit&#xa;        else if( rx_cnt == 24 + ( count_cycle_rx - 1 ) * 16 ) begin&#xa;          data_received_temp[count_cycle_rx - 1] &lt;= #`DEL rx;&#xa;          rx_buf_full                            &lt;= #`DEL 1'b0;&#xa;          count_cycle_rx                         &lt;= #`DEL count_cycle_rx + 1'b1;&#xa;        end  // Data bit&#xa;      end&#xa;      STOP_RX: begin&#xa;        if( rx_cnt == cnt_parity_rx + ( stop_bit * 16 ) ) begin&#xa;          data_received_temp &lt;= #`DEL data_received_temp;&#xa;          rx_buf_full        &lt;= #`DEL 1'b1;&#xa;          count_cycle_rx     &lt;= #`DEL count_cycle_rx;&#xa;        end&#xa;      end&#xa;      ERROR_RX: begin        &#xa;        data_received_temp &lt;= #`DEL 9'd0;&#xa;        rx_buf_full        &lt;= #`DEL 1'b0;&#xa;        count_cycle_rx     &lt;= #`DEL 4'd1; &#xa;      end&#xa;    endcase &#xa;  end &#xa;end      &#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    data_received &lt;= #`DEL 9'b0;&#xa;  end&#xa;  else if( rx_buf_full ) begin&#xa;    data_received &lt;= #`DEL data_received_temp;  // Ensure data can be collected&#xa;  end&#xa;end           &#xa;&#xa;//&#xa;// This block is used to send data&#xa;//&#xa;&#xa;// &#xa;// Edge deteted&#xa;//&#xa;&#xa;reg         tx_en_q;&#xa;wire        tx_start;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    tx_en_q &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin&#xa;    tx_en_q &lt;= #`DEL tx_en;&#xa;  end&#xa;end      &#xa;// Rising edge effective&#xa;assign tx_start = ( ~tx_en_q &amp;&amp; tx_en );&#xa;&#xa;//&#xa;// Transmit data_send to shift_reg&#xa;//&#xa;&#xa;reg  [8:0]  shift_reg;&#xa;&#xa;always @( posedge tx_start or negedge rst_n ) begin&#xa;  if( ~rst_n ) begin&#xa;    shift_reg &lt;= #`DEL 9'd0;&#xa;  end&#xa;  else begin&#xa;    shift_reg[7:0] &lt;= #`DEL data_send;&#xa;    //&#xa;    // Parity check bit&#xa;    case( parity )&#xa;      3'b000: shift_reg[8]   &lt;= #`DEL 0;   // No parity check&#xa;      3'b001: shift_reg[8]   &lt;= #`DEL ( ^data_send ) ? 0 : 1;  // Odd check&#xa;      3'b010: shift_reg[8]   &lt;= #`DEL ( ^data_send ) ? 1 : 0;  // Even check&#xa;      3'b011: shift_reg[8]   &lt;= #`DEL 0;  // 0 check&#xa;      3'b100: shift_reg[8]   &lt;= #`DEL 1;  // 1 check&#xa;    endcase&#xa;  end&#xa;end      &#xa;&#xa;//&#xa;// Frequence division&#xa;//&#xa;&#xa;reg  [7:0]  tx_cnt;&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if ( ~rst_n ) begin&#xa;    tx_cnt &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else if ( ns_tx == IDLE_TX ) begin&#xa;    tx_cnt &lt;= #`DEL 8'd0;&#xa;  end&#xa;  else begin&#xa;    tx_cnt &lt;= #`DEL tx_cnt + 1'b1;&#xa;  end&#xa;end&#xa;&#xa;//&#xa;// Three paragraph FSM of send data&#xa;//&#xa;reg       [2:0]   cs_tx;&#xa;reg       [2:0]   ns_tx;&#xa;parameter [2:0]  IDLE_TX   = 3'b000,&#xa;  START_TX     = 3'b001,&#xa;  SEND_TX      = 3'b010,&#xa;  STOP_TX      = 3'b100;&#xa;&#xa;//&#xa;// FSM one&#xa;always @( posedge clk or negedge rst_n ) begin&#xa;  if ( !rst_n ) begin&#xa;    cs_tx &lt;= IDLE_TX;&#xa;  end&#xa;  else begin&#xa;    cs_tx &lt;= ns_tx;&#xa;  end&#xa;end&#xa;&#xa;// &#xa;// FSM two&#xa;&#xa;// cnt_parity_tx means that tx_cnt has counted to the parity bit&#xa;wire [7:0] cnt_parity_tx;&#xa;assign cnt_parity_tx = ( data_bit + parity_bit ) * 16; &#xa;&#xa;always @( * ) begin&#xa;  ns_tx = IDLE_TX;&#xa;  case ( cs_tx )&#xa;    IDLE_TX: begin&#xa;      if ( tx_start ) begin&#xa;        ns_tx = START_TX;&#xa;      end&#xa;      else begin&#xa;        ns_tx = IDLE_TX;&#xa;      end&#xa;    end&#xa;    START_TX: begin&#xa;      ns_tx = SEND_TX;&#xa;    end &#xa;    SEND_TX: begin &#xa;      if ( tx_cnt == cnt_parity_tx ) begin&#xa;        ns_tx = STOP_TX; &#xa;      end &#xa;      else begin &#xa;        ns_tx = SEND_TX;&#xa;      end&#xa;    end&#xa;    STOP_TX: begin &#xa;      if ( tx_cnt == cnt_parity_tx + stop_bit * 16 ) begin&#xa;        ns_tx = IDLE_TX; &#xa;      end&#xa;      else begin&#xa;        ns_tx = STOP_TX;&#xa;      end&#xa;    end &#xa;  endcase &#xa;end&#xa;&#xa; &#xa;// FSM three &#xa;//&#xa;&#xa;reg [3:0] count_cycle_tx; // Used to count the bit num of send data&#xa;&#xa;always @( posedge clk or negedge rst_n ) begin &#xa;  if ( !rst_n ) begin &#xa;    tx          &lt;= #`DEL 1'b1;&#xa;    tx_buf_full &lt;= #`DEL 1'b0;&#xa;  end&#xa;  else begin &#xa;    case ( ns_tx )&#xa;      IDLE_TX: begin&#xa;        tx             &lt;= #`DEL 1'b1;&#xa;        tx_buf_full    &lt;= #`DEL 1'b0;&#xa;        count_cycle_tx &lt;= #`DEL 4'd1;&#xa;      end&#xa;      START_TX: begin&#xa;        tx             &lt;= #`DEL 1'b0;&#xa;        tx_buf_full    &lt;= #`DEL 1'b0;&#xa;        count_cycle_tx &lt;= #`DEL 4'd1;&#xa;      end&#xa;      SEND_TX: begin&#xa;        if( count_cycle_tx == parity_bit + data_bit ) begin&#xa;          tx             &lt;= #`DEL shift_reg[count_cycle_tx-1];&#xa;          tx_buf_full    &lt;= #`DEL 1'b1;&#xa;          count_cycle_tx &lt;= #`DEL 4'd1;&#xa;        end&#xa;        else if( tx_cnt == 16 * count_cycle_tx ) begin&#xa;          tx             &lt;= #`DEL shift_reg[count_cycle_tx-1];&#xa;          tx_buf_full    &lt;= #`DEL 1'b1;&#xa;          count_cycle_tx &lt;= #`DEL count_cycle_tx + 1'b1;&#xa;        end&#xa;      end&#xa;      STOP_TX: begin&#xa;        tx             &lt;= #`DEL 1'b1;&#xa;        tx_buf_full    &lt;= #`DEL 1'b0;&#xa;        count_cycle_tx &lt;= #`DEL 4'd1;&#xa;      end&#xa;    endcase &#xa;  end &#xa;end      &#xa;" Parent="uart_tb">
  <Port Height="20" Name="clk" Connect="" Side="left" Color="#0000ff" X="-0.0732601" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.0658307" Inout="input" Parent="uart1"/>
  <Port Height="20" Name="rst_n" Connect="" Side="left" Color="#00ffff" X="-0.0732601" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.163009" Inout="input" Parent="uart1"/>
  <Port Height="20" Name="rx" Connect="" Side="left" Color="#a52a2a" X="-0.0732601" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.260188" Inout="input" Parent="uart1"/>
  <Port Height="20" Name="tx_en" Connect="" Side="left" Color="#d2691e" X="-0.0732601" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.357367" Inout="input" Parent="uart1"/>
  <Port Height="20" Name="data_send" Connect="" Side="left" Color="#7fff00" X="-0.0732601" Width="20" Function="" Datatype="wire" Datasize="8" Y="0.454545" Inout="input" Parent="uart1"/>
  <Port Height="20" Name="parity" Connect="" Side="left" Color="#dc143c" X="-0.0732601" Width="20" Function="" Datatype="wire" Datasize="3" Y="0.551724" Inout="input" Parent="uart1"/>
  <Port Height="20" Name="stop_bit" Connect="" Side="left" Color="#b8860b" X="-0.0732601" Width="20" Function="Which can be 1 or 2" Datatype="wire" Datasize="2" Y="0.648903" Inout="input" Parent="uart1"/>
  <Port Height="20" Name="data_bit" Connect="" Side="left" Color="#ff8c00" X="-0.0732601" Width="20" Function=" It means the length of data, which can be 5, 6, 7 and 8" Datatype="wire" Datasize="4" Y="0.746082" Inout="input" Parent="uart1"/>
  <Port Height="20" Name="tx_buf_full" Connect="" Side="right" Color="#0000ff" X="0.92674" Width="20" Function="" Datatype="reg" Datasize="1" Y="0.134796" Inout="output" Parent="uart1"/>
  <Port Height="20" Name="tx" Connect="" Side="right" Color="#8a2be2" X="0.92674" Width="20" Function="" Datatype="reg" Datasize="1" Y="0.467085" Inout="output" Parent="uart1"/>
  <Port Height="20" Name="data_received" Connect="" Side="right" Color="#a52a2a" X="0.92674" Width="20" Function="" Datatype="reg" Datasize="8" Y="0.633229" Inout="output" Parent="uart1"/>
  <Port Height="20" Name="rx_buf_full" Connect="" Side="right" Color="#5f9ea0" X="0.92674" Width="20" Function="" Datatype="reg" Datasize="1" Y="0.30094" Inout="output" Parent="uart1"/>
 </Module>
 <Port Height="20" Name="clk" Side="left" Color="#0000ff" X="-0.0222222" Width="20" Function="" Datatype="reg" Datasize="1" Y="0.0833333" Inout="input" Parent="uart_tb"/>
 <Port Height="20" Name="rst_n" Side="left" Color="#00ffff" X="-0.0222222" Width="20" Function="" Datatype="reg" Datasize="1" Y="0.183333" Inout="input" Parent="uart_tb"/>
 <Port Height="20" Name="rx" Side="left" Color="#a52a2a" X="-0.0222222" Width="20" Function="" Datatype="reg" Datasize="1" Y="0.283333" Inout="input" Parent="uart_tb"/>
 <Port Height="20" Name="tx_en" Side="left" Color="#d2691e" X="-0.0222222" Width="20" Function="" Datatype="reg" Datasize="1" Y="0.383333" Inout="input" Parent="uart_tb"/>
 <Port Height="20" Name="data_send" Side="left" Color="#7fff00" X="-0.0222222" Width="20" Function="" Datatype="reg" Datasize="8" Y="0.483333" Inout="input" Parent="uart_tb"/>
 <Port Height="20" Name="parity" Side="left" Color="#dc143c" X="-0.0222222" Width="20" Function="" Datatype="reg" Datasize="3" Y="0.583333" Inout="input" Parent="uart_tb"/>
 <Port Height="20" Name="stop_bit" Side="left" Color="#b8860b" X="-0.0222222" Width="20" Function="Which can be 1 or 2" Datatype="reg" Datasize="2" Y="0.683333" Inout="input" Parent="uart_tb"/>
 <Port Height="20" Name="data_bit" Side="left" Color="#ff8c00" X="-0.0222222" Width="20" Function=" It means the length of data, which can be 5, 6, 7 and 8" Datatype="reg" Datasize="4" Y="0.783333" Inout="input" Parent="uart_tb"/>
 <Port Height="20" Name="tx_buf_full" Side="right" Color="#0000ff" X="0.977778" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.15" Inout="output" Parent="uart_tb"/>
 <Port Height="20" Name="tx" Side="right" Color="#8a2be2" X="0.977778" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.316667" Inout="output" Parent="uart_tb"/>
 <Port Height="20" Name="data_received" Side="right" Color="#a52a2a" X="0.977778" Width="20" Function="" Datatype="wire" Datasize="8" Y="0.483333" Inout="output" Parent="uart_tb"/>
 <Port Height="20" Name="rx_buf_full" Side="right" Color="#5f9ea0" X="0.977778" Width="20" Function="" Datatype="wire" Datasize="1" Y="0.65" Inout="output" Parent="uart_tb"/>
 <Wire From="uart_tb>clk" Name="uart_tb_clk" Datatype="wire" Datasize="1" To="uart_tb#uart1>clk" Parent="uart_tb"/>
 <Wire From="uart_tb>rst_n" Name="uart_tb_rst_n" Datatype="wire" Datasize="1" To="uart_tb#uart1>rst_n" Parent="uart_tb"/>
 <Wire From="uart_tb>rx" Name="uart_tb_rx" Datatype="wire" Datasize="1" To="uart_tb#uart1>rx" Parent="uart_tb"/>
 <Wire From="uart_tb>tx_en" Name="uart_tb_tx_en" Datatype="wire" Datasize="1" To="uart_tb#uart1>tx_en" Parent="uart_tb"/>
 <Wire From="uart_tb>data_send" Name="uart_tb_data_send" Datatype="wire" Datasize="8" To="uart_tb#uart1>data_send" Parent="uart_tb"/>
 <Wire From="uart_tb>parity" Name="uart_tb_parity" Datatype="wire" Datasize="3" To="uart_tb#uart1>parity" Parent="uart_tb"/>
 <Wire From="uart_tb>stop_bit" Name="uart_tb_stop_bit" Datatype="wire" Datasize="2" To="uart_tb#uart1>stop_bit" Parent="uart_tb"/>
 <Wire From="uart_tb>data_bit" Name="uart_tb_data_bit" Datatype="wire" Datasize="4" To="uart_tb#uart1>data_bit" Parent="uart_tb"/>
 <Wire From="uart_tb#uart1>tx_buf_full" Name="uart1_tx_buf_full" Datatype="wire" Datasize="1" To="uart_tb>tx_buf_full" Parent="uart_tb"/>
 <Wire From="uart_tb#uart1>rx_buf_full" Name="uart1_rx_buf_full" Datatype="wire" Datasize="1" To="uart_tb>rx_buf_full" Parent="uart_tb"/>
 <Wire From="uart_tb#uart1>tx" Name="uart1_tx" Datatype="wire" Datasize="1" To="uart_tb>tx" Parent="uart_tb"/>
 <Wire From="uart_tb#uart1>data_received" Name="uart1_data_received" Datatype="wire" Datasize="8" To="uart_tb>data_received" Parent="uart_tb"/>
</Module>
